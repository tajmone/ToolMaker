%%COMMENT @(#)Err.imp	1.4 (90/06/28 18:35:17)

   Err.imp                   Date: 1991-03-07/reibert@roo

   C/ANSI-C/C++ module Err - imp script

   Written by SoftLab ab.

%%ENDCOMMENT
%%COMMENT
   Some variables set for use when generating errorhandel source
   from toolmake
%%ENDCOMMENT
%%IF(_i(?) AND NOT _i(lm))
%%  ESET pmkTarget(_tL)
%%  ESET parserPrefix(_sN)
%%  ESET tmkPrefix(_sN)
%%  SET  tmkForce(1)
%%  SET  tmkTokenName(TmToken)
%%  SET  noLister(1)
%%  SET  tmkTokenCode("code")
%%ENDIF
%%IF(pmkTarget("c++"))
%%  SET targetLanguageExtension("cc")
%%ENDIF
%%IF(NOT targetLanguageExtension(?))
%%  SET targetLanguageExtension("c")
%%ENDIF
%%IF(NOT _i(?))
%%  IF(tmkForce(0))
%%    PROCESS(,"%%(parserPrefix)Err.%%(targetLanguageExtension).tmp")
%%  ELSE
%%    PROCESS(,"%%(parserPrefix)Err.%%(targetLanguageExtension)")
%%  ENDIF
%%ENDIF
/*----------------------------------------------------------------------*\

  %%(parserPrefix)Err.%%(targetLanguageExtension)

  Parser error handler

\*----------------------------------------------------------------------*/

%%IF (pmkImport (?R))
/* `%`%IMPORT */
%%INCLUDE (pmkImport)
/* END `%`%IMPORT */
%%ENDIF

%%IF ({"ansi-c","c++"} (%%(pmkTarget)))
#include <string.h>
#include <stdlib.h>
%%ENDIF
%%IF (noLister(?))
%%SET installed(noLm)
%%ELSE
%%SET installed(lm)
%%ENDIF
%%IF (installed(lm))
#include "%%(listerPrefix)List.h"
%%ELSE
#include <stdio.h>

%%ENDIF
%%IF (NOT doNotGenerateTokenH(?))
#include "%%(tmkPrefix)Common.h"
%%ENDIF

#define MaxTokens 5


static char insStr[101] = "";	/* Inserted symbol strings */
static int insToks = 0;

static char delStr[201] = "";	/* Deleted symbol strings */
static int delToks = 0;

/*-----------------------------------------------------------------------------
 * %%(parserPrefix)RPoi - Recovery point, output a message indicating the position.
 *-----------------------------------------------------------------------------
 */
%%IF ({"ansi-c","c++"} (%%(pmkTarget)))
void %%(parserPrefix)RPoi(
    %%(tmkTokenName) *token		/* IN the restart symbol */
)
%%ELSE
void %%(parserPrefix)RPoi(token)
    %%(tmkTokenName) *token;		/* IN the restart symbol */
%%ENDIF
{
    if (delToks > MaxTokens) {
       /* Output a recovery point error message
       */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
       %%(listerPrefix)Log(&(token->%%(tmkTokenSrcp)), 100, sevINF, "");
%%ELSE
       %%(listerPrefix)Log(NULL, 100, sevINF, "");
%%ENDIF
%%ELSE
       fprintf(stderr, "Parsing resumed\n");
%%ENDIF
    }/*if*/

    /* Clear both token print strings */
    insStr[0] = '\0';
    delStr[0] = '\0';

    insToks = 0;
    delToks = 0;
}/*%%(parserPrefix)RPoi()*/


/*-----------------------------------------------------------------------------
 * %%(parserPrefix)ISym - A symbol is to be inserted, collect it for later output, and
 *      construct the requested token for use by the parser.
 *-----------------------------------------------------------------------------
 */
%%IF ({"ansi-c","c++"} (%%(pmkTarget)))
void %%(parserPrefix)ISym(
%%IF (tmkCodeDecl(?V))
    %%(tmkCodeDecl),	/* IN terminal code number */
%%ELSE
    int %%(tmkTokenCode),	/* IN terminal code number */
%%ENDIF
    char *symString,			/* IN terminal string */
    char *printString,			/* IN the terminals print symbol */
    %%(tmkTokenName) *token		/* OUT the created scanner symbol */
)
%%ELSE
void %%(parserPrefix)ISym(%%(tmkTokenCode), symString, printString, token)
%%IF (tmkCodeDecl(?V))
    %%(tmkCodeDecl);	/* IN terminal code number */
%%ELSE
    int %%(tmkTokenCode);	/* IN terminal code number */
%%ENDIF
    char *symString;			/* IN terminal string */
    char *printString;			/* IN the terminals print symbol */
    %%(tmkTokenName) *token;		/* OUT the created scanner symbol */
%%ENDIF
{
    char *selectedString;

    if (insToks < MaxTokens) {
    /* Concatenate the token string
     */
    if (insToks > 0) strcat(insStr, " ");
    if (%%(tmkTokenCode) == 0) strcat(insStr, "<unknown token>");
    else if (%%(tmkTokenCode) == 1) strcat(insStr, "<end of file>");
        else {
            if (*printString != '\0') selectedString = printString;
            else selectedString = symString;
            if (selectedString[0] == '\'') {
                strcat(insStr, &selectedString[1]);
                insStr[strlen(insStr)-1] = '\0';
            } else
                strcat(insStr, selectedString);
        }
    } else if (insToks == MaxTokens) {
    strcat(insStr, " ...");
    }/*if*/
    insToks++;
%%IF (pmISym(?R))
#define sym token
#define sstr symString
#define pstr printString
%%INCLUDE(pmISym)
#undef sym
#undef sstr
#undef pstr
%%ELSE
    /* Make the requested token */
    token->%%(tmkTokenCode) = %%(tmkTokenCode);
%%ENDIF
}/*%%(parserPrefix)ISym()*/


/*-----------------------------------------------------------------------------
 * %%(parserPrefix)DSym - The indicated symbol is deleted by the parser, collect its string
 *      for later output.
 *-----------------------------------------------------------------------------
 */
%%IF ({"ansi-c","c++"} (%%(pmkTarget)))
void %%(parserPrefix)DSym(
    %%(tmkTokenName) *token,		/* IN terminal */
    char *symString,			/* IN terminal string */
    char *printString			/* IN terminals print string */
)
%%ELSE
void %%(parserPrefix)DSym(token, symString, printString)
    %%(tmkTokenName) *token;		/* IN terminal */
    char *symString;			/* IN terminal string */
    char *printString;			/* IN terminals print string */
%%ENDIF
{
%%IF ({"c++"} (%%(pmkTarget)))
    (void)printString;			/* To avoid varnings from CC */
%%ENDIF
    char *selectedString;

    if (delToks < MaxTokens) {
    /* Concatenate the symbol strings */
    if (delToks > 0) strcat(delStr, " ");
    if (token->%%(tmkTokenCode) == 0) strcat(delStr, "<unknown token>");
    else if (token->%%(tmkTokenCode) == 1) strcat(delStr, "<end of file>");
    else {
#ifdef DELETEIDENTIFIERASINPUTTED
            if (token->%%(tmkTokenCode) == 2) selectedString = token->chars;
            else
#endif
            if (*printString != '\0') selectedString = printString;
            else selectedString = symString;
            if (selectedString[0] == '\'') {
                strcat(delStr, &selectedString[1]);
                delStr[strlen(delStr)-1] = '\0';
            } else
                strcat(delStr, selectedString);
        }
    } else if (delToks == MaxTokens) {
    strcat(delStr, " ...");
    }/*if*/
    delToks++;
%%IF (pmDSym(?R))
#define sym token
#define sstr symString
#define pstr printString
%%INCLUDE(pmDSym)
#undef sym
#undef sstr
#undef pstr
%%ENDIF
}/*%%(parserPrefix)DSym()*/


/*-----------------------------------------------------------------------------
 * %%(parserPrefix)Mess - An error message should be output, symbol indicates point of error.
 *-----------------------------------------------------------------------------
 * Method:                              Message:
 *      1 = Symbol(s) insertion         % inserted
 *		2 = Symbol(s) deletion			% deleted
 *		3 = Symbol(s) replacement		% replaced by %
 *      4 = Stack backup                Malformed phrase
 *		5 = Halted                      %. System halted
 *
 * Code:
 *      1 = Unknown token (error token from scanner)
 *		2 = Syntax error
 *		3 = Parse stack overflow
 *		4 = Table error
 *
 * Severity:
 *      1 = Warning
 *		2 = Error (repairable)
 *		3 = Fatal error
 *		4 = System error & Limit error
 *-----------------------------------------------------------------------------
 */
%%IF ({"ansi-c","c++"} (%%(pmkTarget)))
void %%(parserPrefix)Mess(
    %%(tmkTokenName) *sym,		/* IN error token */
    int method,			/* IN recovery method */
    int code,			/* IN error classification */
    int severity		/* IN error severity code */
)
%%ELSE
void %%(parserPrefix)Mess(sym, method, code, severity)
    %%(tmkTokenName) *sym;	/* IN error token */
    int method;			/* IN recovery method */
    int code;			/* IN error classification */
    int severity;		/* IN error severity code */
%%ENDIF
{
%%IF (installed(lm))
    %%(listerPrefix)Sev sev;

    switch (severity) {
    case 1: sev = sevWAR; break;
    case 2: sev = sevERR; break;
    case 3: sev = sevFAT; break;
    case 4: sev = sevSYS; break;
    default: sev = sevSYS; break;
    }
%%ENDIF

    switch (code) {

    case 1:
    /* Unknown symbol, deleted */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
    %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 102, sev, "Unknown Token");
%%ELSE
    %%(listerPrefix)Log(NULL, 102, sev, "Unknown Token");
%%ENDIF
%%ELSE
    fprintf(stderr, "Unknown token deleted\n");
%%ENDIF
    break;

    case 2:
    /* Syntax Error */
    switch (method) {

    case 1:
        /* Insert */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
        %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 101, sev, insStr);
%%ELSE
        %%(listerPrefix)Log(NULL, 101, sev, insStr);
%%ENDIF
%%ELSE
        fprintf(stderr, "%s inserted\n", insStr);
%%ENDIF
        break;

    case 2:
        /* Delete */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
        %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 102, sev, delStr);
%%ELSE
        %%(listerPrefix)Log(NULL, 102, sev, delStr);
%%ENDIF
%%ELSE
        fprintf(stderr, "%s deleted\n", delStr);
%%ENDIF
        break;

    case 3:
        /* Replace */
%%IF (installed(lm))
        delStr[strlen(delStr)+1] = '\0';
        delStr[strlen(delStr)] = %%(listerPrefix)SEPARATOR; /* Separator */
        strcat(delStr, insStr);
%%IF (tmkTokenSrcp(?))
        %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 103, sev, delStr);
%%ELSE
        %%(listerPrefix)Log(NULL, 103, sev, delStr);
%%ENDIF
%%ELSE
            fprintf(stderr, "%s replaced by %s\n", delStr, insStr);
%%ENDIF
        break;

    case 4:
        /* Stack backed up */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
        %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 104, sev, "");
%%ELSE
        %%(listerPrefix)Log(NULL, 104, sev, "");
%%ENDIF
%%ELSE
            fprintf(stderr, "Syntax error, stack backed up\n");
%%ENDIF
        break;

    case 5:
        /* Syntax error, system halted */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
        %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 105, sev, "");
%%ELSE
        %%(listerPrefix)Log(NULL, 105, sev, "");
%%ENDIF
%%ELSE
            fprintf(stderr, "Syntax error\n");
%%ENDIF
        break;
    }
    break;

    case 3:
    /* Parse stack overflow */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
    %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 106, sev, "");
%%ELSE
    %%(listerPrefix)Log(NULL, 106, sev, "");
%%ENDIF
%%ELSE
    fprintf(stderr, "Parse stack overflow\n");
%%ENDIF
    break;

    case 4:
    /* Parse table error */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
    %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 107, sev, "");
%%ELSE
    %%(listerPrefix)Log(NULL, 107, sev, "");
%%ENDIF
%%ELSE
    fprintf(stderr, "Parse table error\n");
%%ENDIF
    break;
    }

    if (method == 5) {
    /* System halted, output informational message */
%%IF (installed(lm))
%%IF (tmkTokenSrcp(?))
    %%(listerPrefix)Log(&(sym->%%(tmkTokenSrcp)), 108, sevINF, "");
%%ELSE
    %%(listerPrefix)Log(NULL, 108, sevINF, "");
%%ENDIF
%%ELSE
    fprintf(stderr, "Parsing terminated\n");
%%ENDIF
    }
}/*%%(parserPrefix)Mess()*/
%%IF({"SunOS", "HP", "Apollo", "VMS", "UNIX", "cygwin32", "cygwin64", "Linux"} (%%(currentOs)))
%%PROCESS(, "/dev/null")
%%ELSIF({"MSDOS", "WIN32", "mingw"} (%%(currentOs)))
%%PROCESS(, "NUL")
%%ELSE
    *** Unknown current OS in Err.imp: %%(currentOs)
    %%MESSAGE("*** Unknown current OS in Err.imp: %%(currentOs)")
%%ENDIF
%%IF(tmkForce(0))
%%--
%%-- Check generated files, discard them or replace the old files if
%%-- new files are different
%%--
%%  ESET files ("%%(parserPrefix)Err.%%(targetLanguageExtension)")
%%  LOOP(file, files)
%%      IF({"SunOS", "HP", "Apollo", "VMS", "UNIX", "cygwin32", "Linux"} (%%(currentOs)))
%%          IF(IMP$SYSTEM("cmp -s %%(file).tmp %%(file)", output))
%%          IF(NOT IMP$SYSTEM("rm -f %%(file).tmp", output))
%%              EXIT(1,"Trouble removing generated %%(file) '%%(output)', try to remove the %%(file)")
%%          ENDIF
%%          ELSE
%%          IF(NOT IMP$SYSTEM("rm -f %%(file); mv %%(file).tmp %%(file)", output))
%%              EXIT(1,"Trouble generating %%(file) '%%(output)', try to remove the old file")
%%          ENDIF
%%          ENDIF
%%      ELSIF({"MSDOS", "WIN32", "mingw"} (%%(currentOs)))
%%      IF(NOT IMP$SYSTEM("move /Y %%(file).tmp %%(file)", output))
%%              EXIT(1,"Trouble generating %%(file) '%%(output)', try to remove the old file")
%%          ENDIF
%%      ELSE
          *** Unknown current OS in Err.imp: %%(currentOs)
          %%MESSAGE("*** Unknown current OS in Err.imp: %%(currentOs)")
%%      ENDIF
%%  ENDLOOP(file)
%%ENDIF
