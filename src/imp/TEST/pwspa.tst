
%%SET optimize(lr0,trow,ntrow)
%%SET recovery(panic,global,single)
%%SET semantic(on)
%%SET name(MACRO)
%%PROCESS("pwsint.tst")
/* -------------------------- PWSPA ---------------------------------------- */
/*									     */
/* Skeleton: PWSPA		- Parser module			1987-08-06   */
/*									     */
/*	Host:	Dec-Pascal/VMS						     */
/*	Target: Dec-C/VMS						     */
/* ------------------------------------------------------------------------- */
/*									     */
/* Function: The PWSPA module contains the entry point of the LALR(1)	     */
/*	     parser - PWPARS.	 					     */
/* ------------------------------------------------------------------------- */
/* Interface - Scanner & Semantic (defined in the interface file)	     */
/* ------------------------------					     */
/* PWSYMDF = 								     */
/*	union								     */
/*	   {								     */
/*		....							     */
/*	     int code;							     */
/*	   };								     */
/*									     */
/* PWSEMDF =								     */
/*	union								     */
/*	   {								     */
/*		...							     */
/*	   };								     */
/*									     */
/* Interface - routines (defined in the interface file)			     */
/* --------------------							     */
/* pwscan( ... );							     */
/* pwmess( ... );   							     */
/* pwrpoi( ... );   							     */
/* pwisym( ... );   							     */
/* pwdsym( ... );							     */
/*									     */
/* Interface - data (generated by PWS)					     */
/* ----------------							     */
/* xxxxx.DEF   - Parser constants					     */
/* xxxxx.TBL   - Parser tables and structures				     */
/* xxxxx.VOC   - Vocabulary information					     */
/* ------------------------------------------------------------------------- */

#include <setjmp.h>


#define  PWTRUE  1
#define  PWFALSE 0
typedef  short  PWBOOL ;

	/* Interface data definitions */
	/* -------------------------- */

%%INCLUDE(idata)

short	   pwstkp;		/*  Stack pointer		     */
PWSYMDF  pwsyst[PWSTKMX];	/*  Symbol stack		     */
%%IF( semantic(on) )
PWSEMDF  pwsest[PWSTKMX];	/*  Semantic stack		     */ 
%%ENDIF

		/* Interface routines */
		/* ------------------ */

%%INCLUDE(icode)

%%IF( semantic(on))
extern pwsema();
%%ENDIF

		/* Parser constants */
		/* ---------------- */

#define  ERROR   	0		/* Action - Error	 */
#define  SHIFT   	1		/* Action - Shift	 */
#define  SHFT_RED  	2		/* Action - Shift_Reduce */
#define  REDUCE  	3		/* Action - Reduce	 */
#define  ACCEPT  	4		/* Action - Accept	 */

#define  ERR_SYM 	0		/* Error token		  */
#define  ENDMARK	1		/* End of file token code */

	     /* Recovery method */
	     /* --------------- */

#define  NONE_REC    	0		/* No recovery found	    */
#define  IN_REC  	1		/* Insertion of symbol(s)   */
#define  DEL_REC	2		/* Deletion of symbol(s)    */
#define  REP_REC    	3		/* Replacement of symbol(s) */
#define  BAK_REC    	4		/* Stack backup		    */
#define  HALT_REC     	5		/* System halted	    */

	     /* Error class */
	     /* ----------- */

#define  LEX_ERR	1		/* Non valid scanner symbol found */
#define  SYN_ERR	2		/* Normal syntax error		  */
#define  OFLW_ERR	3		/* Parse stack overflow		  */
#define  TAB_ERR	4		/* Parse table error		  */
	   
	     /* Error severity */
	     /* -------------- */   

#define  WAR_SEV	1		/* Warnings		*/
#define  ERR_SEV	2		/* Repairable error	*/
#define  FAT_SEV	3		/* Fatal error		*/
#define  SYS_SEV	4		/* System & limit error */

%%IF( recovery(single))
		/* Error recovery constants */
		/* ------------------------ */
	
#define  PALARNG	PWLAMX+1	/* Look-ahead symbol (array) range   */
%%ENDIF

	/* PWS generated parser constants */
	/* ------------------------------ */

#include "%%(name).DEF"

typedef  short PTSET;	  		  /* Set representation		     */
typedef	 PTSET  PTTSET[(PATMX/PASETSZ)+1];/* Terminal set		     */

#define  PASTATMN  1			  /* Minimal statement number	     */
#define  PASTARNG  PASTATMX-PASTATMN+1    /* State number (array) range      */
typedef  short  PTSTARNG;		  /* and range type		     */

#define  PATMN  1			  /* Minimal terminal number	     */
#define  PATRNG  PATMX-PATMN+1		  /* Terminal symbol (array) range   */
typedef  short  PTTRNG;			  /* and range type		     */

#define  PANTSMN  (PATMX+1)		  /* Minimal non terminal number     */
#define  PANTSRNG PAVOCMX-PANTSMN+1	  /* Non terminal symbol (array) rng */
typedef  short  PTNTSRNG;		  /* and range type		     */

#define  PAPRDMN  1			  /* Minimal production number       */
#define  PAPRDRNG PAPRDMX-PAPRDMN+1	  /* Production (array) range	     */
typedef  short  PTPRDRNG;		  /* and range type		     */

typedef  char /* TINY */ PTACTRNG;	  /* Action range type		     */
typedef  short  PTCCRNG;		  /* Condition code type	     */

#define  PATCRNG (PATCMX+1)	    	  /* Terminal code (array) range     */
typedef  short   PTTCRNG;		  /* Terminal code type		     */
typedef  short   PTENTRNG;		  /* Parse table entry range type    */
typedef  short   PTVOCRNG;		  /* Vocabulary number range type    */

%%IF( optimize(trow) AND NOT optimize(tmerge) AND NOT optimize(tsplit))
typedef  short	 RDSIXRNG;		  /* Row Displacement Index Range    */
%%ENDIF

%%IF( optimize(trow) OR optimize(tmerge) OR optimize(tsplit))
typedef	 short	 PTAIRRNG;		  /* Action Index Row Value Range    */
%%ENDIF
%%IF( optimize(tmerge) OR optimize(tsplit))
typedef	 short	 PTAICRNG;		  /* Action Index Column Value Range */
%%ENDIF
%%IF( optimize(ntrow) OR optimize(ntmerge) OR optimize(ntsplit))
typedef	 short	 PTGIRRNG;		  /* Goto Index Row Value Range	     */
%%ENDIF
%%IF( optimize(ntmerge) OR optimize(ntsplit))
typedef	 short	 PTGICRNG;		  /* Goto Index Column Value Range   */
%%ENDIF


		/* Terminal table */
		/* -------------- */

typedef  PTENTRNG  ACTROW[PAACOLMX-PATMN+1]; /* Row in action table	     */
%%IF( NOT optimize(trow))
typedef  ACTROW  ACTTAB[PAAROWMX-PASTATMN+1];/* Action table		     */
%%ENDIF
%%IF( optimize(trow) AND NOT optimize(tmerge) AND NOT optimize(tsplit))
typedef  RDSIXRNG RDSIXROW[PARCOLMX-PATMN+1];/* Row Displacement Index Row   */
%%ENDIF
%%IF( optimize(tmerge) OR optimize(tsplit) OR optimize(trow))
typedef  PTAIRRNG ACTIXROW[PASTARNG];	     /* Indirect ACTION rows	     */
%%ENDIF
%%IF( optimize(tmerge) OR optimize(tsplit))
typedef  PTAICRNG ACTIXCOL[PATRNG];	     /* Indirect ACTION columns      */
typedef  PTSET  ERRSET[(PAECOLMX/PASETSZ)+1];/* Set of error entries	     */
typedef  ERRSET ERRTAB[PAEROWMX-PASTATMN+1]; /* Non ERROR table		     */
%%IF( optimize(tsplit))
typedef  PTCCRNG  ACTCCROW[PASTARNG];	     /* Condition ACTION row	     */
typedef  PTCCRNG  ACTCCCOL[PATRNG];	     /* Condition ACTION column      */
%%ENDIF
%%IF( optimize(error))
typedef  PTTRNG  ERRIXROW[PASTARNG];	     /* Indirect ERROR rows	     */
typedef  PTSTARNG ERRIXCOL[PATRNG];	     /* Indirect ERROR columns       */
%%ENDIF
%%ENDIF
%%IF( recovery(global))
typedef  struct  {
	    PTTRNG  tsym;
	    PTTRNG  ssym;
	 } CONTREC;
typedef  CONTREC  CONTTAB[PASTARNG];	    /* Continuation function	     */
%%ENDIF

typedef  struct {
%%IF( recovery(global))
	    CONTTAB  cont;
%%ENDIF
	    PTTSET  sepa;
	    PTTSET  fiduc;
	    PTTSET  skip;
	 } RECTAB;

typedef  struct  {
%%IF( NOT optimize(trow))
	     ACTTAB    act;			    /* ACTION table	     */
%%ENDIF
%%IF( optimize(trow))
	     ACTROW    act;			    /* ACTION table	     */
%%ENDIF
%%IF( optimize(trow) AND NOT optimize(tmerge) AND NOT optimize(tsplit))
	     RDSIXROW  actri;			    /* Row Displacement Index*/
%%ENDIF
%%IF( optimize(tsplit) OR optimize(tmerge) OR optimize(trow))
	     ACTIXROW  actrix; 			    /* ACTION row mapping    */
%%ENDIF
%%IF( optimize(tsplit) OR optimize(tmerge))
	     ACTIXCOL  actcix;			    /*  -"-  col mapping     */
%%IF( optimize(tsplit))
	     ACTCCROW  actrc;			    /*  -"-  row conditions  */
	     ACTCCCOL  actcc;			    /*  -"-  col conditions  */
%%ENDIF
	     ERRTAB    err;			    /* Non ERROR table       */
%%IF( optimize(error))
	     ERRIXROW  errrix;			    /* -"- row mapping       */
	     ERRIXCOL  errcix;			    /*       -"- col mapping */
%%ENDIF
%%ENDIF
	     RECTAB    recover;			    /* Error recovery info   */
	 } TERMTAB;	

		/* Non terminal table */
		/* ------------------ */


typedef  PTENTRNG  GTOROW[PAGCOLMX-PANTSMN+1];	
%%IF( NOT optimize(ntrow))
typedef  GTOROW  GTOTAB[PAGROWMX-PASTATMN+1];
%%ENDIF
%%IF( optimize(ntsplit) OR optimize(ntmerge) OR optimize(ntrow))
typedef  PTGIRRNG  GTOIXROW[PASTARNG];
%%ENDIF
%%IF( optimize(ntsplit) OR optimize(ntmerge) )
typedef  PTGICRNG  GTOIXCOL[PANTSRNG];
%%IF( optimize(ntsplit))
typedef  PTCCRNG  GTOCCROW[PASTARNG];
typedef  PTCCRNG  GTOCCCOL[PANTSRNG];
%%ENDIF
%%ENDIF
typedef  PTVOCRNG  PRDTBL[PAPRDRNG];


typedef  struct {
%%IF( NOT optimize(ntrow))
	    GTOTAB    gto;		       /* GOTO table	       */
%%ENDIF
%%IF( optimize(ntrow))
	    GTOROW    gto;		       /* GOTO table	       */
%%ENDIF
%%IF( optimize(ntsplit) OR optimize(ntmerge) OR optimize(ntrow))
	    GTOIXROW  gtorix;		       /* GOTO row mapping     */
%%ENDIF
%%IF( optimize(ntsplit) OR optimize(ntmerge))
	    GTOIXCOL  gtocix;		       /*  -"- col mapping     */
%%IF( optimize(ntsplit))
	    GTOCCROW  gtorc;		       /*  -"- row conditions  */
	    GTOCCCOL  gtocc;		       /*  -"- col conditions  */
%%ENDIF
%%ENDIF
	    PRDTBL    lhs;		       /* Left hand side symbol*/
	    PRDTBL    rhsz;		       /* Size of the RHS      */
	 } NTSTAB;


		/* Vocabulary */
		/* ---------- */

typedef  char  *SYMBREF;
typedef  struct {
	    PTTCRNG  scc;		      /* Scanner code value  */
	    short    icost; 		      /* Insertion cost      */
	    short    dcost;		      /* Deletion cost       */
	    SYMBREF  name;     		      /* Name string	     */
	    SYMBREF  psym;		      /* Print name	     */
	 } VOCREC;
typedef  VOCREC  VOCTAB[PATRNG];	/* Vocabulary  */
			     
typedef  PTSTARNG  PARSTKDF[PWSTKMX];

		/* Generated data structures */
		/* ------------------------- */

#include "%%(name).TBL"

		/* Variables used in the parsing process */
		/* ------------------------------------- */

static  PTSTARNG   currstat;  		/* Current state number */
static  PTENTRNG   arg;			/* Argument		*/
static  PTACTRNG   action;		/* Action type		*/
static  PWBOOL     endparse;		/* Termination flag	*/
static  PARSTKDF   parsstk;		/* Parse stack		*/
static  PTTRNG     scix_tbl[PATCRNG];	/* Converts scanner code*/
					/* to internal value	*/
static  PWSYMDF    token;		/* Scanner token	*/

static  PTSET	   bitmsk[PASETSZ] = {  /* Set mask		*/
			0000001,   0000002,   0000004,
			0000010,   0000020,   0000040,
			0000100,   0000200,   0000400,
			0001000,   0002000,   0004000,
			0010000,   0020000,   0040000,
			0100000
		   };

%%IF( recovery(single))
	  	/* Error recovery look-ahead buffer */
	  	/* -------------------------------- */

static  PWSYMDF    la_buff[PALARNG];	/* Buffer	   	*/
static 	char /* TINY */ la_ptr;		/* Current pointer	*/
static  char /* TINY */ la_end;		/* Last item	   	*/
%%ENDIF


static  jmp_buf pwjmpb;	/* Buffer for long jump */


/* = = = = = = = = = = = =  C O M M O N = = = = = = = = = = = = = = = = = =  */
/*									     */

/* ----------------------- PAABORT ----------------------------------------- */
/*									     */
static paabort(symbol, class, severity) 

PWSYMDF  *symbol;		/* IN  - Current token		     */
short	 class;			/* IN  - Error classification	     */
short	 severity;		/* IN  - Error severity code	     */

{
      pwmess(symbol, HALT_REC, class, severity);
      longjmp(pwjmpb, PWTRUE);	/* Jump out to top level */
}

/* ----------------------- ADD_SET ----------------------------------------- */
/*									     */
/* Add one element to a set						     */

#define add_set(a,s) (s[a / PASETSZ] |= bitmsk[a % PASETSZ])


/* ---------------------- CLR_SET ------------------------------------------ */
/*									     */
/* Clear a PWS set						  	     */

static clr_set(s, upper)

PTSET  s[];			/* OUT  - Cleared set			     */
short  upper;			/* IN	- Upper set range 		     */

{
   short   i;

   for (i = 0; i <= upper; i++)
	s[i] = 0;
}

/* -------------------------- IN_SET --------------------------------------- */
/*									     */
/* Check member inclusion						     */

#define in_set(a,s) (s[a / PASETSZ] & bitmsk[a % PASETSZ])


/* ----------------------- PARSINIT ---------------------------------------- */
/*							     		     */
static parsinit()

{
   short i;

%%IF( recovery(single))
   la_ptr = 0;
   la_end = 0;
%%ENDIF
   pwstkp = 0; currstat = 1;  endparse = PWFALSE; parsstk[0] = 1;
	  
	/* Scanner interface */

   for (i = 0; i <= PATCMX; i++)
	scix_tbl[i] = ERR_SYM;
   for (i = PATMN; i <= PATMX; i++)
	scix_tbl[pavoctbl[i-PATMN].scc] = i;
} 


/* -------------------------- PUSHSTAT ------------------------------------- */
/*									     */
static pushstat(pushtok)

PWBOOL  pushtok;	/* IN - PWTRUE = Push token on symbol stack */
{
   if (++pwstkp < PWSTKMX) {
	parsstk[pwstkp] = currstat;
        if (pushtok) {

#ifdef MOVMEM
	     movmem(&token, &pwsyst[pwstkp], sizeof(PWSYMDF));
#else
	     pwsyst[pwstkp] = token;
#endif
	}
   } else {
	token.code = pavoctbl[token.code-PATMN].scc;
	paabort(&token, OFLW_ERR, SYS_SEV);
   }
} 


/* -------------------------- READSYMB ------------------------------------- */
/*									     */
static readsymb(sym)

PWSYMDF  *sym;		/* OUT  - Scanned token		     */

{
%%IF( recovery(single))
   if (la_ptr < la_end) {
		 /* Read symbol from the look-ahead set */
	la_ptr++;
#ifdef MOVMEM
	movmem(&la_buff[la_ptr], sym, sizeof(PWSYMDF));
#else
	*sym = la_buff[la_ptr];
#endif
   } else {
%%ENDIF
	do {
	    pwscan(sym);
	    if ((sym->code > PATCMX) || (sym->code < 0))
		 sym->code = ERR_SYM;
	    else sym->code = scix_tbl[sym->code];
	    if (sym->code == ERR_SYM)
		 pwmess(sym, DEL_REC, LEX_ERR, FAT_SEV);
	} while (sym->code == ERR_SYM);
%%IF( recovery(single))
   }
%%ENDIF
}

/* ----------------------------- ACT_TBL ----------------------------------- */
/*									     */
static act_tbl(state, sym, action, arg)

PTSTARNG   state;		/* IN  - State number		     */
PTTRNG     sym;			/* IN  - Symbol number		     */
PTACTRNG   *action;		/* OUT - Parser action		     */
PTENTRNG   *arg;		/* OUT - Parser argument (prod/state)*/

{
   PTENTRNG ent;		/* Action table entry	*/

%%IF( optimize(tmerge) OR optimize(tsplit))
%%IF( optimize(error))
   if (in_set(pattbl.errcix[sym-PATMN],
	      pattbl.err[pattbl.errrix[state-PASTATMN]-PASTATMN]))
%%ENDIF
%%IF( NOT optimize(error))
   if (in_set(sym, pattbl.err[state-PASTATMN]))
%%ENDIF
%%IF( optimize(tsplit) )
       if (pattbl.actrc[state-PASTATMN] < pattbl.actcc[sym-PATMN]) 
	    ent = pattbl.actrix[state-PASTATMN];
       else if (pattbl.actrc[state-PASTATMN] > pattbl.actcc[sym-PATMN])
	    ent = pattbl.actcix[sym-PATMN];
       else
%%ENDIF
%%IF( optimize(trow))
	    ent = pattbl.act[pattbl.actrix[state-PASTATMN]-PASTATMN+
			       pattbl.actcix[sym-PATMN]-PATMN];
%%ENDIF
%%IF( NOT optimize(trow))
	    ent = pattbl.act[pattbl.actrix[state-PASTATMN]-PASTATMN]
			      [pattbl.actcix[sym-PATMN]-PATMN];
%%ENDIF
   else ent = ERROR;
%%ENDIF
%%IF( NOT optimize(tmerge) AND NOT optimize(tsplit))
%%IF( optimize(trow))
   if (pattbl.actri[pattbl.actrix[state-PASTATMN]-PASTATMN+sym-PATMN] == state)
	ent = pattbl.act[pattbl.actrix[state-PASTATMN]-PASTATMN+sym-PATMN];
   else ent = ERROR;
%%ENDIF
%%IF( NOT optimize(trow))
   ent = pattbl.act[state-PASTATMN] [sym-PATMN];
%%ENDIF
%%ENDIF
      
   *action = ent / PAIX;
   *arg    = ent % PAIX;
} 


/* -------------------------- GOTO_TBL ------------------------------------- */
/*									     */
static goto_tbl(state, sym, action, arg)

PTSTARNG  state;		/* IN  - State number		     */
PTNTSRNG  sym;			/* IN  - Symbol number		     */
PTACTRNG  *action;		/* OUT - Parser action		     */
PTENTRNG  *arg;			/* OUT - Parser argument (prod/state)*/

{
   PTENTRNG ent;	/* Goto table entry   */

%%IF( optimize(ntsplit))
   if (pantstbl.gtorc[state-PASTATMN] < pantstbl.gtocc[sym-PANTSMN])
	ent = pantstbl.gtorix[state-PASTATMN];
   else if (pantstbl.gtorc[state-PASTATMN] > pantstbl.gtocc[sym-PANTSMN])
	ent = pantstbl.gtocix[sym-PANTSMN];
   else
%%ENDIF
%%IF( optimize(ntmerge) OR optimize(ntsplit))
%%IF( optimize(ntrow))
	ent = pantstbl.gto[pantstbl.gtorix[state-PASTATMN]-PASTATMN+
			     pantstbl.gtocix[sym-PANTSMN]-PANTSMN];
%%ENDIF
%%IF( NOT optimize(ntrow))
	ent = pantstbl.gto[pantstbl.gtorix[state-PASTATMN]-PASTATMN]
			    [pantstbl.gtocix[sym-PANTSMN]-PANTSMN];
%%ENDIF
%%ENDIF
%%IF( NOT optimize(ntmerge) AND NOT optimize(ntsplit))
%%IF( optimize(ntrow))
	ent = pantstbl.gto[pantstbl.gtorix[state-PASTATMN]-PASTATMN+
			   sym-PANTSMN];
%%ENDIF
%%IF( NOT optimize(ntrow))
	ent = pantstbl.gto[state-PASTATMN] [sym-PANTSMN];
%%ENDIF
%%ENDIF

   *action = ent / PAIX;
   *arg    = ent % PAIX;
} 



/* = = = = = = = = = = = = = E R R O R   R E C O V E R Y = = = = = = = = = = */
/*									     */
/*    The error recovery algorithm tries to modify current configuration     */
/*    in such a way that parsing can be resumed correctly.		     */
/*    Current configuration is characterized by				     */
/*		w = x t y      , where  x = parsed input		     */
/*					t = current token		     */
/*					y = unprocessed input		     */
/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */

typedef  struct {
	   PWSYMDF  err_tok;
	   PWSYMDF  res_tok;
	   short    method;
	   short    class;
	   short    severity;
	 } ERR_REC;

static	ERR_REC errdescr; 
	    
%%IF( recovery(single) OR recovery(global) OR recovery(panic))
/* -------------------------- EPUSH ---------------------------------------- */
/*									     */
static epush(state, stack, sp)

PTSTARNG  state;    	/* IN  - State to push		     */
PARSTKDF  stack;	/* IN/OUT - Parser stack	     */
short	    *sp;    	/* IN/OUT - Curr. stack pointer      */

{
	if (++(*sp) < PWSTKMX) {
	     stack[*sp] = state;
	} else
	     paabort(&errdescr.err_tok, OFLW_ERR, SYS_SEV);
}


/* -------------------------- LEGALACT ------------------------------------- */
static PWBOOL  legalact(stack, stack_p, sym)

PARSTKDF  stack;	/* IN  - Current stack		  	*/
short	  stack_p; 	/* IN  - Current stack pointer		*/
PTTRNG    sym;		/* IN  - Symbol code			*/
			/* RET - Returns true if "symbol" is	*/
			/*	 read (shifted) in current state*/

{
 	PTSTARNG  state;	/* Current state		*/
	PTACTRNG  action;	/* Current parser action	*/
	PTENTRNG  arg;		/* Current parser argument	*/

	PARSTKDF  t_stk;	/* Temporary parser stack	*/
	short	  i;		/* For loop index		*/


	for (i=0; i<=stack_p; i=i+1)		/* Copy stack */
	      t_stk[i] = stack[i]; 

	 state = stack[stack_p];

	 for (;;) {
	    act_tbl(state, sym, &action, &arg);
	    switch (action) {

	       case ERROR:  return(PWFALSE);

	       case SHIFT:
	       case SHFT_RED:	
	       case ACCEPT: return(PWTRUE);

	       case REDUCE:
		       do {
			    stack_p = stack_p - pantstbl.rhsz[arg-PAPRDMN];
			    goto_tbl(t_stk[stack_p], pantstbl.lhs[arg-PAPRDMN],
				     &action, &arg);
			    epush(state, t_stk, &stack_p);
		       } while (action != SHIFT);
	
		       state = arg; t_stk[stack_p] = state;
	    }
	 }
}
			     
	
/* -------------------------- GLEGSYM -------------------------------------- */
/*									     */
static glegsym(stack, stack_p, legals)		/* Get legal symbols   */

PARSTKDF  stack;	/* IN  - Current stack		     */
short	  stack_p;	/* IN  - Current stack pointer	     */
PTTSET    legals;	/* OUT - Legal symbols in curr state	*/

{
	short  sym;		/* Loop index	*/

	clr_set(legals, PATMX/PASETSZ);
	for (sym = 1; sym <= PATMX; sym++)
	      if (legalact(stack, stack_p, sym)) 
		   add_set(sym, legals);
}


%%IF( recovery(panic))
/* ------------------------- BACKUP ---------------------------------------- */
/*									     */
static short backup(stack, stack_p, sym)

PARSTKDF    stack;	     /* IN  - Current stack	     */
short	    stack_p;	     /* IN  - Current stack pointer  */
PTTRNG	    sym;	     /* IN  - Recovery symbol	     */
	      		     /* RET - New stack pointer. 0 if*/
			     /*       symbol is not accepted */
/* ------------------------------------------------------------------------- */
/* Backup the parse stack until current symbol is accepted	     	     */
/* (shifted) or the parse stack becomes empty				     */
/* ------------------------------------------------------------------------- */

{
	while ((stack_p > 0) && (!legalact(stack, stack_p, sym)))
		stack_p = stack_p - 1;

	return(stack_p);
}
%%ENDIF

/* -------------------- DELSYM --------------------------------------------- */
/*									     */
static delsym(dsymb)

PWSYMDF  *dsymb;	/* IN  - Symbol to delete	     */
			/* OUT - New symbol		     */

{
	short  t;

	t = dsymb->code;
	dsymb->code = pavoctbl[dsymb->code-PATMN].scc;
	pwdsym(dsymb, pavoctbl[t-PATMN].name);
	readsymb(dsymb);
	if (errdescr.method == IN_REC)
	    errdescr.method = REP_REC;
	else if (errdescr.method != REP_REC)
	    errdescr.method = DEL_REC;
}

%%IF( recovery(single) OR recovery(global))
/* -------------------------- INSYM ---------------------------------------- */
/*									     */
static insym(isym, gen_symb)

short	 isym;		/* IN  - Symbol code to insert       */
PWSYMDF  *gen_symb;	/* OUT - Created symbol		     */
      
{
	pwisym(pavoctbl[isym-PATMN].scc, pavoctbl[isym-PATMN].name,
		pavoctbl[isym-PATMN].psym, gen_symb);
	if (errdescr.method == DEL_REC)
	     errdescr.method = REP_REC;
	else if (errdescr.method != REP_REC)
	     errdescr.method = IN_REC; 
	gen_symb->code = isym;
}
%%ENDIF
	 
      
%%IF( recovery(panic) AND NOT recovery(global))
/* -------------------------- SKIPSYMS ------------------------------------- */
/*									     */
static skipsyms(first, stopsys, err_tok)
	       
PWBOOL    first;		/* IN  - Called once before? */
PTTSET    stopsys;		/* IN  - Stop symbols	     */
PWSYMDF   *err_tok;		/* IN/OUT - Current token    */

/* ------------------------------------------------------------------------- */
/*									     */
/* Discard input symbols until 						     */
/*	a) Token is in "stopsys"					     */
/*	b) Token is in the fiducial set					     */
/*     							 		     */
/* Skip symbols are discarded					  	     */
/* ------------------------------------------------------------------------- */
{
	if (!first)
	     delsym(err_tok);

	while ((!in_set(err_tok->code, stopsys)) &&
	       (!in_set(err_tok->code, pattbl.recover.fiduc)) &&
	       (err_tok->code != ENDMARK) ||
	       (in_set(err_tok->code, pattbl.recover.skip)))
		  delsym(err_tok);
}

/* -------------------- PANIC ---------------------------------------------- */
/*									     */
static panic(leg_sys, err_stk, err_stkp, err_tok, newstat) 

PTTSET    leg_sys;		/* IN - Legal symbols in current state  */
PARSTKDF  err_stk;		/* IN  - Current parser stack		*/
short	  *err_stkp;		/* IN/OUT  - Current stack pointer	*/
PWSYMDF   *err_tok;		/* IN/OUT  - Current token		*/  
PTSTARNG  *newstat;		/* OUT - New state after recovery	*/

{
	PWBOOL  first;			/* First skip?       */
	short	new_stkp;		/* Temporary pointer */

	first = PWTRUE;
      
	do {
	    skipsyms(first, leg_sys, err_tok);
	    new_stkp = backup(err_stk, *err_stkp, err_tok->code);
	    first = PWFALSE;
	} while ((new_stkp <= 0) && (err_tok->code != ENDMARK));

	if ((new_stkp != err_stkp) && (new_stkp > 0))
	     errdescr.method = BAK_REC;

	*err_stkp = new_stkp;
	*newstat = err_stk[*err_stkp];
}
%%ENDIF


%%IF( recovery(global))
/* = = = = = = = = = = G L O B A L   R E C O V E R Y = = = = = = = = = = = = */
/*									     */
/* 	 The global recovery technique is a "true local corrector", i.e. it  */
/*	 will always return a legal configuration for any input.	     */
/*	 Logically the algorithm can be described as follows		     */
/*  	   1) Roerich method (Karlsruhe)				     */
/*		a.  Find a continuation "u" of "x", such that "xu" is	     */
/*		    accepted.						     */
/*	 	b.  De composite "ty" into "qsy'", where q is a string       */
/* 		c.  Delete "q"						     */
/*		d.  Insert u' (a prefix of u) between "x" and "sy'" giving   */
/*	   	    xu' s y'. 						     */
%%IF( recovery(panic))
/* 									     */
/*    	   2) Panic mode						     */
/*		If "q" contains a fiducial symbol "a"  then 		     */
/*		a. Pop stack until "a" is accepted.			     */
/*		b. If not succeeded resume at step 1			     */
%%ENDIF
/* ------------------------------------------------------------------------- */
typedef  struct {
	    PTSTARNG   r_state;		/* Recovery state	     */
	    PWBOOL     r_sepa;		/* Insert separator??	     */
	    PTSTARNG   r_sstat;		/* Where to insert separator */ 
	 } REC_POI;


/* ---------------------------- ACCEPTBL ----------------------------------- */
/*									     */
static acceptbl(sym, stack, stack_p, token, found, point)

PTTRNG    sym;		/* IN  - Terminal symbol code	  */
PARSTKDF  stack;	/* IN  - Parse stack		  */
int	  stack_p;	/* IN  - Stack pointer		  */
PWSYMDF   *token;	/* IN  - Current  token		  */
PWBOOL    *found;	/* OUT - "Symbol" accepted??	  */
REC_POI   *point;	/* OUT - Recovery poi. description*/
/* ------------------------------------------------------------------------- */
/*									     */
/* Check whether "symbol" is reachable from current state using 	     */
/* the continuation grammar. 				 		     */
/* ------------------------------------------------------------------------- */
{
	PWBOOL     done;		/* Terminator flag   	   */
	PTSTARNG   state;		/* Current state      	   */
	PTACTRNG   action;		/* Parser action	   */
	PTACTRNG   sep_act;		/*     -"-  separator test */
	PTENTRNG   arg;			/* Parser prod/state	   */
	PTENTRNG   sep_arg;		/*     -"-  separator test */
	PWBOOL     sepa_acc;		/* Separator is accepted?? */
	PARSTKDF   t_stk;		/* Temporary parser stack  */
	PARSTKDF   stk;			/* Temporary stack	   */
	short	   sp;			/* Temporary stack pointer */
	short	   i;			/* Copy loop index	   */

	for (i = 0; i <= stack_p; i = i + 1)
	       t_stk[i] = stack[i];

	state = t_stk[stack_p];
	done = PWFALSE;
	
	while (!done) {
	    act_tbl(state, sym, &action, &arg);
	    if ((action == SHIFT) || (action == SHFT_RED) || 
		(action == ACCEPT)) {
		     /* Symbol is directly accepted */

		 done = PWTRUE;
		 *found = PWTRUE;
		 point->r_state = state;
	    } else {
		 /* Use the continuation grammar */
		
		 act_tbl(state, pattbl.recover.cont[state-PASTATMN].tsym, 
			 &action, &arg);
		 act_tbl(state, pattbl.recover.cont[state-PASTATMN].ssym,
			 &sep_act, &sep_arg);
		 if ((action != sep_act) || (arg != sep_arg)) {
			/* A separator is legal. Check if current  */
			/* symbol is accepted behind the separator */
			
		      sp = stack_p; 
		      for (i = 0; i <= stack_p; i = i + 1)
			    stk[i] = t_stk[i];
		      sepa_acc  = PWFALSE;
		      while (!sepa_acc) 

			  switch (sep_act) {

			     case ERROR:
			     case ACCEPT:
				    sepa_acc = PWTRUE;
				    break;

			     case SHIFT: 
				    sepa_acc = PWTRUE;
				    epush(sep_arg, stk, &sp);
				    break;
				    
			     case SHFT_RED:
				    epush(1, stk, &sp);
				    sepa_acc = PWTRUE;

			     case REDUCE:			
				    do {
 					 sp = sp -
					      pantstbl.rhsz[sep_arg-PAPRDMN];
					 goto_tbl(stk[sp],
						 pantstbl.lhs[sep_arg-PAPRDMN],
						 &sep_act, &sep_arg);
					 epush(1, stk, &sp);
				    } while (sep_act != SHIFT);
				    
				    stk[sp] = sep_arg;
				    break;
			  }

		      if ((sep_act == SHIFT) || (sep_act == SHFT_RED)) 
			    if (legalact(stk, sp, sym)) {
				    /* Separator is to be inserted */
				 point->r_state = stk[sp];
				 point->r_sepa = PWTRUE;
				 point->r_sstat = state;
				 done = PWTRUE;
				 *found = PWTRUE;
			    }
		 } /* Test for separator */
		  
		 if (!*found)

		      switch (action) {
			     
			 case ERROR: 
				paabort(token, TAB_ERR, SYS_SEV);
				break;
			
			 case ACCEPT:
				done = PWTRUE;
				break;

			 case SHIFT:
				state = arg;
				epush(state, t_stk, &stack_p);
				break;

			 case SHFT_RED:
				epush(state, t_stk, &stack_p);

			 case REDUCE:
				do {
				     stack_p = stack_p -
					       pantstbl.rhsz[arg-PAPRDMN];
				     goto_tbl(t_stk[stack_p],
					      pantstbl.lhs[arg-PAPRDMN],
					      &action, &arg);
				     epush(state, t_stk, &stack_p);
				} while (action != SHIFT);
				
				state = arg;
				t_stk[stack_p] = state;
				break;
			}
	    } /* NOT direct acceptable */
	} /* while */
}

/* --------------------------- SEARCH -------------------------------------- */
/*								    	     */
static search(stack, stack_p, token, point)  /* Search recovery point	     */

PARSTKDF  stack;	/* IN - Current stack		       */
short	  *stack_p;	/* IN/OUT - Current stack pointer      */
PWSYMDF   *token;	/* IN/OUT - Current symbol	       */
REC_POI   *point;	/* OUT  - Descriptor of where to       */
			/*	  restart the parser	       */

{
	PTSTARNG  state; 	  /* Current state  	       */
	PWBOOL    rp_found;	  /* Recovery point found??    */
%%IF( recovery(panic))
	short	  new_stkp; 	  /* Temp. stack pointer       */
%%ENDIF


	state = stack[*stack_p];
	point->r_state = state;
	point->r_sepa = PWFALSE;
	point->r_sstat = 1;

	rp_found = PWFALSE;
	do {
	     if (!in_set(token->code, pattbl.recover.skip))
		  acceptbl(token->code, stack, *stack_p, token, &rp_found,
			   point);
	    
	     if (!rp_found) {
%%IF( recovery(panic))
		  new_stkp = 0;
		  if (in_set(token->code, pattbl.recover.fiduc))
			new_stkp = backup(stack, *stack_p, token->code);
		  if (new_stkp > 0) {
		       rp_found = PWTRUE;
		       *stack_p = new_stkp;
		       point->r_state = stack[*stack_p];
		       errdescr.method = BAK_REC;
		  } else 
%%ENDIF
		       delsym(token);
	     }
	} while (!rp_found);
}


/* -------------------------- REACH ---------------------------------------- */
/*									     */
static reach(stack, stack_p, token, point)

PARSTKDF   stack;		/* IN/OUT - Current stack	   */
int	   *stack_p;		/* IN/OUT - Current stack pointer  */	
PWSYMDF    *token;		/* IN/OUT - Current symbol	   */
REC_POI    *point;		/* IN - Recovery point descriptor  */
/* ------------------------------------------------------------------------- */
/*									     */
/* 	Use the continuation functions and insert symbols upto current       */
/* 	token.								     */
/* ------------------------------------------------------------------------- */
{
	PTSTARNG  state;	/* Current state	  */
	PTTRNG    cont_sym;	/* Continuation symbol    */
	PWSYMDF   gen_symb;	/* Generated symbol	  */
	PTACTRNG  action;	/* Current parser action  */
	PTENTRNG  arg;		/* Current prod/state	  */

	state = stack[*stack_p];
	while (state != point->r_state) {
	    if (point->r_sepa)
		 if (state == point->r_sstat)
		      cont_sym = pattbl.recover.cont[state-PASTATMN].ssym;
		 else cont_sym = pattbl.recover.cont[state-PASTATMN].tsym;
	    else cont_sym = pattbl.recover.cont[state-PASTATMN].tsym;

	    act_tbl(state, cont_sym, &action, &arg);
	    switch (action) {
	      
		case SHIFT:
			state = arg;
			insym(cont_sym, &gen_symb);
			epush(state, stack, stack_p);
#ifdef MOVMEM
			movmem(&gen_symb, &pwsyst[*stack_p], sizeof(PWSYMDF));
#else
			pwsyst[*stack_p] = gen_symb;
#endif
			break;

		case SHFT_RED:
			insym(cont_sym, &gen_symb);
			epush(state, stack, stack_p);
#ifdef MOVMEM
			movmem(&gen_symb, &pwsyst[*stack_p], sizeof(PWSYMDF));
#else
			pwsyst[*stack_p] = gen_symb;
#endif

		case REDUCE:
			do {
			     *stack_p = *stack_p - pantstbl.rhsz[arg-PAPRDMN];
%%IF( semantic(on))
			     pwsema(arg);
%%ENDIF
			     goto_tbl(stack[*stack_p],
				      pantstbl.lhs[arg-PAPRDMN],
				      &action, &arg);
			     epush(state, stack, stack_p);
			} while (action != SHIFT);
			state = arg;
			stack[*stack_p] = state;
	    }
	} /* while */
}


/* -------------------------- GLOBAL --------------------------------------- */
/*									     */
static global(err_stk, err_stkp, err_tok, newstat)

PARSTKDF   err_stk;		/* IN/OUT - Current parse stack     */
short	   *err_stkp;		/* IN/OUT - Current stack pointer   */
PWSYMDF    *err_tok;		/* IN/OUT - Current token	    */
PTSTARNG   *newstat;		/* OUT - State after recovery	    */	

{
	REC_POI  point;		/* Recovery point descriptor */

	search(err_stk, err_stkp, err_tok, &point);
	reach(err_stk, err_stkp, err_tok, &point);
	*newstat = err_stk[*err_stkp];
} 
%%ENDIF
	      
%%IF( recovery(single))
/* = = = = = = = = = = S I N G L E   R E C O V E R Y = = = = = = = = = = = = */
/*									     */
/* 	 The single recovery technique tries to REPAIR the error by finding  */
/* 	 the least cost single symbol correction. One single symbol of       */
/* 		- insertion						     */
/*		- deletion						     */
/*		- replacement						     */
/* 	 is concidered. The cost of the repair is the sum of the ADAPTION    */
/* 	 cost and the MODIFICATION cost. The adaption cost indicates how     */
/* 	 well a correction fits in the context. The modification cost is     */
/* 	 based on the insertion/deletion cost given in the input. A	     */
/* 	 correction is applied if the cost is below a predefined threshold   */
/* 	 value.								     */
/* ------------------------------------------------------------------------- */
#define  SH_COST  PWSCOST	      /* The cost of shifting one symbol     */
#define  INF_COST (SH_COST*PWLAMX)    /* Infinity	     		     */
#define  THRESH   (PWLAMX-3)*SH_COST  /* Acceptance cost		     */

/* --------------------------- READ_LA ------------------------------------- */
/*									     */
static read_la(token)

PWSYMDF  *token;		/* IN - Current token	 */

{	int	  i;
	PWSYMDF   symbol;

#ifdef MOVMEM
	movmem(token, &la_buff[0], sizeof(PWSYMDF));
#else
	la_buff[0] = *token;
#endif
	for (i=la_ptr+1; i<=la_end; i++)
	      /* Move old look_ahead to the beginning of the buffer */
#ifdef MOVMEM
	    movmem(&la_buff[i], &la_buff[i-la_ptr], sizeof(PWSYMDF));
#else
	    la_buff[i-la_ptr] = la_buff[i];
#endif
	la_end = la_end - la_ptr;
	la_ptr = -1;

	while ((la_buff[la_end].code != ENDMARK) &&
	       (la_end < PWLAMX)) {
	    la_end = la_end + 1;
	    do {
		 pwscan(&symbol);
		 if ((symbol.code > PATCMX) || (symbol.code < 0))
		      symbol.code = ERR_SYM;
		 else symbol.code = scix_tbl[symbol.code];
		 if (symbol.code == ERR_SYM)
		      pwmess(&symbol, DEL_REC, LEX_ERR, FAT_SEV);
	    } while (symbol.code == ERR_SYM);
#ifdef MOVMEM
	    movmem(&symbol, &la_buff[la_end], sizeof(PWSYMDF));
#else
	    la_buff[la_end] = symbol;
#endif
	 }
}

/* -------------------------- RDLASYM -------------------------------------- */
/*									     */
static  PTTRNG rdlasym(index)

char /* TINY */ index;	/* IN  - I:th look-ahead symbol      */
		 	/* RET - Token code		     */
/* ------------------------------------------------------------------------- */
/*									     */
/* 	    Fetches the i:th look-ahead symbol code from the look-ahead set  */
/* ------------------------------------------------------------------------- */
{
	if (index > la_end)
	     return(ENDMARK);
	else 
	     return(la_buff[index].code);
}

	
/* -------------------------- LAPARSE -------------------------------------- */
/*									     */
static laparse(sym, next_la, stack, stack_p, cost)

PTTRNG    sym;		/* IN  - Current terminal symbol     */
char /* TINY */ next_la;/* IN  - Index to next look-ahead sy */
PARSTKDF  stack;	/* IN  - Parse stack		     */
short	  stack_p;	/* IN  - Current stack pointer	     */
short	  *cost;	/* OUT - Adaption cost		     */
/* ------------------------------------------------------------------------- */
/* 									     */
/* 	    Continue the parsing process by reading tokens from the	     */
/* 	    look-ahead set. The parse is terminated when		     */
/* 			- out of read ahead 				     */
/*			- a new error is encountered			     */
/* 	    Note! No semantic actions are carried out			     */
/* ------------------------------------------------------------------------- */
{
	PWBOOL   done ;		/* Terminator flag	     */
	char /* TINY */ sh_cnt;	/* Number of shifted symbols */
	PTSTARNG state;		/* Current state number      */
	PTACTRNG action;	/* Parser action	     */
	PTENTRNG arg; 		/*   "-   argument	     */

	short	 i;		/* Loop index		     */
	PARSTKDF t_stk;		/* Temporary stack	     */

	for (i = 0; i <= stack_p; i = i + 1)	/* Copy stack */
	       t_stk[i] = stack[i];	

	done = PWFALSE;  sh_cnt = 0;
	state = t_stk[stack_p];

	while (!done) {
	    act_tbl(state, sym, &action, &arg);
	
	    switch (action) {

	       case ERROR: 
		      done = PWTRUE;
		      break;
	
	       case SHIFT:
		      state = arg;
		      epush(state, t_stk, &stack_p);
		      sh_cnt = sh_cnt + 1;
		      if (sh_cnt == PWLAMX) 
			   done = PWTRUE;
		      else {
			   sym = rdlasym(next_la);
			   next_la = next_la + 1;
		      }
		      break;

	       case SHFT_RED:
		      epush(state, t_stk, &stack_p);
		      sh_cnt = sh_cnt + 1;
		      if (sh_cnt == PWLAMX)
			   done = PWTRUE;
		      else {
			   sym = rdlasym(next_la);
			   if (next_la < PWLAMX) 
				next_la = next_la + 1;
		      }

	       case REDUCE:
		      do {
			   stack_p = stack_p - pantstbl.rhsz[arg-PAPRDMN];
			   goto_tbl(t_stk[stack_p], pantstbl.lhs[arg-PAPRDMN],
				    &action, &arg);
			   epush(state, t_stk, &stack_p);
		      } while (action != SHIFT); 

		      state = arg;
		      t_stk[stack_p] = state;
		      break;

	       case ACCEPT:
		      done = PWTRUE;  sh_cnt = PWLAMX;
		      break;

	    }
	}

	*cost = INF_COST - (sh_cnt*SH_COST);
}


       
/* -------------------------- TRY_IN --------------------------------------- */
/*									     */
static try_in(legals, stack, stack_p, sym, cost, choice)

PTTSET   legals;	/* IN  - Set of legal symbols	     */
PARSTKDF stack;		/* IN  - Current parser stack	     */
short	 stack_p;	/* IN  - Current stack pointer       */
PTTRNG   *sym;		/* OUT - Best insertion symbol       */
short	 *cost;		/* OUT - Best cost so far	     */
short	 *choice;	/* OUT - Best choice so far	     */
/* ------------------------------------------------------------------------- */
/*									     */
/* 	Tries to insert a symbol from the legal set in front of current      */
/*	token								     */
/*		x t y  => x st y	, where s becomes current symbol     */
/* ------------------------------------------------------------------------- */
{
	short	 i;
	short	 mod_cost;	/* Modification cost	 */
	short	 ad_cost;	/* Adaption cost 	 */
	short	 tot_cost;	/* Total insertion cost  */

	for (i=1; i<=PATMX; i++) {  /* For all legal symbols */
	      if (in_set(i, legals)) {
		   mod_cost = pavoctbl[i-PATMN].icost;
		   if (mod_cost < *cost) {
			laparse(i, 0, stack, stack_p, &ad_cost);
			tot_cost = ad_cost + mod_cost;
			if (tot_cost < *cost) {
			     *cost = tot_cost;
			     *choice = IN_REC;
			     *sym = i;
			}
		   }
	      }
	}
}

/* -------------------------- TRY_REP -------------------------------------- */
/*									     */
static try_rep(legals, stack, stack_p, sym, cost, choice)

PTTSET   legals;	/* IN  - Set of legal symbols	     */
PARSTKDF stack;		/* IN  - Current parser stack	     */
short	 stack_p;	/* IN  - Current stack pointer       */
PTTRNG   *sym;		/* OUT - Best replacement symbol     */
short	 *cost;		/* OUT - Best cost so far	     */
short	 *choice;	/* OUT - Best choice so far	     */
/* ------------------------------------------------------------------------- */
/*									     */
/* 	Tries to replace currrent symbol with a new terminal.	    	     */
/*		x t y  => x s y		, where s becomes current symbol     */
/* ------------------------------------------------------------------------- */
{
	short	 i;
	short	 mod_cost;	/* Modification cost	 */
	short	 ad_cost;	/* Adaption cost 	 */
	short	 tot_cost;	/* Total replacment cost */

	for (i=1; i<=PATMX; i++) {  /* For all legal symbols */
	      if (in_set(i, legals)) {
		   mod_cost = (pavoctbl[i-PATMN].icost +
			       pavoctbl[rdlasym(0)-PATMN].dcost) / 2 + 1;
		   if (mod_cost < *cost) {
			laparse(i, 1, stack, stack_p, &ad_cost);
			tot_cost = ad_cost + mod_cost;
			if (tot_cost < *cost) {
			     *cost = tot_cost;
			     *choice = REP_REC;
			     *sym = i;
			}
		   }
	      }
	}
}


/* ----------------------- TRY_DEL ----------------------------------------- */
/*									     */
static try_del(stack, stack_p, cost, choice)

PARSTKDF  stack;	/* IN  - Current parser stack	       */
short	  stack_p;	/* IN  - Current stack pointer         */
short	  *cost;	/* IN/OUT - Best cost so far	       */
short	  *choice;	/* IN/OUT - Best choice so far         */
/* ------------------------------------------------------------------------- */
/*									     */
/* 	Tries to delete current symbol.					     */
/*		x t y  => x  y						     */
/* ------------------------------------------------------------------------- */

{
	short mod_cost;		/* Modification cost	*/
	short ad_cost;  		/* Adaption cost	*/
	short tot_cost;		/* Total deletion cost  */

	mod_cost = pavoctbl[rdlasym(0)-PATMN].dcost;
	if (mod_cost < *cost) {
	      laparse(rdlasym(1), 2, stack, stack_p, &ad_cost);
	      tot_cost = ad_cost + mod_cost;
	      if (tot_cost < *cost) {
		    *cost = tot_cost;
		    *choice = DEL_REC;
	      }
	 }
}

/* -------------------------- INSERT --------------------------------------- */
/*									     */
static insert(sym, token)

PTTRNG   sym;		/* IN  - Symbol code to insert       */
PWSYMDF  *token;	/* OUT - Constructed token	     */
	       
{
 	insym(sym, token);
}

/* -------------------------- REPLACE -------------------------------------- */
/*									     */
static replace(sym, token)

PTTRNG  sym;		/* IN - Replacement symbol code	     */
PWSYMDF *token;		/* OUT - Constructed token	     */

{
	delsym(token);
	insym(sym, token);
}

/* -------------------------- DELETE --------------------------------------- */
/*									     */
static delete(token)

PWSYMDF  *token;	/* OUT - New token	     */

{
	readsymb(token);
	delsym(token);
}

/* ------------------------ SINGLE ----------------------------------------- */
/*									     */
static single(leg_sys, err_stk, err_stkp, err_tok, newstat)

PTTSET   leg_sys;	/* IN  - Legal symbols in current state */
PARSTKDF err_stk;	/* IN/OUT - Current parser stack	*/
short	 *err_stkp;	/* IN/OUT - Current stack pointer	*/
PWSYMDF  *err_tok;	/* IN/OUT - Current token		*/
PTSTARNG *newstat;	/* OUT - Recovery state			*/
  
{
	short	choice;   /* Recovery action performed */
	short	cost;	  /* Best cost so far	       */
	PTTRNG  sym;	  /* Insert symbol	       */

	choice = NONE_REC;  cost = INF_COST;
	read_la(err_tok);

	try_in(leg_sys, err_stk, *err_stkp, &sym, &cost, &choice);
	try_rep(leg_sys, err_stk, *err_stkp, &sym, &cost, &choice);
	try_del(err_stk, *err_stkp, &cost, &choice);

	if (cost > THRESH)
	     choice = NONE_REC;

	 switch (choice) {

	    case IN_REC:
		   insert(sym, err_tok);
		   break;
	    case DEL_REC:  
		   delete(err_tok);
		   break;
	    case REP_REC: 
		   replace(sym, err_tok);
		   break;
	    default:
		   readsymb(err_tok);
	 }

	 *newstat = err_stk[*err_stkp];
}
%%ENDIF
%%ENDIF

/* -------------------------- RECOVER -------------------------------------- */
/*									     */
static  recover(err_stk, err_stkp, err_symb, rec_stat)

PARSTKDF   err_stk;	/* IN/OUT - Updated parse stack	     */
short	   *err_stkp;	/* IN/OUT - Updated stack pointer    */
PWSYMDF    *err_symb;	/* IN/OUT - Current token	     */
PTSTARNG   *rec_stat;	/* OUT  - State after recovery       */

{
   PTTSET legal_sy;		/* Legal symbols     */

#ifdef MOVMEM
   movmem(err_symb, &errdescr.err_tok, sizeof(PWSYMDF));
#else
   errdescr.err_tok = *err_symb;
#endif
   errdescr.err_tok.code = pavoctbl[errdescr.err_tok.code-PATMN].scc;
   errdescr.method = NONE_REC;
   errdescr.class = SYN_ERR;
   errdescr.severity = ERR_SEV;
%%IF( recovery(single) OR recovery(panic) OR recovery(global))
   glegsym(err_stk, *err_stkp, legal_sy);
%%IF( recovery(single))
   single(legal_sy, err_stk, err_stkp, err_symb, rec_stat);
   if (errdescr.method == NONE_REC) {
%%ENDIF
%%IF( recovery(global))
	global(err_stk, err_stkp, err_symb, rec_stat);
	pwmess(&errdescr.err_tok, errdescr.method, errdescr.class, 
		errdescr.severity); 
%%ENDIF
%%IF( recovery (panic) AND NOT recovery(global))
	panic(legal_sy, err_stk, err_stkp, err_symb, rec_stat);
	pwmess(&errdescr.err_tok, errdescr.method, errdescr.class,
		errdescr.severity); 
%%ENDIF
%%IF( NOT recovery(panic) AND NOT recovery(global) AND NOT recovery(halt))
	delete(err_symb);
	pwmess(&errdescr.err_tok,  DEL_REC, SYN_ERR, ERR_SEV);
%%ENDIF
%%IF( recovery(single))
   } else
	pwmess(&errdescr.err_tok, errdescr.method, SYN_ERR, errdescr.severity);
%%ENDIF
#ifdef MOVMEM
   movmem(err_symb, &errdescr.res_tok, sizeof(PWSYMDF));
#else
   errdescr.res_tok = *err_symb;
#endif
   errdescr.res_tok.code = pavoctbl[errdescr.res_tok.code-PATMN].scc;
   pwrpoi(&errdescr.res_tok);
%%ENDIF
%%IF( recovery(halt))
%%IF( recovery(single) OR recovery(panic) OR recovery(global))
   if (errdescr.method == NONE_REC)
%%ENDIF
       paabort(&errdescr.err_tok, SYN_ERR, FAT_SEV);
%%ENDIF
}


/* -------------------------- PWPARS --------------------------------------- */
/*									     */
/* PWPARS  - Parser routine. Entry point				     */
/* ------------------------------------------------------------------------- */
pwpars( ) 

{ 
   parsinit();
   readsymb(&token);
   pushstat(PWTRUE);

   if (setjmp(&pwjmpb)) return;

   while (!endparse) {

      act_tbl(currstat, token.code, &action, &arg);

	switch (action) {

	case ERROR:
		recover(parsstk, &pwstkp, &token, &currstat);
		if (pwstkp == 0) 
		     endparse = PWTRUE;
		break;

	case SHIFT:
		currstat = arg;
		pushstat(PWTRUE);
		readsymb(&token);
		break;

	case SHFT_RED:
		pushstat(PWTRUE);
		readsymb(&token);

 	case REDUCE:

		do {
		     pwstkp = pwstkp - pantstbl.rhsz[arg-PAPRDMN];	
%%IF( semantic(on))
		     pwsema(arg);
%%ENDIF
		     goto_tbl(parsstk[pwstkp], pantstbl.lhs[arg-PAPRDMN],
			      &action, &arg);
		     pushstat(PWFALSE);
		} while (action != SHIFT);

		currstat = arg;
		parsstk[pwstkp] = currstat;
		break;

	case ACCEPT:
		endparse = PWTRUE;
		break;
	} 
   } 

} 
