%%OPTIONS
--        Trace;
	List Grammar;
	Stacklimit 128;
	No Errorhandler;

%%IMPORT
/* .pmk-import */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ast.h"
#include "impScan.h"
#include "impList.h"
extern impScContext impcontext;
%%END

%%SCANNER impScan(impcontext, token);

%%EXPORT

/* .pmk-export */
#include "ast.h"

%%END
%%DECLARATIONS

/* .pmk-declarations */
Ast tmpAst;
int seqNumber;
%%END

%%ATTRIBUTES

srcp %% TmSrcp %1      /* Source position                */%%,
ast  %% Ast %1         /* An abstract syntax tree        */%%,
seq  %% Ast %1         /* Sequence of nodes              */%%,
last %% Ast %1         /* Pointer to last node in a list */%%;
%%END

%%RULES

goal
  = statements
%% 
  impAstRoot = %statements.ast; 
%%
  ;

--== S T A T E M E N T S  ======================================================
statements
  = statements_opt
%%
  if (%statements_opt.seq) {
    if (%statements_opt.ast) {
      %statements.ast = impAstNode(nulSrcp, nulSrcp, nulSrcp, AST_SEQ, 0, 
				   %statements_opt.ast, NULL, NULL, NULL, NULL);
      %statements.ast->next = %statements_opt.seq;
    } else {
      %statements.ast = %statements_opt.seq;
    }
  } else
    %statements.ast = %statements_opt.ast;
%%
  ;

statements_opt
  = statements_opt statement	
%% 
  seqNumber++;
  %statement.ast->next = %2statements_opt.ast; 
  %1statements_opt.ast = %statement.ast; 
  if (seqNumber > 5000) {
    tmpAst = impAstNode(nulSrcp, nulSrcp, nulSrcp, AST_SEQ, 0, 
			%statements_opt.ast, NULL, NULL, NULL, NULL);
    tmpAst->next = %statements_opt.seq;
    %statements_opt.seq = tmpAst;
    %statements_opt.ast = NULL;
    seqNumber = 0;
    %statements_opt.srcp = nulSrcp;
  }
%%
  !
%% 
  seqNumber = 0;
  %statements_opt.ast=NULL; 
  %statements_opt.seq = NULL;
  %statements_opt.srcp = nulSrcp;
%%
  ;

statement
  = TEXT			
%% 
  %statement.ast = impAstNode(%TEXT.srcp, nulSrcp, nulSrcp, AST_TEXT,%TEXT.end-%TEXT.begin+1, 
                              %TEXT.text, NULL, NULL, NULL, NULL);
  %statement.srcp = %TEXT.srcp;
%%
  ! keep_statement		%% /* transfer all attributes */ %%
  ! set_statement		%% /* transfer all attributes */ %%
  ! eset_statement		%% /* transfer all attributes */ %%
  ! insert_statement		%% /* transfer all attributes */ %%
  ! if_statement		%% /* transfer all attributes */ %%
  ! loop_statement		%% /* transfer all attributes */ %%
  ! message_statement		%% /* transfer all attributes */ %%
  ! region_statement		%% /* transfer all attributes */ %%
  ! include_statement		%% /* transfer all attributes */ %%
  ! einclude_statement		%% /* transfer all attributes */ %%
  ! process_statement		%% /* transfer all attributes */ %%
  ! exit_statement		%% /* transfer all attributes */ %%
  ;

--- KEEP_STATEMENT

keep_statement
  = '%%KEEP'			
%% 
  %keep_statement.ast = impAstNode(%'%%KEEP'.srcp, nulSrcp, nulSrcp, AST_KEEP,
                                   %'%%KEEP'.end-%'%%KEEP'.begin+1, %'%%KEEP'.text, 
				   NULL, NULL, NULL, NULL);
  %keep_statement.srcp = %'%%KEEP'.srcp;
%%
  ;

--- SET_STATEMENT

set_statement
  = '%%SET' ident '(' values_opt ')'
%% 
  %set_statement.ast = impAstNode(%'%%SET'.srcp, nulSrcp, nulSrcp, 
				  AST_ASSIGN, 0, %ident.ast, %values_opt.ast, NULL, NULL, NULL); 
  free(%')'.text);
  %set_statement.srcp = %'%%SET'.srcp;
%%
  ! '%%SET' ident '(' ',' values_opt ')'
%% 
  %set_statement.ast = impAstNode(%'%%SET'.srcp, nulSrcp, nulSrcp, 
				  AST_APPEND, 0, %ident.ast, %values_opt.ast, NULL, NULL, NULL);
  free(%')'.text);
  %set_statement.srcp = %'%%SET'.srcp;
%%
  ;

--- ESET_STATEMENT

eset_statement
  = '%%ESET' ident '(' eval_expressions_opt ')'
%% 
  %eset_statement.ast = impAstNode(%'%%ESET'.srcp, nulSrcp, nulSrcp, 
				   AST_ASSIGN, 0, %ident.ast, 
				   %eval_expressions_opt.ast, NULL, NULL, NULL); 
  free(%')'.text);
  %eset_statement.srcp = %'%%ESET'.srcp;
%%
  ! '%%ESET' ident '(' ',' eval_expressions_opt ')'
%% 
  %eset_statement.ast = impAstNode(%'%%ESET'.srcp, nulSrcp, nulSrcp, 
				   AST_APPEND, 0, %ident.ast,
				   %eval_expressions_opt.ast, NULL, NULL, NULL); 
  free(%')'.text);
  %eset_statement.srcp = %'%%ESET'.srcp;
%%
  ;

--- INSERT_STATEMENT

insert_statement
  = '%%(' expression ')'	
%% 
  %insert_statement.ast=impAstNode(%'%%('.srcp, nulSrcp, nulSrcp, 
				   AST_EVAL, 0, %expression.ast,  %')'.text, NULL, NULL, NULL); 
  %insert_statement.srcp = %'%%('.srcp;
%%
  ;

--- IF_STATEMENT

if_statement
  = '%%IF' '(' condition ')' statements else_list '%%ENDIF'
%% 
  %if_statement.ast = impAstNode(%'%%IF'.srcp, %'%%ENDIF'.srcp, %else_list.srcp, 
				 AST_IF, 0, %condition.ast, %statements.ast, 
				 %else_list.ast, NULL, NULL); 
  free(%')'.text);
  %if_statement.srcp = %'%%IF'.srcp;
%%
  ;

else_list = elsif_list else_part
%%
  %elsif_list.last->item.ast_elsif.else_clause = %else_part.ast;
  %else_list.ast = %elsif_list.ast;
  %else_list.srcp = %elsif_list.srcp;
%%
	  ! else_part
%%
  %else_list.ast = %else_part.ast;
  %else_list.srcp = %else_part.srcp;
%%
          ;

elsif_list = '%%ELSIF' '(' condition ')' statements 
%%
  %elsif_list.last =
  %elsif_list.ast = impAstNode(%'%%ELSIF'.srcp, nulSrcp, %'%%ELSIF'.srcp, 
			       AST_ELSIF, 0, %condition.ast, %statements.ast, 
			       NULL, NULL, NULL); 
  free(%')'.text);
  %elsif_list.srcp = %'%%ELSIF'.srcp;
%%
           ! elsif_list '%%ELSIF' '(' condition ')' statements 
%% 
  tmpAst = impAstNode(%'%%ELSIF'.srcp, nulSrcp, %'%%ELSIF'.srcp, 
		      AST_ELSIF, 0, %condition.ast, %statements.ast, 
		      NULL, NULL, NULL); 
  %2elsif_list.last->item.ast_elsif.else_clause = tmpAst;
  %1elsif_list.last = tmpAst;
  %1elsif_list.ast = %2elsif_list.ast;

  free(%')'.text);
  %1elsif_list.srcp = %'%%ELSIF'.srcp;
%%
           ;

else_part = '%%ELSE' statements
%% 
  %else_part.ast = %statements.ast; 
  %1else_part.srcp = %'%%ELSE'.srcp;
%%
  !
%% 
  %else_part.ast = NULL; 
  %1else_part.srcp = nulSrcp;
%%
  ;

--- LOOP_STATEMENT

loop_statement
  = '%%LOOP' '(' ident '<=' expression ')' statements '%%ENDLOOP' '(' ident ')'
%% 
  %loop_statement.ast = impAstNode(%'%%LOOP'.srcp, %'%%ENDLOOP'.srcp, nulSrcp, 
				   AST_LOOP1, 0, %1ident.ast, 
                                impAstNode(%expression.srcp, nulSrcp, nulSrcp, 
					   AST_EVAL, 0, %expression.ast, NULL, NULL, NULL, NULL),
                                %statements.ast, %2ident.ast, NULL);
  free(%1')'.text);
  free(%2')'.text);
  %loop_statement.srcp = %'%%LOOP'.srcp;
%%
  ! '%%LOOP' '(' ident ',' variable ')' statements '%%ENDLOOP' '(' ident ')'
%% 
  %loop_statement.ast = impAstNode(%'%%LOOP'.srcp, %'%%ENDLOOP'.srcp, nulSrcp, 
				   AST_LOOP2, 0, %1ident.ast, 
				   %variable.ast, %statements.ast, %2ident.ast, NULL);
  free(%1')'.text);
  free(%2')'.text);
  %loop_statement.srcp = %'%%LOOP'.srcp;
%%
  ;

--- MESSAGE_STATEMENT
message_statement
  = '%%MESSAGE' '(' expression ')'	
%% 
  %message_statement.ast = impAstNode(%'%%MESSAGE'.srcp, nulSrcp, nulSrcp, 
				      AST_MESSAGE, 0, %expression.ast, NULL, NULL, NULL, NULL); 
  free(%')'.text);
  %message_statement.srcp = %'%%MESSAGE'.srcp;
%%
  ;

--- REGION_STATEMENT

-- Note! parameters and locals must be treated in the AST!

region_statement
  = '%%BEGIN' '(' ident parameters_opt locals_opt ')' statements '%%END' '(' ident ')'
%% 
  %region_statement.ast = impAstNode(%'%%BEGIN'.srcp, %'%%END'.srcp, nulSrcp, 
				     AST_REGION, 0, %1ident.ast, %parameters_opt.ast,
                                  %locals_opt.ast, %statements.ast, %2ident.ast); 
  free(%1')'.text);
  free(%2')'.text);
  %region_statement.srcp = %'%%BEGIN'.srcp;
%%
  ;

parameters_opt
  = '(' idents ')'
%%
  %parameters_opt.ast = %idents.ast;
  free(%')'.text);
  %parameters_opt.srcp = %'('.srcp;
%%
  !
%%
  %parameters_opt.ast = NULL;
  %parameters_opt.srcp = nulSrcp;
%%
  ;

locals_opt
  = ',' idents
%%
  %locals_opt.ast = %idents.ast;
  %locals_opt.srcp = %','.srcp;
%%
  !
%%
  %locals_opt.ast = NULL;
  %locals_opt.srcp = nulSrcp;
%%
  ;

--- INCLUDE_STATEMENT

include_statement
  = '%%INCLUDE' '(' ident ')'
%% 
  %include_statement.ast = impAstNode(%'%%INCLUDE'.srcp, nulSrcp, nulSrcp, 
				      AST_INCLUDE, 0, %ident.ast, NULL, %')'.text, NULL, NULL); 
  %include_statement.srcp = %'%%INCLUDE'.srcp;
%%
  ! '%%INCLUDE' '(' ident '(' values_opt ')' ')'
%% 
  %include_statement.ast = impAstNode(%'%%INCLUDE'.srcp, nulSrcp, nulSrcp, AST_INCLUDE, 0, %ident.ast, 
                                   impAstNode(%values_opt.srcp, nulSrcp, nulSrcp, 
					      AST_PARAMS, 0, %values_opt.ast, NULL, NULL, NULL, NULL),
                                    %2')'.text, NULL, NULL);
  free(%1')'.text);
  %include_statement.srcp = %'%%INCLUDE'.srcp;
%%
  ! '%%INCLUDE' '(' quoted_string ')'
%% 
  %include_statement.ast = impAstNode(%'%%INCLUDE'.srcp, nulSrcp, nulSrcp, 
				      AST_PROCESS, 0, %quoted_string.ast, NULL, FALSE, %')'.text, NULL); 
  %include_statement.srcp = %'%%INCLUDE'.srcp;
%%
  ! '%%INCLUDE' '(' ')'
%% 
  %include_statement.ast = impAstNode(%'%%INCLUDE'.srcp, nulSrcp, nulSrcp, 
				      AST_PROCESS, 0, NULL, NULL, FALSE, %')'.text, NULL); 
  %include_statement.srcp = %'%%INCLUDE'.srcp;
%%
  ;

--- EINCLUDE_STATEMENT

einclude_statement
  = '%%EINCLUDE' '(' ident ')'
%% 
  %einclude_statement.ast = impAstNode(%'%%EINCLUDE'.srcp, nulSrcp, nulSrcp, 
				       AST_INCLUDE, 0, %ident.ast, NULL, %')'.text, NULL, NULL); 
  %einclude_statement.srcp = %'%%EINCLUDE'.srcp;
%%
  ! '%%EINCLUDE' '(' ident '(' eval_expressions_opt ')' ')'
%% 
  %einclude_statement.ast = impAstNode(%'%%EINCLUDE'.srcp, nulSrcp, nulSrcp, 
				       AST_INCLUDE, 0, %ident.ast, 
				       impAstNode(%eval_expressions_opt.srcp, nulSrcp, nulSrcp, 
						  AST_PARAMS, 0, %eval_expressions_opt.ast, 
						  NULL, NULL, NULL, NULL), 
				       %2')'.text, NULL, NULL); 
  free(%1')'.text);
  %einclude_statement.srcp = %'%%EINCLUDE'.srcp;
%%
  ! '%%EINCLUDE' '(' quoted_string ')'
%% 
  %einclude_statement.ast = impAstNode(%'%%EINCLUDE'.srcp, nulSrcp, nulSrcp, AST_PROCESS, 0, 
				       %quoted_string.ast, NULL, FALSE, %')'.text, NULL); 
  %einclude_statement.srcp = %'%%EINCLUDE'.srcp;
%%
  ! '%%EINCLUDE' '(' ')'
%% 
  %einclude_statement.ast = impAstNode(%'%%EINCLUDE'.srcp, nulSrcp, nulSrcp, 
				       AST_PROCESS, 0, NULL, NULL, FALSE, %')'.text, NULL); 
  %einclude_statement.srcp = %'%%EINCLUDE'.srcp;
%%
  ;

--- PROCESS_STATEMENT

process_statement
  = '%%PROCESS' '(' file_name ',' file_name')'
%% 
  %process_statement.ast = impAstNode(%'%%PROCESS'.srcp, nulSrcp, nulSrcp, 
				      AST_PROCESS, 0, %1file_name.ast, 
				      %2file_name.ast, FALSE, %')'.text, NULL); 
  %process_statement.srcp = %'%%PROCESS'.srcp;
%%
  ! '%%PROCESS' '(' file_name')'
%% 
  %process_statement.ast = impAstNode(%'%%PROCESS'.srcp, nulSrcp, nulSrcp, 
				      AST_PROCESS, 0, %file_name.ast, NULL, TRUE, %')'.text, NULL); 
  %process_statement.srcp = %'%%PROCESS'.srcp;
%%
  ;
 
--- EXIT_STATEMENT

exit_statement
  = '%%EXIT' '(' expression ',' expression ')'
%%
  %exit_statement.ast = impAstNode(%'%%EXIT'.srcp, nulSrcp, nulSrcp,
				   AST_EXIT, 0, %1expression.ast, %2expression.ast, 
				   NULL, NULL, NULL);
  free(%')'.text);
  %exit_statement.srcp = %'%%EXIT'.srcp;
%%
  ;

--== E X P R E S S I O N   A N D   C O N D I T I O N  ==========================

-- CONDITION
condition
  = condition 'OR' and_condition	
%% 
  %1condition.ast = impAstNode(%'OR'.srcp, nulSrcp, nulSrcp, 
			       AST__OR, 0, %2condition.ast, %and_condition.ast, NULL, NULL, NULL); 
  %1condition.srcp = %'OR'.srcp;
%%
  ! and_condition			
%% 
  /* Transfer all attributes */ 
%%
  ;

and_condition
  = and_condition 'AND' not_condition	
%% 
  %1and_condition.ast = impAstNode(%'AND'.srcp, nulSrcp, nulSrcp, 
				   AST__AND, 0, %2and_condition.ast, %not_condition.ast, `
				   NULL, NULL, NULL); 
  %1and_condition.srcp = %'AND'.srcp;
%%
  ! not_condition			
%% 
  /* Transfer all attributes */ 
%%
  ;

not_condition
  = 'NOT' boolean_expression		
%% 
  %not_condition.ast = impAstNode(%'NOT'.srcp, nulSrcp, nulSrcp, AST__NOT, 0, 
				  %boolean_expression.ast, NULL, NULL, NULL, NULL); 
  %not_condition.srcp = %'NOT'.srcp;
%%
  ! boolean_expression			
%% 
  /* Transfer all attributes */ 
%%
  ;

boolean_expression
  = system_call
%% 
  %boolean_expression.ast = %system_call.ast; 
  %boolean_expression.srcp = %system_call.srcp;
%%
  ! stringmatch
%%
  %boolean_expression.ast = %stringmatch.ast; 
  %boolean_expression.srcp = %stringmatch.srcp;
%%
  ! expression '=' expression		
%% 
  %boolean_expression.ast = impAstNode(%'='.srcp, nulSrcp, nulSrcp, 
				       AST__EQ, 0, %1expression.ast, %2expression.ast, 
				       NULL, NULL, NULL); 
  %boolean_expression.srcp = %'='.srcp;
%%
  ! expression '#' expression		
%% 
  %boolean_expression.ast = impAstNode(%'#'.srcp, nulSrcp, nulSrcp, 
				       AST__NEQ, 0, %1expression.ast, %2expression.ast, 
				       NULL, NULL, NULL); 
  %boolean_expression.srcp = %'#'.srcp;
%%
  ! expression '>' expression		
%% 
  %boolean_expression.ast = impAstNode(%'>'.srcp, nulSrcp, nulSrcp, 
				       AST__GT, 0, %1expression.ast, %2expression.ast, 
				       NULL, NULL, NULL); 
  %boolean_expression.srcp = %'>'.srcp;
%%
  ! expression '<' expression		
%% 
  %boolean_expression.ast = impAstNode(%'<'.srcp, nulSrcp, nulSrcp, 
				       AST__LT, 0, %1expression.ast, %2expression.ast, 
				       NULL, NULL, NULL); 
  %boolean_expression.srcp = %'<'.srcp;
%%
  ! expression '>=' expression 		
%% 
  %boolean_expression.ast = impAstNode(%'>='.srcp, nulSrcp, nulSrcp, 
				       AST__GE, 0, %1expression.ast, %2expression.ast, 
				       NULL, NULL, NULL); 
  %boolean_expression.srcp = %'>='.srcp;
%%
  ! expression '<=' expression		
%% 
  %boolean_expression.ast = impAstNode(%'<='.srcp, nulSrcp, nulSrcp, 
				       AST__LE, 0, %1expression.ast, %2expression.ast, 
				       NULL, NULL, NULL); 
  %boolean_expression.srcp = %'<='.srcp;
%%
  ! variable '(' '?R' ')'		
%% 
  if (%variable.ast->type == AST_INTEGER) {
    char errStr[19];
    strcat(errStr, "INTEGER**IDENTIFIER");
    errStr[7] = (char)0xff;
    impLog(&%variable.ast->srcp, 103, sevERR, errStr);
  }
  %boolean_expression.ast = impAstNode(%'?R'.srcp, nulSrcp, nulSrcp, AST__RDEFINED, 0, 
				       %variable.ast, NULL, NULL, NULL, NULL); 
  free(%')'.text);
  %boolean_expression.srcp = %'?R'.srcp;
%%
  ! variable '(' '?V' ')'		
%% 
  if (%variable.ast->type == AST_INTEGER) {
    char errStr[19];
    strcat(errStr, "INTEGER**IDENTIFIER");
    errStr[7] = (char)0xff;
    impLog(&%variable.ast->srcp, 103, sevERR, errStr);
  }
  %boolean_expression.ast = impAstNode(%'?V'.srcp, nulSrcp, nulSrcp, AST__DEFINED, 0, 
				       %variable.ast, NULL, NULL, NULL, NULL); 
  free(%')'.text);
  %boolean_expression.srcp = %'?V'.srcp;
%%
  ! variable '(' '?' ')'		
%% 
  if (%variable.ast->type == AST_INTEGER) {
    char errStr[19];
    strcat(errStr, "INTEGER**IDENTIFIER");
    errStr[7] = (char)0xff;
    impLog(&%variable.ast->srcp, 103, sevERR, errStr);
  }
  %boolean_expression.ast = impAstNode(%'?'.srcp, nulSrcp, nulSrcp, AST__DEFINED, 0, 
				       %variable.ast, NULL, NULL, NULL, NULL); 
  free(%')'.text);
  %boolean_expression.srcp = %'?'.srcp;
%%
  ! variable '(' '*' ')'		
%% 
  if (%variable.ast->type == AST_INTEGER) {
    char errStr[19];
    strcat(errStr, "INTEGER*IDENTIFIER");
    errStr[7] = (char)0xff;
    impLog(&%variable.ast->srcp, 103, sevERR, errStr);
  }
  %boolean_expression.ast = impAstNode(%'*'.srcp, nulSrcp, nulSrcp, AST__NONEMPTY, 0, 
				       %variable.ast, NULL, NULL, NULL, NULL); 
  free(%')'.text);
  %boolean_expression.srcp = %'*'.srcp;
%%
  ! variable '(' values_opt ')'	
%% 
  if (%variable.ast->type == AST_INTEGER) {
    char errStr[19];
    strcat(errStr, "INTEGER**IDENTIFIER");
    errStr[7] = (char)0xff;
    impLog(&%variable.ast->srcp, 103, sevERR, errStr);
  }
  %boolean_expression.ast = impAstNode(%variable.srcp, nulSrcp, nulSrcp, 
				       AST__IN, 0, %variable.ast, %values_opt.ast, 
				       NULL, NULL, NULL); 
  free(%')'.text);
  %boolean_expression.srcp = %values_opt.srcp;
%%
--  ! value_list '(' values_opt ')'
--%% 
--  %boolean_expression.ast = impAstNode(%value_list.srcp, nulSrcp, nulSrcp, 
--					 AST__IN, 0, %value_list.ast, %values_opt.ast, 
--					 NULL, NULL, NULL); 
--  free(%')'.text);
--  %boolean_expression.srcp = %value_list.srcp;
--%%
  ! '(' condition ')'			
%% 
  %boolean_expression.ast = %condition.ast; 
  free(%')'.text);
  %boolean_expression.srcp = %condition.srcp;
%%
  ;

system_call
  = 'IMP$SYSTEM' '(' ident ',' ident ')'
%%
  %system_call.ast = impAstNode(%'IMP$SYSTEM'.srcp, nulSrcp, nulSrcp, 
				AST__SYSTEM, 0, %1ident.ast, %2ident.ast, 
				NULL, NULL, NULL);
  free(%')'.text);
  %system_call.srcp = %'IMP$SYSTEM'.srcp;
%%
  ! 'IMP$SYSTEM' '(' quoted_string ',' ident ')'
%%
  %system_call.ast = impAstNode(%'IMP$SYSTEM'.srcp, nulSrcp, nulSrcp, 
				AST__SYSTEM, 0, %quoted_string.ast, %ident.ast, 
				NULL, NULL, NULL);
  free(%')'.text);
  %system_call.srcp = %'IMP$SYSTEM'.srcp;
%%
  ;

stringmatch
  = 'IMP$STRSEARCH' '(' ident ',' ident ',' ident ')'
%%
  %stringmatch.ast = impAstNode(%'IMP$STRSEARCH'.srcp,nulSrcp, nulSrcp,
				AST__STRINGMATCH, 0, %1ident.ast, %2ident.ast, %3ident.ast, NULL, NULL);
  %stringmatch.srcp = %'IMP$STRSEARCH'.srcp;
%%
  ! 'IMP$STRSEARCH' '(' quoted_string ',' quoted_string ',' ident ')'
%%
  %stringmatch.ast = impAstNode(%'IMP$STRSEARCH'.srcp,nulSrcp, nulSrcp,
				AST__STRINGMATCH, 0, %1quoted_string.ast, %2quoted_string.ast, %ident.ast, NULL, NULL);
  %stringmatch.srcp = %'IMP$STRSEARCH'.srcp;
%%
  ! 'IMP$STRSEARCH' '(' ident ',' quoted_string ',' ident ')'
%%
  %stringmatch.ast = impAstNode(%'IMP$STRSEARCH'.srcp,nulSrcp, nulSrcp,
				AST__STRINGMATCH, 0, %1ident.ast, %quoted_string.ast, %2ident.ast, NULL, NULL);
  %stringmatch.srcp = %'IMP$STRSEARCH'.srcp;
%%
  ! 'IMP$STRSEARCH' '(' quoted_string ',' ident ',' ident ')'
%%
  %stringmatch.ast = impAstNode(%'IMP$STRSEARCH'.srcp,nulSrcp, nulSrcp,
				AST__STRINGMATCH, 0, %quoted_string.ast, %1ident.ast, %2ident.ast, NULL, NULL);
  %stringmatch.srcp = %'IMP$STRSEARCH'.srcp;
%%
  ;
 

-- EXPRESSION
eval_expressions_opt
  = eval_expressions				
%% 
  /* Transfer all attributes */ 
%%
  !   					
%% 
  %eval_expressions_opt.ast = NULL; 
  %eval_expressions_opt.srcp = nulSrcp;
%%
  ;

eval_expressions
  = eval_expressions ',' expression		
%% 
  %expression.ast = impAstNode(%expression.srcp, nulSrcp, nulSrcp, AST_EVAL, 0, 
			       %expression.ast, NULL, NULL, NULL, NULL);
  %expression.ast->next = %2eval_expressions.ast; 
  %1eval_expressions.ast = %expression.ast; 
  %1eval_expressions.srcp = %2eval_expressions.srcp;
%%
  ! expression				
%% 
  %eval_expressions.ast = impAstNode(%expression.srcp, nulSrcp, nulSrcp, 
				     AST_EVAL, 0, %expression.ast, NULL, NULL, NULL, NULL);
%%
  ;

expression
  = expression '+' term			
%% 
  %1expression.ast = impAstNode(%'+'.srcp, nulSrcp, nulSrcp, 
				AST__PLUS, 0, %2expression.ast, %term.ast, NULL, NULL, NULL); 
  %1expression.srcp = %'+'.srcp;
%%
  ! expression '-' term			
%% 
  %1expression.ast = impAstNode(%'-'.srcp, nulSrcp, nulSrcp, 
				AST__MINUS, 0, %2expression.ast, %term.ast, 
				NULL, NULL, NULL); 
  %1expression.srcp = %'-'.srcp;
%%
  ! term				
%%
  /* Transfer all attributes */ 
%%
  ! expression 'BITAND' term
%%
  %1expression.ast = impAstNode(%'BITAND'.srcp, nulSrcp, nulSrcp, 
				AST__BITAND, 0, %2expression.ast, 
				%term.ast, NULL, NULL, NULL);
  %1expression.srcp = %'BITAND'.srcp;
%%
  ! expression 'BITOR' term
%%
  %1expression.ast = impAstNode(%'BITOR'.srcp, nulSrcp, nulSrcp, 
				AST__BITOR, 0, %2expression.ast, 
				%term.ast, NULL, NULL, NULL);
  %1expression.srcp = %'BITOR'.srcp;
%%
  ;

term
  = term '*' factor			
%% 
  %1term.ast = impAstNode(%'*'.srcp, nulSrcp, nulSrcp, AST__TIMES, 0,
			  %2term.ast, %factor.ast, NULL, NULL, NULL); 
  %1term.srcp = %'*'.srcp;
%%
  ! term '/' factor			
%% 
  %1term.ast = impAstNode(%'/'.srcp, nulSrcp, nulSrcp, AST__DIVID, 0,
			  %2term.ast, %factor.ast, NULL, NULL, NULL); 
  %1term.srcp = %'/'.srcp;
%%
  ! term 'MOD' factor			
%% 
  %1term.ast = impAstNode(%'MOD'.srcp, nulSrcp, nulSrcp, AST__MOD, 0,
			  %2term.ast, %factor.ast, NULL, NULL, NULL); 
  %1term.srcp = %'MOD'.srcp;
%%
  ! factor				
%% 
  /* Transfer all attributes */ 
%%
  ;

factor
  = operand				
%% 
  /* Transfer all attributes */
%%
  ! '-' factor				
%% 
  %1factor.ast = impAstNode(%'-'.srcp, nulSrcp, nulSrcp, AST__NEG, 0, 
			    %2factor.ast, NULL, NULL, NULL, NULL); 
  %1factor.srcp = %'-'.srcp;
%%
  ;

operand
  = quoted_string				
%% 
  /* Transfer all attributes */
%%
  ! variable
%% 
  /* Transfer all attributes */
%%
  ! '(' expression ')'
%%
  %operand.ast = %expression.ast;
  free(%')'.text); 
  %operand.srcp = %'('.srcp;
%%
  ! 'IMP$STRLEN' '(' expression ')'
%%
  %operand.ast = impAstNode(%'IMP$STRLEN'.srcp, nulSrcp, nulSrcp, 
			    AST__STRLEN,0, %expression.ast, NULL, NULL, 
			    NULL, NULL);
  %operand.srcp = %'IMP$STRLEN'.srcp;
%%
  ;

--==  C O M M O N   E L E M E N T S  ===========================================

-- VARIABLE
variable
  = ident index_opt
%%
  if (%index_opt.ast || %ident.ast->type != AST_INTEGER)
    %variable.ast = impAstNode(%ident.srcp, nulSrcp, nulSrcp, AST_GET, 0, 
			       %ident.ast, %index_opt.ast, NULL, NULL, NULL);
  /* else */
    /* Transfer all attributes */
%%
  ! value_list index_opt
%%
  %variable.ast = impAstNode(%value_list.srcp, nulSrcp, nulSrcp, 
			     AST_GET, 0, %value_list.ast, %index_opt.ast, NULL, NULL, NULL);
%%
  ;

index_opt
  = '[' expression ']'			
%% 
  %index_opt.ast = %expression.ast; 
  %index_opt.srcp = %expression.srcp;
%%
  !   					
%% 
  %index_opt.ast=NULL; 
  %index_opt.srcp = nulSrcp;
%%
  ;

-- IDENT
idents
  = idents ',' ident		
%% 
  %ident.ast->next = %2idents.ast; 
  %1idents.ast = %ident.ast; 
  %1idents.srcp = %2idents.srcp;
%%
  ! ident				
%% 
  /* Transfer all attributes */ 
%%
  ;

ident
  = unquoted_string
%%
  if (%unquoted_string.ast->type != AST_INTEGER)
    %ident.ast = impAstNode(%unquoted_string.srcp, nulSrcp, nulSrcp, 
			    AST_IDENT, 0, %unquoted_string.ast, NULL, NULL, NULL, NULL);
  /* else */
    /* Transfer all attributes */  
%%
  ! INTEGER
%%
  %ident.ast=impAstNode(%INTEGER.srcp, nulSrcp, nulSrcp, AST_INTEGER,
    			       %INTEGER.end-%INTEGER.begin+1,
				       %INTEGER.text, NULL, NULL, NULL, NULL); 
  %ident.srcp = %INTEGER.srcp;
%%
  ;

unquoted_string
  = unquoted_string unquoted_string_item		
%% 
  %1unquoted_string.ast = impAstNode(%2unquoted_string.srcp, nulSrcp, nulSrcp, AST__CONCAT, 0,
				     %2unquoted_string.ast,%unquoted_string_item.ast, 
				     NULL, NULL, NULL); 
  %1unquoted_string.srcp = %2unquoted_string.srcp;
%%
  ! unquoted_string_item			
%% 
  /* Transfer all attributes */ 
%%
  ;

unquoted_string_item
  = UNQUOT_STRING				
%% 
  %unquoted_string_item.ast=impAstNode(%UNQUOT_STRING.srcp, nulSrcp, nulSrcp, AST_UNQUOTED_STRING,
				       %UNQUOT_STRING.end-%UNQUOT_STRING.begin+1,
				       %UNQUOT_STRING.text, NULL, NULL, NULL, NULL);
  %unquoted_string_item.srcp = %UNQUOT_STRING.srcp;
%%
  ! insert_statement
%% 
  /* Transfer all attributes */
%%
  ;

-- VALUE LIST

value_list 
  = '{' values_opt '}'
%%
  %value_list.ast = impAstNode(%'{'.srcp, nulSrcp, nulSrcp, AST_VALUE_LIST, 0, 
			       %values_opt.ast, NULL, NULL, NULL, NULL);
  %value_list.srcp = %'{'.srcp;
%%
 ;

values_opt
  = values				
%% 
  /* Transfer all attributes */
%%
  !					
%% 
  %values_opt.ast=NULL; 
  %values_opt.srcp = nulSrcp;
%%
  ;

values
  = value				
%% 
  /* Transfer all attributes */ 
%%
  ! values ',' value		
%% 
  %value.ast->next = %2values.ast; 
  %1values.ast = %value.ast; 
  %1values.srcp = %2values.srcp;
%%
  ;

value
  = literal
%%

%%
  ! unquoted_string
%%
    
%%
  ;

-- LITERAL
literal
  = quoted_string				
%% 
  /* Transfer all attributes */ 
%%
-- An unquoted_string containing only INTEGER is interpreted as an INTEGER in
-- the unquoted_string --> value rule above. Therefore we cannot have the rule
-- INTEGER --> literal here
--  ! INTEGER				
--%% 
--  %literal.ast=impAstNode(%INTEGER.srcp, nulSrcp, nulSrcp, AST_INTEGER,
--			    %INTEGER.end-%INTEGER.begin+1, 
--			    %INTEGER.text, NULL, NULL, NULL, NULL); 
--%%
  ! value_list
%%
  /* Transfer all attributes */ 
%%
   ! INTEGER
%%
  %literal.ast=impAstNode(%INTEGER.srcp, nulSrcp, nulSrcp, AST_INTEGER,
				       %INTEGER.end-%INTEGER.begin+1,
				       %INTEGER.text, NULL, NULL, NULL, NULL); 
  %literal.srcp = %INTEGER.srcp;
%%
   ! '-' literal
%%
  %1literal.ast=impAstNode(%literal.srcp, nulSrcp, nulSrcp, AST_INTEGER,
				       0,
				       %2literal.ast, NULL, NULL, NULL, NULL);
  %1literal.ast=impAstNode(%'-'.srcp, nulSrcp, nulSrcp, AST__NEG,
				       0,
				       %2literal.ast, NULL, NULL, NULL, NULL);
  %1literal.srcp = %'-'.srcp;
%%
  ;

-- STRING

file_name
  = quoted_string
%%
  /* Transfer all elements */
%%
  ! unquoted_string
%%
  /* Transfer all elements */
%%
  !
%%
  %file_name.ast = NULL;
%%
  ;

quoted_string
  = QUOT_STRING quoted_string_tail
%%
{
  if(%quoted_string_tail.ast)
    %quoted_string.ast=impAstNode(%QUOT_STRING.srcp, nulSrcp, nulSrcp, AST__CONCAT, 0,
				  impAstNode(%QUOT_STRING.srcp, nulSrcp, nulSrcp, AST_STRING,
					     %QUOT_STRING.end-%QUOT_STRING.begin+1,
					     %QUOT_STRING.text, NULL, NULL, NULL, NULL),
				  %quoted_string_tail.ast, NULL, NULL, NULL);
  else
    %quoted_string.ast=impAstNode(%QUOT_STRING.srcp, nulSrcp, nulSrcp, AST_STRING,
				  %QUOT_STRING.end-%QUOT_STRING.begin+1, 
				  %QUOT_STRING.text, NULL, NULL, NULL, NULL);
  %quoted_string.srcp = %QUOT_STRING.srcp;
}
%%
  ;

quoted_string_tail
  = quoted_string_tail quoted_string_item
%%
{
  if(%2quoted_string_tail.ast) {
    %1quoted_string_tail.ast = impAstNode(%2quoted_string_tail.srcp, nulSrcp, nulSrcp, AST__CONCAT, 0,
					  %2quoted_string_tail.ast, %quoted_string_item.ast, 
					  NULL, NULL, NULL);
    %1quoted_string_tail.srcp = %2quoted_string_tail.srcp;
  } else {
    %1quoted_string_tail.ast = %quoted_string_item.ast;
    %1quoted_string_tail.srcp = %quoted_string_item.srcp;
  }
}
%%
  !   					
%%
  %quoted_string_tail.ast = NULL; 
  %quoted_string_tail.srcp = nulSrcp;
%%
  ;

quoted_string_item
  = QUOT_STRING				
%% 
  %quoted_string_item.ast = impAstNode(%QUOT_STRING.srcp, nulSrcp, nulSrcp, 
				       AST_STRING, %QUOT_STRING.end-%QUOT_STRING.begin+1,
                                       %QUOT_STRING.text, NULL, NULL, NULL, NULL); 
  %quoted_string_item.srcp = %QUOT_STRING.srcp;
%%
  ! insert_statement
%% 
  /* Transfer all attributes */
%%
  ;

