########## b59 ##########
set os = "$argv[1]"
if ("$os" == "PC") then
  dos2unix -ascii b59.tst.win32
else
  ../lmk -lib .. b59.lmk
  gcc -o b59 b59List.c b59.c
  b59 -list /unknown b59.c
endif
########## /bin/csh -f b59.tst UNIX ##########



        100 E : Message with one insert string: "%1"


1 error(s) detected.
No warnings issued.





b59.c

    1.  /* b59.c			Date: 1995-11-29/toolmake
    2.  
    3.     b59 -- main program
    4.  
    5.     1.0 - 1995-11-29/
    6.  */
    7.  
    8.  #include <stdio.h>
    9.  
   10.  #define PRIVATE static
   11.  #define PUBLIC
   12.  
   13.  
   14.  #include "b59List.h"
   15.  
   16.  
   17.  char *VERSION= "1.0";
   18.  char *NAME   = "b59";
   19.  char *USAGE= "Usage: b59 [-h] [-l <name>] <in> [<out>]";
   20.  
   21.  
   22.  
   23.  /* -- DATA -- */
   24.  
   25.  PRIVATE char 
   26.      *listFileName= NULL,
   27.      *inFileName= NULL,
   28.      *outFileName= NULL;
   29.  
   30.  
   31.  /* -- SUBROUTINES -- */
   32.  
   33.  /*----------------------------------------------------------------------
   34.  	perr()
   35.  
   36.  	A simple writer of error messages (onto stderr),
   37.  	If 'addendum' is NULL it will not be written.
   38.  */
   39.  PUBLIC void perr(
   40.      char sev,
   41.      char *desc,
   42.      char *add
   43.  )
   44.  {
   45.      if (add==NULL)
   46.  	fprintf(stderr, "%s: %c! %s\n", NAME, sev, desc);
   47.      else
   48.  	fprintf(stderr, "%s: %c! %s: %s\n", NAME, sev, desc, add);
   49.  
   50.      if (sev=='F' || sev=='S') exit(1);
   51.  }
   52.  


   53.  
   54.  /* -- Argument processing -- */
   55.  
   56.  PRIVATE void processArgs(
   57.      int argc,
   58.      char *argv[]
   59.  )
   60.  {				/* Go thru arguments, try to act on options */
   61.      int i; 
   62.   
   63.      for (i=1; i<argc; ++i) {
   64.          if (argv[i][0]=='-' && argv[i][1]) {
   65.              switch (argv[i][1]) {
   66.  	    case 'l':
   67.  		listFileName= argv[++i];
   68.  		break;
   69.  	    case 'h':
   70.  		printf("%s\n\n", USAGE);
   71.  		printf("Options:\n");
   72.  		printf("  -l <name>  Set list file name\n");
   73.  		exit(0);
   74.  	    default:
   75.  		perr('W', "unknown switch", argv[i]);
   76.  		break;
   77.  	    }
   78.  	}
   79.      	else if (inFileName==NULL) inFileName= argv[i];
   80.      	else if (outFileName==NULL) outFileName= argv[i];
   81.      	else perr('W', "unknown argument", argv[i]);
   82.      }
   83.  }
   84.  
   85.  
   86.  /* -- MAIN -- */
   87.  
   88.  PUBLIC main(
   89.      int argc,
   90.      char *argv[]
   91.  )
   92.  {
   93.      int stdIn;    
   94.  
   95.  #ifdef WIN32
   96.      freopen("stderr.txt", "w", stderr);
   97.  #endif
   98.  
   99.      processArgs(argc, argv);
  100.      printf("%s - %s\n\n", NAME, VERSION);
  101.  
  102.      if (inFileName == NULL)
  103.          perr('F', "No input file", NULL);
  104.  
  105.      stdIn= strcmp(inFileName,"-")==0;
  106.      if (stdIn)
  107.  	b59LiInit(VERSION, "standard input",  b59_ENGLISH_Messages);
  108.      else


  109.  	b59LiInit(VERSION, inFileName,  b59_ENGLISH_Messages);
  110.      /* .. try to open input file ... */
  111.      if (0) {			/* Failed! */
  112.          b59Log(NULL, 199, sevFAT, inFileName);
  113.  	b59List("", 0, 78, liTINY, sevALL);
  114.      } else {
  115.      	/* ... Parsing should be performed here ... */
  116.          b59Log(NULL, 100, sevERR, NULL);
  117.          if (stdIn) {		/* This gives an idea of own processing of
  118.  				   error messages */
  119.  	    int i;
  120.  	    char err[1024];
  121.  	    TmSrcp srcp;
  122.  
  123.  	    /* Print a list on the terminal if errors detected. */
  124.  	    for (i=1; b59Msg(i, &srcp, err); i++)
  125.  		printf("\"-\", line %d: %s (column %d)\n",
  126.  		       srcp.line, err, srcp.col);
  127.  	} else {
  128.  	    /* Print a TINY list on the terminal */
  129.  	    b59List("", 0, 78, liTINY, sevALL);
  130.  	    /* And a list file if asked to. */
  131.  	    if (!stdIn && listFileName != NULL) {
  132.  		b59List(listFileName, 60, 132, liFULL, sevALL);
  133.              }
  134.  	}
  135.      }
  136.      b59LiTerminate();
  137.  }
  138.  



        100 E : Message with one insert string: "%1"


1 error(s) detected.
No warnings issued.

b59 - 1.0

