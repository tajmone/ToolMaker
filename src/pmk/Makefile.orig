# Makefile for ParserMaker

SHELL	= /bin/sh
CPP	= /lib/cpp

PMQ	= -verbose
SMQ	= -verbose

ROOT	= /home/projects/ToolMaker
TMLIB	= $(ROOT)/lib/c/
TMBIN	= $(ROOT)/bin/bin-$(TMARCH)
INTLIB	= $(ROOT)/library

RELEASEROOT	= $(ROOT)
RELEASELIB	= $(RELEASEROOT)/lib/c/
RELEASEBIN	= $(RELEASEROOT)/bin/bin-$(TMARCH)
RELEASEMAN	= $(RELEASEROOT)/man/man1

IMP	= $(TMBIN)/imp $(IMPQ)
PMK	= $(TMBIN)/pmk $(PMQ)
SMK	= $(TMBIN)/smk $(SMQ)
LMK	= $(TMBIN)/lmk $(LMQ)

INCLUDE	= -I../license -I../tmk -I../imp

CFLAGS	= $(CQ) $(INCLUDE)
debug:=	CFLAGS = -g $(CQ) $(INCLUDE)

LDFLAGS	= -lm -lnsl -L/usr/local/lib/4.1.2 $(LQ)

CC	= $(GCC) $(CFLAGS)

GCC	= gcc
solaris1 sun4:=		GCC=	gcc2.7.2
solaris2:=	GCC=	gcc2.6.0

VERSIONOBJECTS = \
	pack.o \
	pmkErr.o \
	pmkList.o \
	pmkParse.o \
	pmkScan.o \
	pmkPaSema.o \
	pmkScSema.o \
	pmkSymTab.o \
	pmkTab.o \
	pwDbg.o \
	pwGe.o \
	pwLog.o \
	pwPack.o \
	pwSymSet.o \
	pwsGrm.o \
	pwsOrd.o \
	pwsQueue.o \
	pwsWrit.o \
	set.o \
	timing.o \
	pmk.o


OBJECTS = $(VERSIONOBJECTS) version.o 

LIBS	= \
	../license/license.o \
	../tmk/libtmk.a \
	../imp/imp.a


.KEEP_STATE:

#--
release	releaseARCH RELEASE :=CFLAGS= -O4 $(CQ) $(INCLUDE)

all debug: pmk

# Only create source
source: tm 
	sh version.sh
	venum +t

#--
release:
	@if cvs status | egrep Status | egrep -v Up-to-date ; then \
		exit 1 ; \
	fi
	make newversion tm releaseARCH releaseSRC
	cvs rtag pmk`ls [0-9]*_[0-9]*_[0-9]*.* | sed s/\\\.//` pmk

releaseSRC:
	install -m 664 Parse.imp Err.imp $(RELEASELIB)
	install -m 664 pmk.1 $(RELEASEMAN)

releaseARCH: pmkexe
	install -m 775 -s pmk $(RELEASEBIN)/pmk

RELEASE:
	@if test -r CVS/Tag ; then \
	  : ; \
	else \
	  echo This tree is not checked out from a Tag! ; \
	  echo RELEASE not allowed!! ; \
	  exit 1 ; \
	fi
	@if cvs status | egrep Status | egrep -v Up-to-date ; then \
		exit 1 ; \
	fi
	make tm releaseARCH releaseSRC

newversion:
	@-\rm [0-9]*_[0-9]*_[0-9]*.*
	@sh version.sh
	venum +c
	echo "cat > `ls [0-9]*_[0-9]*_[0-9]*.*` <<EOF" > version.sh
	echo "PMK" >> version.sh
	echo "ParserMaker" >> version.sh
	echo "EOF" >> version.sh
	cvs commit -m 'New version' version.sh

version.c: $(VERSIONOBJECTS)
	@-\rm [0-9]*_[0-9]*_[0-9]*.*
	@sh version.sh
	venum +t

version.o: version.c

#-- Use local pmk
local: localpmk pmkexe


localpmk:
	./pmk pmk -library .


pmk: tm pmkexe

pmkexe: checkARCH $(TMARCH)

checkARCH:
	if test -f .arch ; then :; else echo "none" > .arch; fi
	-if test `cat .arch` != $(TMARCH); then \
	    rm *.o; \
	    echo $(TMARCH) > .arch ; \
	fi

sun3 sun4 solaris1 solaris2: ../license/license.h ../imp/impMacro.h ../tmk/tmk.h ../tmk/tmkCommon.h $(OBJECTS) $(LIBS)
	$(CC) -o pmk $(CFLAGS) $(OBJECTS) $(LIBS) $(LDFLAGS)

purify: ../license/license.h ../imp/impMacro.h ../tmk/tmk.h ../tmk/tmkCommon.h $(OBJECTS) $(LIBS)
	purify $(CC) -o pmk $(CFLAGS) $(OBJECTS) $(LIBS) $(LDFLAGS)

#-----------------------
# ToolMaker generation

tm: .pmkstamp .smkstamp .lmkstamp

.smkstamp : .pmkstamp pmk.smk pmk.tmk pmk.voc $(TMLIB)Scan.imp 
	$(SMK) pmk
	@touch .smkstamp

.pmkstamp : pmk.pmk pmk.tmk Parse.imp Err.imp
	$(PMK) pmk
	@touch .pmkstamp

.lmkstamp : pmk.lmk pmk.tmk $(TMLIB)/List.imp $(TMLIB)/Common.imp
	$(LMK) pmk
	@touch .lmkstamp

pmkParse.o: pmkParse.c
pmkPaSema.o: pmkPaSema.c
pmkErr.o: pmkErr.c
pmkScan.o: pmkScan.c
pmkScSema.o: pmkScSema.c
pmkList.o: pmkList.c

#-----------------
# License handling

../license/license.h: $(INTLIB)/license.h
	@-[ ! -d ../license ] && mkdir ../license
	cp -p $(INTLIB)/license.h ../license/license.h

../license/license.o: $(INTLIB)/bin-$(TMARCH)/license.o
	@-[ ! -d ../license ] && mkdir ../license
	cp -p $(INTLIB)/bin-$(TMARCH)/license.o ../license/license.o


#------------------
# tmk libraries

../tmk/tmk.h: $(INTLIB)/tmk.h
	@-[ ! -d ../tmk ] && mkdir ../tmk
	cp -p $(INTLIB)/tmk.h ../tmk/tmk.h

../tmk/tmkCommon.h: $(INTLIB)/tmkCommon.h
	@-[ ! -d ../tmk ] && mkdir ../tmk
	cp -p $(INTLIB)/tmkCommon.h ../tmk/tmkCommon.h

../tmk/libtmk.a: $(INTLIB)/bin-$(TMARCH)/libtmk.a
	@-[ ! -d ../tmk ] && mkdir ../tmk
	cp -p $(INTLIB)/bin-$(TMARCH)/libtmk.a ../tmk/libtmk.a

#--------------------
# imp library

../imp/imp.a : $(INTLIB)/bin-$(TMARCH)/imp.a
	@-[ ! -d ../imp ] && mkdir ../imp
	cp -p $(INTLIB)/bin-$(TMARCH)/imp.a ../imp/imp.a

../imp/impMacro.h : $(INTLIB)/impMacro.h
	@-[ ! -d ../imp ] && mkdir ../imp
	cp -p $(INTLIB)/impMacro.h ../imp


#--
boot:
	touch pmk.pmk
	touch pmk.tmk
	touch pmk.lmk
	touch pmk.smk
	make all

#--
clean:
	rm -f *~ *.o core *.pml *.sml *.smt *.pmt *.lmt pmk.voc pmkParse.* pmkScan.* \
	pmkScSema.* pmkPaSema.* pmkCommon.h pmkList.* pmkErr.* pmk .*stamp

FILETER = | sed -e "\,/usr/include, d" | sort -u 

depend file:
	@echo -n "Make depend "
	@mv Makefile Makefile.~
	@sed -n '1,/^# DO NOT DELETE THIS LINE -- make depend depends on it.$$/ p' Makefile.~ > Makefile
	@for file in $(OBJECTS:.o=.c) ; do /lib/cpp $(INCLUDE) -M $$file | egrep -v '/usr/include|\.c$$' | cat >> Makefile ; echo -n . ; done
	@echo "done."

# DO NOT DELETE THIS LINE -- make depend depends on it.
