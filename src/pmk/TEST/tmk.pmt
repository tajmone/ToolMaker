%%SET tmkTokenName("TmkToken")
%%SET tmkTokenCode("code")
%%SET tmkTokenSrcp("srcp")
%%SET tmkTokenDecl (" int code", " TmkSrcp srcp", " char *sval				/* string value */", " int ival				/* integer value */", " long fpos				/* file pos of target language code */", " long length			     /* length of target language code */")
%%SET tmkSrcpName("TmkSrcp")
%%SET tmkSrcpRow("line")
%%SET tmkSrcpCol("col")
%%SET tmkSrcpFile("file")
%%SET tmkSrcpDecl(" TmkNatural line", " TmkNatural col", " TmkNatural file")
%%BEGIN(tmkImport)
MPORT
typedef int TmkNat%%END(tmkImport)
%%SET tmkForce(0)
%%SET tmkOs("SunOS")
%%SET pmkOs("SunOS")
%%SET currentOs("SunOS")
%%SET tmkTarget("c")
%%SET pmkTarget("c")
%%SET tmkLibrary("%%(TMHOME)/lib/%%(tmkTarget)/")
%%SET pmkLibrary("..")
%%SET tmkPrefix("tmk")
%%SET parserPrefix("tmk")
%%SET listerPrefix("tmk")
%%SET tmkCodeDecl(" int code")
%%SET tmkGrmAttrDecl(" OptNodeP opt", " TmoNodeP dir", " TokenAttrListP attr", " int ival", " char *sval", " TmkSrcp srcp")
%%SET tmkGrmAttrNames("opt", "dir", "attr", "ival", "sval", "srcp")
%%BEGIN(pmkImport)
 '..';

`%`%IMPORT
#include "tmkScan.h"
#include "tmk.h"
extern%%END(pmkImport)
%%PROCESS("%%(tmkLibrary)/Common.imp")
%%SET pmStackMax(32)
%%SET pmLookAheadMax(5)
%%SET pmCost(5)
%%BEGIN(pmIScan)

tmkScan(tmkCext, token);
%%END(pmIScan)
%%BEGIN(pmISym)

    /* Make the requested token
     */
    sym->code = code;
    sym->sval = "";
%%END(pmISym)
%%SET pmOptimize(Lr0)
%%SET pmActPack(RDS)
%%SET pmGtoPack(RDS)
%%SET pmRec(Single, Multiple, Panic)
%%SET pmHeader("PMK -- ParserMaker 2.1(17) (1997-07-28 17:52)")
%%SET pmVersion("2.1")
%%SET pmCorrection("17")
%%BEGIN(pmDecl)

#include <stdio.h>
#include "tmkCommon.h"
#include "tmk_i.h"
#include "tmkList.h"

static Boolean srcpOptional = TRUE;
static char *dummy;

static TokenAttrListP newAttr(name, nameDecl)
  char *name;			/* Attribute name */
  char *nameDecl;		/* Attribute name declaration */
{
  TokenAttrListP p = (TokenAttrListP) malloc(sizeof(TokenAttrList));
  p->name = name;
  p->nameDecl = nameDecl;
  p->next = NULL;
  return p;
}

static OptNodeP newOpt(name, srcp)
  char *name;			/* Option name */
  TmkSrcp srcp;			/* Option srcp */
{
  OptNodeP p = (OptNodeP) malloc(sizeof(OptNode));
  p->name = name;
  p->srcp = srcp;
  p->next = NULL;
  return p;
}

%%END(pmDecl)
%%SET pmStates(45)
%%SET pmStateTyp(1)
%%SET pmTerms(22)
%%SET pmTermTyp(1)
%%SET pmActTyp(2)
%%SET pmArgTyp(1)
%%SET pmActRDSvectorLen(313)
%%BEGIN(pmActTab)
{83,267,267,353,274,402,234,153,378,386,394,418,90,83,410,83,83,426,83,362
,114,370,434,218,402,321,329,378,386,394,418,267,267,410,274,274,426,435
,362,434,370,402,435,435,378,386,394,418,322,267,410,83,274,426,346,362
,201,370,267,185,4,274,249,90,83,225,83,83,273,83,434,210,402,146,345,378
,386,394,418,267,267,410,274,274,426,434,362,402,370,330,378,386,394,418
,130,138,410,83,314,426,226,362,338,370,122,73,89,113,0,90,83,0,83,83,434
,83,402,0,137,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386
,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426
,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378
,386,394,418,0,0,410,0,0,426,353,362,402,370,0,378,386,394,418,0,0,410,0
,0,426,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370
,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386,394,418,0,0
,410,83,0,426,434,362,402,370,67,378,386,394,418,90,83,410,83,83,426,83
,362,67,370,67,67,83,67,201,297,19,185,0,0,249,0,11,225,90,83,273,83,83
,19,83,19,19,0,19,290,0,186,41,0,49,73,89,113,0,0,0,0,0,0,0,0,0,0,137}
%%END(pmActTab)
%%SET pmActRDScheckLen(313)
%%SET pmRDScheckTyp(1)
%%SET pmActRowMapTyp(2)
%%BEGIN(pmRDScheck)
{37,19,19,37,19,37,17,17,37,37,37,37,37,37,37,37,37,37,37,37,38,37,38,12
,38,38,38,38,38,38,38,34,25,38,34,25,38,43,38,43,38,43,43,43,43,43,43,43
,26,14,43,21,14,43,35,43,21,43,28,21,1,28,21,21,21,21,21,21,21,21,16,9,16
,41,41,16,16,16,16,11,31,16,11,31,16,18,16,18,16,29,18,18,18,18,39,40,18
,7,23,18,15,18,32,18,44,7,7,7,45,7,7,45,7,7,22,7,22,45,7,22,22,22,22,45
,45,22,45,45,22,24,22,24,22,45,24,24,24,24,45,45,24,45,45,24,27,24,27,24
,45,27,27,27,27,45,45,27,45,45,27,30,27,30,27,45,30,30,30,30,45,45,30,45
,45,30,33,30,33,30,45,33,33,33,33,45,45,33,45,45,33,36,33,36,33,45,36,36
,36,36,45,45,36,45,45,36,8,36,8,36,45,8,8,8,8,45,45,8,45,45,8,10,8,10,8
,45,10,10,10,10,45,45,10,45,45,10,42,10,42,10,45,42,42,42,42,45,45,42,5
,45,42,13,42,13,42,0,13,13,13,13,5,5,13,5,5,13,5,13,0,13,0,0,4,0,20,0,2
,20,45,45,20,45,3,20,4,4,20,4,4,2,4,2,2,45,2,3,45,3,3,45,3,6,6,6,45,45,45
,45,45,45,45,45,45,45,6}
%%END(pmRDScheck)
%%BEGIN(pmActRowMap)
{253,60,274,280,270,246,291,97,201,70,216,78,22,246,48,99,67,5,82,0,267
,51,111,97,126,31,47,141,57,88,156,79,101,171,30,53,186,0,19,93,94,72,231
,36,103}
%%END(pmActRowMap)
%%BEGIN(pmContTab)
{{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{9,9}
,{1,1}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{9,9}
,{1,1}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{1,1}
,{2,2}
,{2,2}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
}
%%END(pmContTab)
%%BEGIN(pmSeparators)
{0,0,0}
%%END(pmSeparators)
%%BEGIN(pmFiducials)
{0,0,0}
%%END(pmFiducials)
%%BEGIN(pmSkips)
{0,0,0}
%%END(pmSkips)
%%SET pmNonTerms(22)
%%SET pmNonTermTyp(1)
%%SET pmGtoTyp(2)
%%SET pmGtoRDSvectorLen(51)
%%BEGIN(pmGtoTab)
{0,306,161,161,313,81,169,313,58,42,282,57,26,50,17,74,129,34,242,250,145
,98,25,305,106,298,202,194,177,65,337,354,154,178,33,258,170,193,209,217
,233,241,257,265,281,289,97,105,121,162,361}
%%END(pmGtoTab)
%%SET pmGtoRowMapTyp(1)
%%BEGIN(pmGtoRowMap)
{7,3,18,0,26,21,24,23,3,2,44,33,1,46,2,1,0,1,1,21,24,0,35,1,36,25,1,38,27
,1,40,29,0,42,31,0,2,5,30,0,0,0,47,48,0}
%%END(pmGtoRowMap)
%%SET pmProds(54)
%%SET pmLhsTyp(1)
%%SET pmRhszTyp(1)
%%BEGIN(pmLhs)
{30,39,39,35,35,35,35,38,38,33,33,44,44,42,42,42,42,42,23,23,40,36,34,28
,28,26,26,26,26,43,43,41,37,37,31,29,27,27,24,24,24,24,24,32,25,25,25,25
,25,25,25,25,25,25}
%%END(pmLhs)
%%BEGIN(pmRhsz)
{2,0,2,1,1,1,1,0,3,0,1,1,2,2,3,3,3,3,1,3,2,3,1,1,2,3,4,4,3,1,3,2,0,1,3,1
,1,2,3,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1}
%%END(pmRhsz)
%%SET pmSccMax(22)
%%SET pmSccTyp(1)
%%SET pmICostTyp(1)
%%SET pmDCostTyp(1)
%%BEGIN(pmVocTab)
{{1,255,255,"EndOfText",""}
,{2,1,1,"';'",""}
,{3,1,1,"','",""}
,{4,1,1,"'NO'",""}
,{5,1,1,"'`%`%'",""}
,{6,1,1,"'ROW'",""}
,{7,1,1,"NUMBER",""}
,{8,1,1,"STRING",""}
,{9,1,1,"'NAME'",""}
,{10,1,1,"'CODE'",""}
,{11,1,1,"'SRCP'",""}
,{12,1,1,"'FILE'",""}
,{13,1,1,"'`%`%END'",""}
,{14,1,1,"'`%`%SRCP'",""}
,{15,1,1,"'COLUMN'",""}
,{16,1,1,"'`%`%TOKEN'",""}
,{17,1,1,"'`%`%IMPORT'",""}
,{18,1,1,"'POSITION'",""}
,{19,1,1,"SKIPHEADER",""}
,{20,1,1,"IDENTIFIER",""}
,{21,1,1,"'`%`%OPTIONS'",""}
,{22,1,1,"'ATTRIBUTES'",""}
}
%%END(pmVocTab)
%%SET pmSem(On)
%%BEGIN(pmSemantics)
    switch (rule) {
          case 1: { /* tmk_document = option_section other_sections; */

          if (!(srcpOptional || tmkEnv->srcpNode))
	    /* SRCP section not found */
            tmkLog(NULL, 64, sevERR, "SRCP");
		break;}
    case 8: { /* option_section =; */

	  srcpOptional = TRUE;
		break;}
    case 9: { /* option_section = '`%`%OPTIONS' option_directives optional_end; */

	  srcpOptional = TRUE;
          setOpts(tmkEnv->optTab, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].dir);
          setCliOpts(tmkEnv->cliTab, tmkEnv->argc, tmkEnv->argv, &dummy);
	  tmkEscape = *getStrOpt(tmkEnv->escapeOpt);
		break;}
    case 12: { /* option_directives = option_directive; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir;
		break;}
    case 13: { /* option_directives = option_directives option_directive; */
{
	  TmoNodeP p;

	  if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir == NULL)
	    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].dir;
	  else {
	    for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir; p->next; p = p->next);
	    p->next = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].dir;
	    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir= %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir;
	  }
	}	break;}
    case 14: { /* option_directive = identifier ';'; */
{
	  TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
	  p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
	  p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
	  p->dirKind = BOOL_TMO;
	  p->oval.bval = TRUE;
	  p->next = NULL;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
	}	break;}
    case 15: { /* option_directive = 'NO' identifier ';'; */
{
	  TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
	  p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	  p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].srcp;
	  p->dirKind = BOOL_TMO;
	  p->oval.bval = FALSE;
	  p->next = NULL;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
	}	break;}
    case 16: { /* option_directive = identifier NUMBER ';'; */
{
	  TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
	  p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
	  p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
	  p->dirKind = NUM_TMO;
	  p->oval.ival = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].ival;
	  p->next = NULL;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
	}	break;}
    case 17: { /* option_directive = identifier STRING ';'; */
{
	  TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
	  p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
	  p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
	  p->dirKind = STR_TMO;
	  p->oval.sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].sval;
	  p->next = NULL;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
	}	break;}
    case 18: { /* option_directive = identifier options ';'; */
{
	  TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
	  p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
	  p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
	  p->dirKind = SET_TMO;
	  p->oval.opts = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].opt;
	  p->next = NULL;
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
	}	break;}
    case 19: { /* options = identifier; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt = newOpt(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp);
		break;}
    case 20: { /* options = options ',' identifier; */
{
	  OptNodeP p;

	  if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt == NULL)
	    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt = newOpt(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].srcp);
	  else {
	    for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt; p->next; p = p->next);
	    p->next = newOpt(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].srcp);
	    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt;
	  }
	}	break;}
    case 21: { /* import_section = '`%`%IMPORT' optional_end; */

	  if (tmkEnv->importSection)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 60, sevERR, "");
	  else
  	    tmkEnv->importSection = tmkNewCode(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].fpos, %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].length);
		break;}
    case 22: { /* token_section = token_header token_decls optional_end; */
{
          Boolean declFound = FALSE;
          Boolean declOmitted = FALSE;
          TokenAttrListP attrs;

	  if (tmkEnv->tokenNode->name == NULL)
            /* Token type must have a name */
	    tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 62, sevERR, "NAME");

	  if (tmkEnv->tokenNode->code == NULL)
            /* Token must have a code part */
	    tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 62, sevERR, "CODE");

          /* check declarations */
          if (tmkEnv->tokenNode->codeDecl)
            declFound = TRUE;
          else
            declOmitted = TRUE;

          if (tmkEnv->tokenNode->srcpDecl)
            declFound = TRUE;

          for (attrs = tmkEnv->tokenNode->attrs; 
               attrs && (!declFound || !declOmitted); 
               attrs = attrs->next)
            if (attrs->nameDecl)
              declFound = TRUE;
            else 
              declOmitted = TRUE;

          if (declFound && declOmitted)
            /* If there exists declarations all fields (except SRCP) must have it */
            tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 65, sevERR, "token");

          srcpOptional = (!declFound || tmkEnv->tokenNode->srcpDecl);
	}	break;}
    case 23: { /* token_header = '`%`%TOKEN'; */

          tmkEnv->tokenNode = (TokenNodeP) calloc(1,sizeof(TokenNode));
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 26: { /* token_decl = 'NAME' identifier ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->tokenNode->name)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else
	    tmkEnv->tokenNode->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
		break;}
    case 27: { /* token_decl = 'CODE' identifier optional_decl ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->tokenNode->code)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else {
	    tmkEnv->tokenNode->code = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	    tmkEnv->tokenNode->codeDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
	  }
		break;}
    case 28: { /* token_decl = 'SRCP' identifier optional_decl ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->tokenNode->srcp)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else {
	    tmkEnv->tokenNode->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	    tmkEnv->tokenNode->srcpDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
	  }
		break;}
    case 29: { /* token_decl = 'ATTRIBUTES' token_attributes ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->tokenNode->attrs)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else
	    tmkEnv->tokenNode->attrs = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].attr;
		break;}
    case 30: { /* token_attributes = token_attribute; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr;
		break;}
    case 31: { /* token_attributes = token_attributes ',' token_attribute; */
{
	  TokenAttrListP p;

	  if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr == NULL)
	    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].attr;
	  else {
	    for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr; p->next; p = p->next);
	    p->next = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].attr;
	    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr;
	  }
	}	break;}
    case 32: { /* token_attribute = identifier optional_decl; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = newAttr(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval);
		break;}
    case 33: { /* optional_decl =; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = NULL;
		break;}
    case 34: { /* optional_decl = '`%`%'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
		break;}
    case 35: { /* srcp_section = srcp_header srcp_decls optional_end; */
{
          Boolean declFound = FALSE;
          Boolean declOmitted = FALSE;

	  if (tmkEnv->srcpNode->name == NULL)
            /* Source position type must have a name */
	    tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 63, sevERR, "NAME");

          if (tmkEnv->srcpNode->row || tmkEnv->srcpNode->col ||
	      tmkEnv->srcpNode->file || tmkEnv->srcpNode->pos) {
            /* check declarations */
            if (tmkEnv->srcpNode->row)
              if (tmkEnv->srcpNode->rowDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->col)
              if (tmkEnv->srcpNode->colDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->file)
              if (tmkEnv->srcpNode->fileDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->pos)
              if (tmkEnv->srcpNode->posDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (declFound && declOmitted)
              /* If there exists declarations all fields must have it */
              tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 65, sevERR, "srcp");
	  } else
            /* Source position must have at least one member */
            tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 66, sevERR, "");  
	}	break;}
    case 36: { /* srcp_header = '`%`%SRCP'; */

          tmkEnv->srcpNode = (SrcpNodeP) calloc(1,sizeof(SrcpNode));
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 39: { /* srcp_decl = 'NAME' identifier ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->srcpNode->name)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else
 	    tmkEnv->srcpNode->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
		break;}
    case 40: { /* srcp_decl = 'ROW' identifier optional_decl ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->srcpNode->row)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else {
	    tmkEnv->srcpNode->row = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	    tmkEnv->srcpNode->rowDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
	  }
		break;}
    case 41: { /* srcp_decl = 'COLUMN' identifier optional_decl ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->srcpNode->col)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else {
	    tmkEnv->srcpNode->col = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	    tmkEnv->srcpNode->colDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
	  }
		break;}
    case 42: { /* srcp_decl = 'FILE' identifier optional_decl ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->srcpNode->file)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else {
	    tmkEnv->srcpNode->file = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	    tmkEnv->srcpNode->fileDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
	  }
		break;}
    case 43: { /* srcp_decl = 'POSITION' identifier optional_decl ';'; */

	  free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
	  if (tmkEnv->srcpNode->pos)
	    tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
	  else {
	    tmkEnv->srcpNode->pos = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
	    tmkEnv->srcpNode->posDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
	  }
		break;}
    case 44: { /* skip_section = SKIPHEADER optional_end; */

      if (tmkEnv->fileType == TMK_FILE)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 51, sevERR, "");
    	break;}
    case 45: { /* identifier = IDENTIFIER; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
        	break;}
    case 46: { /* identifier = 'ATTRIBUTES'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 47: { /* identifier = 'NAME'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 48: { /* identifier = 'CODE'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 49: { /* identifier = 'SRCP'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 50: { /* identifier = 'ROW'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 51: { /* identifier = 'COLUMN'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 52: { /* identifier = 'FILE'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 53: { /* identifier = 'POSITION'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
    case 54: { /* identifier = 'NO'; */

	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
		break;}
%%END(pmSemantics)
%%SET vocFileName ("tmk.voc")
%%BEGIN (pmVoc)
   0    0 Unknown           main
   1    1 EndOfText         main
   2    2 ';'               main
   3    3 ','               main
   4    4 'NO'              main
   5    5 '`%`%'              main
   6    6 'ROW'             main
   7    7 NUMBER            main
   8    8 STRING            main
   9    9 'NAME'            main
  10   10 'CODE'            main
  11   11 'SRCP'            main
  12   12 'FILE'            main
  13   13 '`%`%END'           main
  14   14 '`%`%SRCP'          main
  15   15 'COLUMN'          main
  16   16 '`%`%TOKEN'         main
  17   17 '`%`%IMPORT'        main
  18   18 'POSITION'        main
  19   19 SKIPHEADER        main
  20   20 IDENTIFIER        main
  21   21 '`%`%OPTIONS'       main
  22   22 'ATTRIBUTES'      main
%%END (pmVoc)
%%PROCESS("%%(pmkLibrary)/Parse.imp")
%%PROCESS("%%(pmkLibrary)/Err.imp")
