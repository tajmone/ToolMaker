########## tmk ##########



        302 I : Conflicts resolved by modifications.


No warnings or errors detected.
1 informational message(s).

==> tmk.tmk <==
%%OPTIONS
    Prefix 'tmk';
    Target 'c';
    Library '../../../tmk';
%%IMPORT
typedef int TmkNatural;
%%END
%%TOKEN
  NAME TmkToken;
  CODE code %% int %1%%;
  SRCP srcp %% TmkSrcp %1%%;
  ATTRIBUTES
    sval   %% char *%1				/* string value */%%,
    ival   %% int %1				/* integer value */%%,
    fpos   %% long %1				/* file pos of target language code */%%,
    length %% long %1                /* length of target language code */%%;
%%END
%%SRCP
  NAME   TmkSrcp;
  COLUMN col  %% TmkNatural %1%%;
  ROW    line %% TmkNatural %1%%;
  FILE   file %% TmkNatural %1%%;
%%END

==> tmk.pml <==
*******  Shift-Reduce conflict in state   44 Symbol: IDENTIFIER Production:   54
         Resolved by modification (Shift: IDENTIFIER)
*******  Shift-Reduce conflict in state   44 Symbol: 'ATTRIBUTES' Production:   54
         Resolved by modification (Shift: 'ATTRIBUTES')
*******  Shift-Reduce conflict in state   44 Symbol: 'NAME' Production:   54
         Resolved by modification (Shift: 'NAME')
*******  Shift-Reduce conflict in state   44 Symbol: 'CODE' Production:   54
         Resolved by modification (Shift: 'CODE')
*******  Shift-Reduce conflict in state   44 Symbol: 'SRCP' Production:   54
         Resolved by modification (Shift: 'SRCP')
*******  Shift-Reduce conflict in state   44 Symbol: 'ROW' Production:   54
         Resolved by modification (Shift: 'ROW')
*******  Shift-Reduce conflict in state   44 Symbol: 'COLUMN' Production:   54
         Resolved by modification (Shift: 'COLUMN')
*******  Shift-Reduce conflict in state   44 Symbol: 'FILE' Production:   54
         Resolved by modification (Shift: 'FILE')
*******  Shift-Reduce conflict in state   44 Symbol: 'POSITION' Production:   54
         Resolved by modification (Shift: 'POSITION')
*******  Shift-Reduce conflict in state   44 Symbol: 'NO' Production:   54
         Resolved by modification (Shift: 'NO')

==> tmk.pmt <==
%%SET tmkTokenName("TmkToken")
%%SET tmkTokenCode("code")
%%SET tmkTokenSrcp("srcp")
%%SET tmkTokenDecl (" int code", " TmkSrcp srcp", " char *sval				/* string value */", " int ival				/* integer value */", " long fpos				/* file pos of target language code */", " long length                /* length of target language code */")
%%SET tmkSrcpName("TmkSrcp")
%%SET tmkSrcpRow("line")
%%SET tmkSrcpCol("col")
%%SET tmkSrcpFile("file")
%%SET tmkSrcpDecl(" TmkNatural line", " TmkNatural col", " TmkNatural file")
%%BEGIN(tmkImport)

typedef int TmkNatural;
%%END(tmkImport)
%%SET tmkForce(1)
%%SET tmkTarget("c")
%%SET pmkTarget("c")
%%SET tmkLibrary("../../../tmk")
%%SET pmkLibrary("../..")
%%SET tmkPrefix("tmk")
%%SET parserPrefix("tmk")
%%SET listerPrefix("tmk")
%%SET tmkCodeDecl(" int code")
%%SET tmkGrmAttrDecl(" OptNodeP opt", " TmoNodeP dir", " TokenAttrListP attr", " int ival", " char *sval", " TmkSrcp srcp")
%%SET tmkGrmAttrNames("opt", "dir", "attr", "ival", "sval", "srcp")
%%BEGIN(pmkImport)

#include "tmkScan.h"
#include "tmk.h"
extern tmkContext tmkCext;
%%END(pmkImport)
%%PROCESS("%%(tmkLibrary)/Common.imp")
%%SET pmStackMax(32)
%%SET pmLookAheadMax(5)
%%SET pmCost(5)
%%BEGIN(pmIScan)

tmkScan(tmkCext, token);
%%END(pmIScan)
%%BEGIN(pmISym)

    /* Make the requested token
     */
    sym->code = code;
    sym->sval = "";
%%END(pmISym)
%%SET pmOptimize(Lr0)
%%SET pmActPack(RDS)
%%SET pmGtoPack(RDS)
%%SET pmRec(Single, Multiple, Panic)
%%SET pmHeader("PMK -- ParserMaker 2.1(17) (1997-07-28 17:52)")
%%SET pmVersion("2.1")
%%SET pmCorrection("17")
%%BEGIN(pmDecl)

#include <stdio.h>
#include "tmkCommon.h"
#include "tmk_i.h"
#include "tmkList.h"

static Boolean srcpOptional = TRUE;
static char *dummy;

static TokenAttrListP newAttr(name, nameDecl)
  char *name;			/* Attribute name */
  char *nameDecl;		/* Attribute name declaration */
{
  TokenAttrListP p = (TokenAttrListP) malloc(sizeof(TokenAttrList));
  p->name = name;
  p->nameDecl = nameDecl;
  p->next = NULL;
  return p;
}

static OptNodeP newOpt(name, srcp)
  char *name;			/* Option name */
  TmkSrcp srcp;			/* Option srcp */
{
  OptNodeP p = (OptNodeP) malloc(sizeof(OptNode));
  p->name = name;
  p->srcp = srcp;
  p->next = NULL;
  return p;
}

%%END(pmDecl)
%%SET pmStates(45)
%%SET pmStateTyp(1)
%%SET pmTerms(22)
%%SET pmTermTyp(1)
%%SET pmActTyp(2)
%%SET pmArgTyp(1)
%%SET pmActRDSvectorLen(313)
%%BEGIN(pmActTab)
{83,267,267,353,274,402,234,153,378,386,394,418,90,83,410,83,83,426,83,362
,114,370,434,218,402,321,329,378,386,394,418,267,267,410,274,274,426,435
,362,434,370,402,435,435,378,386,394,418,322,267,410,83,274,426,346,362
,201,370,267,185,4,274,249,90,83,225,83,83,273,83,434,210,402,146,345,378
,386,394,418,267,267,410,274,274,426,434,362,402,370,330,378,386,394,418
,130,138,410,83,314,426,226,362,338,370,122,73,89,113,0,90,83,0,83,83,434
,83,402,0,137,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386
,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426
,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378
,386,394,418,0,0,410,0,0,426,353,362,402,370,0,378,386,394,418,0,0,410,0
,0,426,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370
,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386,394,418,0,0
,410,83,0,426,434,362,402,370,67,378,386,394,418,90,83,410,83,83,426,83
,362,67,370,67,67,83,67,201,297,19,185,0,0,249,0,11,225,90,83,273,83,83
,19,83,19,19,0,19,290,0,186,41,0,49,73,89,113,0,0,0,0,0,0,0,0,0,0,137}
%%END(pmActTab)
%%SET pmActRDScheckLen(313)
%%SET pmRDScheckTyp(1)
%%SET pmActRowMapTyp(2)
%%BEGIN(pmRDScheck)
{37,19,19,37,19,37,17,17,37,37,37,37,37,37,37,37,37,37,37,37,38,37,38,12
,38,38,38,38,38,38,38,34,25,38,34,25,38,43,38,43,38,43,43,43,43,43,43,43
,26,14,43,21,14,43,35,43,21,43,28,21,1,28,21,21,21,21,21,21,21,21,16,9,16
,41,41,16,16,16,16,11,31,16,11,31,16,18,16,18,16,29,18,18,18,18,39,40,18
,7,23,18,15,18,32,18,44,7,7,7,45,7,7,45,7,7,22,7,22,45,7,22,22,22,22,45
,45,22,45,45,22,24,22,24,22,45,24,24,24,24,45,45,24,45,45,24,27,24,27,24
,45,27,27,27,27,45,45,27,45,45,27,30,27,30,27,45,30,30,30,30,45,45,30,45
,45,30,33,30,33,30,45,33,33,33,33,45,45,33,45,45,33,36,33,36,33,45,36,36
,36,36,45,45,36,45,45,36,8,36,8,36,45,8,8,8,8,45,45,8,45,45,8,10,8,10,8
,45,10,10,10,10,45,45,10,45,45,10,42,10,42,10,45,42,42,42,42,45,45,42,5
,45,42,13,42,13,42,0,13,13,13,13,5,5,13,5,5,13,5,13,0,13,0,0,4,0,20,0,2
,20,45,45,20,45,3,20,4,4,20,4,4,2,4,2,2,45,2,3,45,3,3,45,3,6,6,6,45,45,45
,45,45,45,45,45,45,45,6}
%%END(pmRDScheck)
%%BEGIN(pmActRowMap)
{253,60,274,280,270,246,291,97,201,70,216,78,22,246,48,99,67,5,82,0,267
,51,111,97,126,31,47,141,57,88,156,79,101,171,30,53,186,0,19,93,94,72,231
,36,103}
%%END(pmActRowMap)
%%BEGIN(pmContTab)
{{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{9,9}
,{1,1}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{9,9}
,{1,1}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{1,1}
,{2,2}
,{2,2}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
}
%%END(pmContTab)
%%BEGIN(pmSeparators)
{0,0,0}
%%END(pmSeparators)
%%BEGIN(pmFiducials)
{0,0,0}
%%END(pmFiducials)
%%BEGIN(pmSkips)
{0,0,0}
%%END(pmSkips)
%%SET pmNonTerms(22)
%%SET pmNonTermTyp(1)
%%SET pmGtoTyp(2)
%%SET pmGtoRDSvectorLen(51)
%%BEGIN(pmGtoTab)
{0,306,161,161,313,81,169,313,58,42,282,57,26,50,17,74,129,34,242,250,145
,98,25,305,106,298,202,194,177,65,337,354,154,178,33,258,170,193,209,217
,233,241,257,265,281,289,97,105,121,162,361}
%%END(pmGtoTab)
%%SET pmGtoRowMapTyp(1)
%%BEGIN(pmGtoRowMap)
{7,3,18,0,26,21,24,23,3,2,44,33,1,46,2,1,0,1,1,21,24,0,35,1,36,25,1,38,27
,1,40,29,0,42,31,0,2,5,30,0,0,0,47,48,0}
%%END(pmGtoRowMap)
%%SET pmProds(54)
%%SET pmLhsTyp(1)
%%SET pmRhszTyp(1)
%%BEGIN(pmLhs)
{30,39,39,35,35,35,35,38,38,33,33,44,44,42,42,42,42,42,23,23,40,36,34,28
,28,26,26,26,26,43,43,41,37,37,31,29,27,27,24,24,24,24,24,32,25,25,25,25
,25,25,25,25,25,25}
%%END(pmLhs)
%%BEGIN(pmRhsz)
{2,0,2,1,1,1,1,0,3,0,1,1,2,2,3,3,3,3,1,3,2,3,1,1,2,3,4,4,3,1,3,2,0,1,3,1
,1,2,3,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1}
%%END(pmRhsz)
%%SET pmSccMax(22)
%%SET pmSccTyp(1)
%%SET pmICostTyp(1)
%%SET pmDCostTyp(1)
%%BEGIN(pmVocTab)
{{1,255,255,"EndOfText",""}
,{2,1,1,"';'",""}
,{3,1,1,"','",""}
,{4,1,1,"'NO'",""}
,{5,1,1,"'`%`%'",""}
,{6,1,1,"'ROW'",""}
,{7,1,1,"NUMBER",""}
,{8,1,1,"STRING",""}
,{9,1,1,"'NAME'",""}
,{10,1,1,"'CODE'",""}
,{11,1,1,"'SRCP'",""}
,{12,1,1,"'FILE'",""}
,{13,1,1,"'`%`%END'",""}
,{14,1,1,"'`%`%SRCP'",""}
,{15,1,1,"'COLUMN'",""}
,{16,1,1,"'`%`%TOKEN'",""}
,{17,1,1,"'`%`%IMPORT'",""}
,{18,1,1,"'POSITION'",""}
,{19,1,1,"SKIPHEADER",""}
,{20,1,1,"IDENTIFIER",""}
,{21,1,1,"'`%`%OPTIONS'",""}
,{22,1,1,"'ATTRIBUTES'",""}
}
%%END(pmVocTab)
%%SET pmSem(On)
%%BEGIN(pmSemantics)
    switch (rule) {
          case 1: { /* tmk_document = option_section other_sections; */

          if (!(srcpOptional || tmkEnv->srcpNode))
        /* SRCP section not found */
            tmkLog(NULL, 64, sevERR, "SRCP");
    	break;}
    case 8: { /* option_section =; */

      srcpOptional = TRUE;
    	break;}
    case 9: { /* option_section = '`%`%OPTIONS' option_directives optional_end; */

      srcpOptional = TRUE;
          setOpts(tmkEnv->optTab, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].dir);
          setCliOpts(tmkEnv->cliTab, tmkEnv->argc, tmkEnv->argv, &dummy);
      tmkEscape = *getStrOpt(tmkEnv->escapeOpt);
    	break;}
    case 12: { /* option_directives = option_directive; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir;
    	break;}
    case 13: { /* option_directives = option_directives option_directive; */
{
      TmoNodeP p;

      if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir == NULL)
        %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].dir;
      else {
        for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir; p->next; p = p->next);
        p->next = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].dir;
        %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir= %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir;
      }
    }	break;}
    case 14: { /* option_directive = identifier ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
      p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
      p->dirKind = BOOL_TMO;
      p->oval.bval = TRUE;
      p->next = NULL;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
    }	break;}
    case 15: { /* option_directive = 'NO' identifier ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
      p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].srcp;
      p->dirKind = BOOL_TMO;
      p->oval.bval = FALSE;
      p->next = NULL;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
    }	break;}
    case 16: { /* option_directive = identifier NUMBER ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
      p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
      p->dirKind = NUM_TMO;
      p->oval.ival = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].ival;
      p->next = NULL;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
    }	break;}
    case 17: { /* option_directive = identifier STRING ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
      p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
      p->dirKind = STR_TMO;
      p->oval.sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].sval;
      p->next = NULL;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
    }	break;}
    case 18: { /* option_directive = identifier options ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
      p->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp;
      p->dirKind = SET_TMO;
      p->oval.opts = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].opt;
      p->next = NULL;
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].dir = p;
    }	break;}
    case 19: { /* options = identifier; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt = newOpt(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp);
    	break;}
    case 20: { /* options = options ',' identifier; */
{
      OptNodeP p;

      if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt == NULL)
        %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt = newOpt(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].srcp);
      else {
        for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt; p->next; p = p->next);
        p->next = newOpt(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].srcp);
        %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].opt;
      }
    }	break;}
    case 21: { /* import_section = '`%`%IMPORT' optional_end; */

      if (tmkEnv->importSection)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 60, sevERR, "");
      else
        tmkEnv->importSection = tmkNewCode(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].fpos, %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].length);
    	break;}
    case 22: { /* token_section = token_header token_decls optional_end; */
{
          Boolean declFound = FALSE;
          Boolean declOmitted = FALSE;
          TokenAttrListP attrs;

      if (tmkEnv->tokenNode->name == NULL)
            /* Token type must have a name */
        tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 62, sevERR, "NAME");

      if (tmkEnv->tokenNode->code == NULL)
            /* Token must have a code part */
        tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 62, sevERR, "CODE");

          /* check declarations */
          if (tmkEnv->tokenNode->codeDecl)
            declFound = TRUE;
          else
            declOmitted = TRUE;

          if (tmkEnv->tokenNode->srcpDecl)
            declFound = TRUE;

          for (attrs = tmkEnv->tokenNode->attrs;
               attrs && (!declFound || !declOmitted);
               attrs = attrs->next)
            if (attrs->nameDecl)
              declFound = TRUE;
            else
              declOmitted = TRUE;

          if (declFound && declOmitted)
            /* If there exists declarations all fields (except SRCP) must have it */
            tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 65, sevERR, "token");

          srcpOptional = (!declFound || tmkEnv->tokenNode->srcpDecl);
    }	break;}
    case 23: { /* token_header = '`%`%TOKEN'; */

          tmkEnv->tokenNode = (TokenNodeP) calloc(1,sizeof(TokenNode));
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 26: { /* token_decl = 'NAME' identifier ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->tokenNode->name)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else
        tmkEnv->tokenNode->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
    	break;}
    case 27: { /* token_decl = 'CODE' identifier optional_decl ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->tokenNode->code)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->tokenNode->code = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
        tmkEnv->tokenNode->codeDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
      }
    	break;}
    case 28: { /* token_decl = 'SRCP' identifier optional_decl ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->tokenNode->srcp)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->tokenNode->srcp = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
        tmkEnv->tokenNode->srcpDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
      }
    	break;}
    case 29: { /* token_decl = 'ATTRIBUTES' token_attributes ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->tokenNode->attrs)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else
        tmkEnv->tokenNode->attrs = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].attr;
    	break;}
    case 30: { /* token_attributes = token_attribute; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr;
    	break;}
    case 31: { /* token_attributes = token_attributes ',' token_attribute; */
{
      TokenAttrListP p;

      if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr == NULL)
        %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].attr;
      else {
        for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr; p->next; p = p->next);
        p->next = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].attr;
        %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr;
      }
    }	break;}
    case 32: { /* token_attribute = identifier optional_decl; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].attr = newAttr(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval);
    	break;}
    case 33: { /* optional_decl =; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = NULL;
    	break;}
    case 34: { /* optional_decl = '`%`%'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
    	break;}
    case 35: { /* srcp_section = srcp_header srcp_decls optional_end; */
{
          Boolean declFound = FALSE;
          Boolean declOmitted = FALSE;

      if (tmkEnv->srcpNode->name == NULL)
            /* Source position type must have a name */
        tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 63, sevERR, "NAME");

          if (tmkEnv->srcpNode->row || tmkEnv->srcpNode->col ||
          tmkEnv->srcpNode->file || tmkEnv->srcpNode->pos) {
            /* check declarations */
            if (tmkEnv->srcpNode->row)
              if (tmkEnv->srcpNode->rowDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->col)
              if (tmkEnv->srcpNode->colDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->file)
              if (tmkEnv->srcpNode->fileDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->pos)
              if (tmkEnv->srcpNode->posDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (declFound && declOmitted)
              /* If there exists declarations all fields must have it */
              tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 65, sevERR, "srcp");
      } else
            /* Source position must have at least one member */
            tmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 66, sevERR, "");
    }	break;}
    case 36: { /* srcp_header = '`%`%SRCP'; */

          tmkEnv->srcpNode = (SrcpNodeP) calloc(1,sizeof(SrcpNode));
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 39: { /* srcp_decl = 'NAME' identifier ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->srcpNode->name)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else
        tmkEnv->srcpNode->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
    	break;}
    case 40: { /* srcp_decl = 'ROW' identifier optional_decl ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->srcpNode->row)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->row = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
        tmkEnv->srcpNode->rowDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
      }
    	break;}
    case 41: { /* srcp_decl = 'COLUMN' identifier optional_decl ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->srcpNode->col)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->col = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
        tmkEnv->srcpNode->colDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
      }
    	break;}
    case 42: { /* srcp_decl = 'FILE' identifier optional_decl ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->srcpNode->file)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->file = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
        tmkEnv->srcpNode->fileDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
      }
    	break;}
    case 43: { /* srcp_decl = 'POSITION' identifier optional_decl ';'; */

      free(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval);
      if (tmkEnv->srcpNode->pos)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->pos = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].sval;
        tmkEnv->srcpNode->posDecl = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].sval;
      }
    	break;}
    case 44: { /* skip_section = SKIPHEADER optional_end; */

      if (tmkEnv->fileType == TMK_FILE)
        tmkLog(%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp, 51, sevERR, "");
    	break;}
    case 45: { /* identifier = IDENTIFIER; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
        	break;}
    case 46: { /* identifier = 'ATTRIBUTES'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 47: { /* identifier = 'NAME'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 48: { /* identifier = 'CODE'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 49: { /* identifier = 'SRCP'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 50: { /* identifier = 'ROW'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 51: { /* identifier = 'COLUMN'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 52: { /* identifier = 'FILE'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 53: { /* identifier = 'POSITION'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
    case 54: { /* identifier = 'NO'; */

      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].sval;
      %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
    	break;}
%%END(pmSemantics)
%%SET vocFileName ("tmk.voc")
%%BEGIN (pmVoc)
   0    0 Unknown           main
   1    1 EndOfText         main
   2    2 ';'               main
   3    3 ','               main
   4    4 'NO'              main
   5    5 '`%`%'              main
   6    6 'ROW'             main
   7    7 NUMBER            main
   8    8 STRING            main
   9    9 'NAME'            main
  10   10 'CODE'            main
  11   11 'SRCP'            main
  12   12 'FILE'            main
  13   13 '`%`%END'           main
  14   14 '`%`%SRCP'          main
  15   15 'COLUMN'          main
  16   16 '`%`%TOKEN'         main
  17   17 '`%`%IMPORT'        main
  18   18 'POSITION'        main
  19   19 SKIPHEADER        main
  20   20 IDENTIFIER        main
  21   21 '`%`%OPTIONS'       main
  22   22 'ATTRIBUTES'      main
%%END (pmVoc)
%%PROCESS("%%(pmkLibrary)/Parse.imp")
%%PROCESS("%%(pmkLibrary)/Err.imp")

==> tmk.voc <==
   0    0 Unknown           main
   1    1 EndOfText         main
   2    2 ';'               main
   3    3 ','               main
   4    4 'NO'              main
   5    5 '%%'              main
   6    6 'ROW'             main
   7    7 NUMBER            main
   8    8 STRING            main
   9    9 'NAME'            main
  10   10 'CODE'            main
  11   11 'SRCP'            main
  12   12 'FILE'            main
  13   13 '%%END'           main
  14   14 '%%SRCP'          main
  15   15 'COLUMN'          main
  16   16 '%%TOKEN'         main
  17   17 '%%IMPORT'        main
  18   18 'POSITION'        main
  19   19 SKIPHEADER        main
  20   20 IDENTIFIER        main
  21   21 '%%OPTIONS'       main
  22   22 'ATTRIBUTES'      main

==> tmkCommon.h <==
#ifndef _tmkCommon_H_
#define _tmkCommon_H_
/* tmkCommon.h

   Common definitions for tmk

   This file is generated from information in 'tmk.tmk'

*/

/* The import section (%%IMPORT) */

typedef int TmkNatural;

/* The source position type (%%SRCP) */

typedef struct TmkSrcp {
    TmkNatural line;
    TmkNatural col;
    TmkNatural file;
} TmkSrcp;


/* The token type (%%TOKEN) */

typedef struct TmkToken {
    int code;
    TmkSrcp srcp;
    char *sval				/* string value */;
    int ival				/* integer value */;
    long fpos				/* file pos of target language code */;
    long length                /* length of target language code */;
} TmkToken;

#endif



==> tmkErr.c <==
/*----------------------------------------------------------------------*\

  tmkErr.c

  Parser error handler

\*----------------------------------------------------------------------*/

/* %%IMPORT */

#include "tmkScan.h"
#include "tmk.h"
extern tmkContext tmkCext;
/* END %%IMPORT */

#include "tmkList.h"
#include "tmkCommon.h"

#define MaxTokens 5


static char insStr[101] = "";	/* Inserted symbol strings */
static int insToks = 0;

static char delStr[201] = "";	/* Deleted symbol strings */
static int delToks = 0;

/*-----------------------------------------------------------------------------
 * tmkRPoi - Recovery point, output a message indicating the position.
 *-----------------------------------------------------------------------------
 */
void tmkRPoi(token)
    TmkToken *token;		/* IN the restart symbol */
{
    if (delToks > MaxTokens) {
       /* Output a recovery point error message
       */
       tmkLog(&(token->srcp), 100, sevINF, "");
    }/*if*/

    /* Clear both token print strings */
    insStr[0] = '\0';
    delStr[0] = '\0';

    insToks = 0;
    delToks = 0;
}/*tmkRPoi()*/


/*-----------------------------------------------------------------------------
 * tmkISym - A symbol is to be inserted, collect it for later output, and
 *      construct the requested token for use by the parser.
 *-----------------------------------------------------------------------------
 */
void tmkISym(code, symString, printString, token)
     int code;	/* IN terminal code number */
    char *symString;			/* IN terminal string */
    char *printString;			/* IN the terminals print symbol */
    TmkToken *token;		/* OUT the created scanner symbol */
{
    char *selectedString;

    if (insToks < MaxTokens) {
    /* Concatenate the token string
     */
    if (insToks > 0) strcat(insStr, " ");
    if (code == 0) strcat(insStr, "<unknown token>");
    else if (code == 1) strcat(insStr, "<end of file>");
        else {
            if (*printString != '\0') selectedString = printString;
            else selectedString = symString;
            if (selectedString[0] == '\'') {
                strcat(insStr, &selectedString[1]);
                insStr[strlen(insStr)-1] = '\0';
            } else
                strcat(insStr, selectedString);
        }
    } else if (insToks == MaxTokens) {
    strcat(insStr, " ...");
    }/*if*/
    insToks++;
#define sym token
#define sstr symString
#define pstr printString

    /* Make the requested token
     */
    sym->code = code;
    sym->sval = "";
#undef sym
#undef sstr
#undef pstr
}/*tmkISym()*/


/*-----------------------------------------------------------------------------
 * tmkDSym - The indicated symbol is deleted by the parser, collect its string
 *      for later output.
 *-----------------------------------------------------------------------------
 */
void tmkDSym(token, symString, printString)
    TmkToken *token;		/* IN terminal */
    char *symString;			/* IN terminal string */
    char *printString;			/* IN terminals print string */
{
    char *selectedString;

    if (delToks < MaxTokens) {
    /* Concatenate the symbol strings */
    if (delToks > 0) strcat(delStr, " ");
    if (token->code == 0) strcat(delStr, "<unknown token>");
    else if (token->code == 1) strcat(delStr, "<end of file>");
    else {
#ifdef DELETEIDENTIFIERASINPUTTED
            if (token->code == 2) selectedString = token->chars;
            else
#endif
            if (*printString != '\0') selectedString = printString;
            else selectedString = symString;
            if (selectedString[0] == '\'') {
                strcat(delStr, &selectedString[1]);
                delStr[strlen(delStr)-1] = '\0';
            } else
                strcat(delStr, selectedString);
        }
    } else if (delToks == MaxTokens) {
    strcat(delStr, " ...");
    }/*if*/
    delToks++;
}/*tmkDSym()*/


/*-----------------------------------------------------------------------------
 * tmkMess - An error message should be output, symbol indicates point of error.
 *-----------------------------------------------------------------------------
 * Method:	1 = Symbol(s) insertion        Message:	% inserted
 *		2 = Symbol(s) deletion			% deleted
 *		3 = Symbol(s) replacement		% replaced by %
 *          4 = Stack backup			Malformed phrase
 *		5 = Halted				%. System halted
 *
 * Code:	1 = Unknown token (error token from scanner)
 *		2 = Syntax error
 *		3 = Parse stack overflow
 *		4 = Table error
 *
 * Severity:	1 = Warning
 *		2 = Error (repairable)
 *		3 = Fatal error
 *		4 = System error & Limit error
 *-----------------------------------------------------------------------------
 */
void tmkMess(sym, method, code, severity)
    TmkToken *sym;	/* IN error token */
    int method;			/* IN recovery method */
    int code;			/* IN error classification */
    int severity;		/* IN error severity code */
{
    tmkSev sev;

    switch (severity) {
    case 1: sev = sevWAR; break;
    case 2: sev = sevERR; break;
    case 3: sev = sevFAT; break;
    case 4: sev = sevSYS; break;
    default: sev = sevSYS; break;
    }

    switch (code) {

    case 1:
    /* Unknown symbol, deleted */
    tmkLog(&(sym->srcp), 102, sev, "Unknown Token");
    break;

    case 2:
    /* Syntax Error */
    switch (method) {

    case 1:
        /* Insert */
        tmkLog(&(sym->srcp), 101, sev, insStr);
        break;

    case 2:
        /* Delete */
        tmkLog(&(sym->srcp), 102, sev, delStr);
        break;

    case 3:
        /* Replace */
        delStr[strlen(delStr)+1] = '\0';
        delStr[strlen(delStr)] = tmkSEPARATOR; /* Separator */
        strcat(delStr, insStr);
        tmkLog(&(sym->srcp), 103, sev, delStr);
        break;

    case 4:
        /* Stack backed up */
        tmkLog(&(sym->srcp), 104, sev, "");
        break;

    case 5:
        /* Syntax error, system halted */
        tmkLog(&(sym->srcp), 105, sev, "");
        break;
    }
    break;

    case 3:
    /* Parse stack overflow */
    tmkLog(&(sym->srcp), 106, sev, "");
    break;

    case 4:
    /* Parse table error */
    tmkLog(&(sym->srcp), 107, sev, "");
    break;
    }

    if (method == 5) {
    /* System halted, output informational message */
    tmkLog(&(sym->srcp), 108, sevINF, "");
    }
}/*tmkMess()*/

==> tmkPaSema.c <==
/*----------------------------------------------------------------------*\

    tmkPaSema.c

    ParserMaker generated semantic actions

\*----------------------------------------------------------------------*/

/* %%IMPORT */

#include "tmkScan.h"
#include "tmk.h"
extern tmkContext tmkCext;
/* END %%IMPORT */

/* System dependencies
 * -------------------
 */

/* These datatypes should be defined to be unsigned integers of length 1, 2
 * and 4 bytes respectively.
 */
typedef unsigned char UByte1;
typedef unsigned short UByte2;
typedef unsigned int UByte4;

/* Token and Srcp definition */
#include "tmkCommon.h"

/* Attribute stacks *\
\* ---------------- */
/* %%ATTRIBUTES */
/* The semantic attributes for grammar symbols */
typedef struct tmkGrammar {
    OptNodeP opt;
    TmoNodeP dir;
    TokenAttrListP attr;
    int ival;
    char *sval;
    TmkSrcp srcp;
} tmkGrammar;

/* END %%ATTRIBUTES */

extern short tmkStkP;
extern TmkToken tmkSySt[];
extern tmkGrammar tmkSeSt[];

/* %%DECLARATIONS - User data and routines */


#include <stdio.h>
#include "tmkCommon.h"
#include "tmk_i.h"
#include "tmkList.h"

static Boolean srcpOptional = TRUE;
static char *dummy;

static TokenAttrListP newAttr(name, nameDecl)
  char *name;			/* Attribute name */
  char *nameDecl;		/* Attribute name declaration */
{
  TokenAttrListP p = (TokenAttrListP) malloc(sizeof(TokenAttrList));
  p->name = name;
  p->nameDecl = nameDecl;
  p->next = NULL;
  return p;
}

static OptNodeP newOpt(name, srcp)
  char *name;			/* Option name */
  TmkSrcp srcp;			/* Option srcp */
{
  OptNodeP p = (OptNodeP) malloc(sizeof(OptNode));
  p->name = name;
  p->srcp = srcp;
  p->next = NULL;
  return p;
}


/* END %%DECLARATIONS */


/*----------------------------------------------------------------------------
 * tmkPaSema - The semantic actions
 *----------------------------------------------------------------------------
 */
void tmkPaSema(rule)
int rule;			/* IN production number */
{
    switch (rule) {
          case 1: { /* tmk_document = option_section other_sections; */

          if (!(srcpOptional || tmkEnv->srcpNode))
        /* SRCP section not found */
            tmkLog(NULL, 64, sevERR, "SRCP");
    	break;}
    case 8: { /* option_section =; */

      srcpOptional = TRUE;
    	break;}
    case 9: { /* option_section = '%%OPTIONS' option_directives optional_end; */

      srcpOptional = TRUE;
          setOpts(tmkEnv->optTab, tmkSeSt[tmkStkP+2].dir);
          setCliOpts(tmkEnv->cliTab, tmkEnv->argc, tmkEnv->argv, &dummy);
      tmkEscape = *getStrOpt(tmkEnv->escapeOpt);
    	break;}
    case 12: { /* option_directives = option_directive; */

      tmkSeSt[tmkStkP+1].dir = tmkSeSt[tmkStkP+1].dir;
    	break;}
    case 13: { /* option_directives = option_directives option_directive; */
{
      TmoNodeP p;

      if (tmkSeSt[tmkStkP+1].dir == NULL)
        tmkSeSt[tmkStkP+1].dir = tmkSeSt[tmkStkP+2].dir;
      else {
        for (p = tmkSeSt[tmkStkP+1].dir; p->next; p = p->next);
        p->next = tmkSeSt[tmkStkP+2].dir;
        tmkSeSt[tmkStkP+1].dir= tmkSeSt[tmkStkP+1].dir;
      }
    }	break;}
    case 14: { /* option_directive = identifier ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = tmkSeSt[tmkStkP+1].sval;
      p->srcp = tmkSeSt[tmkStkP+1].srcp;
      p->dirKind = BOOL_TMO;
      p->oval.bval = TRUE;
      p->next = NULL;
      tmkSeSt[tmkStkP+1].dir = p;
    }	break;}
    case 15: { /* option_directive = 'NO' identifier ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = tmkSeSt[tmkStkP+2].sval;
      p->srcp = tmkSeSt[tmkStkP+2].srcp;
      p->dirKind = BOOL_TMO;
      p->oval.bval = FALSE;
      p->next = NULL;
      tmkSeSt[tmkStkP+1].dir = p;
    }	break;}
    case 16: { /* option_directive = identifier NUMBER ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = tmkSeSt[tmkStkP+1].sval;
      p->srcp = tmkSeSt[tmkStkP+1].srcp;
      p->dirKind = NUM_TMO;
      p->oval.ival = tmkSySt[tmkStkP+2].ival;
      p->next = NULL;
      tmkSeSt[tmkStkP+1].dir = p;
    }	break;}
    case 17: { /* option_directive = identifier STRING ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = tmkSeSt[tmkStkP+1].sval;
      p->srcp = tmkSeSt[tmkStkP+1].srcp;
      p->dirKind = STR_TMO;
      p->oval.sval = tmkSySt[tmkStkP+2].sval;
      p->next = NULL;
      tmkSeSt[tmkStkP+1].dir = p;
    }	break;}
    case 18: { /* option_directive = identifier options ';'; */
{
      TmoNodeP p = (TmoNodeP) malloc(sizeof(TmoNode));
      p->name = tmkSeSt[tmkStkP+1].sval;
      p->srcp = tmkSeSt[tmkStkP+1].srcp;
      p->dirKind = SET_TMO;
      p->oval.opts = tmkSeSt[tmkStkP+2].opt;
      p->next = NULL;
          tmkSeSt[tmkStkP+1].dir = p;
    }	break;}
    case 19: { /* options = identifier; */

      tmkSeSt[tmkStkP+1].opt = newOpt(tmkSeSt[tmkStkP+1].sval, tmkSeSt[tmkStkP+1].srcp);
    	break;}
    case 20: { /* options = options ',' identifier; */
{
      OptNodeP p;

      if (tmkSeSt[tmkStkP+1].opt == NULL)
        tmkSeSt[tmkStkP+1].opt = newOpt(tmkSeSt[tmkStkP+3].sval, tmkSeSt[tmkStkP+3].srcp);
      else {
        for (p = tmkSeSt[tmkStkP+1].opt; p->next; p = p->next);
        p->next = newOpt(tmkSeSt[tmkStkP+3].sval, tmkSeSt[tmkStkP+3].srcp);
        tmkSeSt[tmkStkP+1].opt = tmkSeSt[tmkStkP+1].opt;
      }
    }	break;}
    case 21: { /* import_section = '%%IMPORT' optional_end; */

      if (tmkEnv->importSection)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 60, sevERR, "");
      else
        tmkEnv->importSection = tmkNewCode(tmkSySt[tmkStkP+1].fpos, tmkSySt[tmkStkP+1].length);
    	break;}
    case 22: { /* token_section = token_header token_decls optional_end; */
{
          Boolean declFound = FALSE;
          Boolean declOmitted = FALSE;
          TokenAttrListP attrs;

      if (tmkEnv->tokenNode->name == NULL)
            /* Token type must have a name */
        tmkLog(tmkSeSt[tmkStkP+1].srcp, 62, sevERR, "NAME");

      if (tmkEnv->tokenNode->code == NULL)
            /* Token must have a code part */
        tmkLog(tmkSeSt[tmkStkP+1].srcp, 62, sevERR, "CODE");

          /* check declarations */
          if (tmkEnv->tokenNode->codeDecl)
            declFound = TRUE;
          else
            declOmitted = TRUE;

          if (tmkEnv->tokenNode->srcpDecl)
            declFound = TRUE;

          for (attrs = tmkEnv->tokenNode->attrs;
               attrs && (!declFound || !declOmitted);
               attrs = attrs->next)
            if (attrs->nameDecl)
              declFound = TRUE;
            else
              declOmitted = TRUE;

          if (declFound && declOmitted)
            /* If there exists declarations all fields (except SRCP) must have it */
            tmkLog(tmkSeSt[tmkStkP+1].srcp, 65, sevERR, "token");

          srcpOptional = (!declFound || tmkEnv->tokenNode->srcpDecl);
    }	break;}
    case 23: { /* token_header = '%%TOKEN'; */

          tmkEnv->tokenNode = (TokenNodeP) calloc(1,sizeof(TokenNode));
          tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 26: { /* token_decl = 'NAME' identifier ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->tokenNode->name)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else
        tmkEnv->tokenNode->name = tmkSeSt[tmkStkP+2].sval;
    	break;}
    case 27: { /* token_decl = 'CODE' identifier optional_decl ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->tokenNode->code)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->tokenNode->code = tmkSeSt[tmkStkP+2].sval;
        tmkEnv->tokenNode->codeDecl = tmkSeSt[tmkStkP+3].sval;
      }
    	break;}
    case 28: { /* token_decl = 'SRCP' identifier optional_decl ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->tokenNode->srcp)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->tokenNode->srcp = tmkSeSt[tmkStkP+2].sval;
        tmkEnv->tokenNode->srcpDecl = tmkSeSt[tmkStkP+3].sval;
      }
    	break;}
    case 29: { /* token_decl = 'ATTRIBUTES' token_attributes ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->tokenNode->attrs)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else
        tmkEnv->tokenNode->attrs = tmkSeSt[tmkStkP+2].attr;
    	break;}
    case 30: { /* token_attributes = token_attribute; */

      tmkSeSt[tmkStkP+1].attr = tmkSeSt[tmkStkP+1].attr;
    	break;}
    case 31: { /* token_attributes = token_attributes ',' token_attribute; */
{
      TokenAttrListP p;

      if (tmkSeSt[tmkStkP+1].attr == NULL)
        tmkSeSt[tmkStkP+1].attr = tmkSeSt[tmkStkP+3].attr;
      else {
        for (p = tmkSeSt[tmkStkP+1].attr; p->next; p = p->next);
        p->next = tmkSeSt[tmkStkP+3].attr;
        tmkSeSt[tmkStkP+1].attr = tmkSeSt[tmkStkP+1].attr;
      }
    }	break;}
    case 32: { /* token_attribute = identifier optional_decl; */

      tmkSeSt[tmkStkP+1].attr = newAttr(tmkSeSt[tmkStkP+1].sval, tmkSeSt[tmkStkP+2].sval);
    	break;}
    case 33: { /* optional_decl =; */

      tmkSeSt[tmkStkP+1].sval = NULL;
    	break;}
    case 34: { /* optional_decl = '%%'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
    	break;}
    case 35: { /* srcp_section = srcp_header srcp_decls optional_end; */
{
          Boolean declFound = FALSE;
          Boolean declOmitted = FALSE;

      if (tmkEnv->srcpNode->name == NULL)
            /* Source position type must have a name */
        tmkLog(tmkSeSt[tmkStkP+1].srcp, 63, sevERR, "NAME");

          if (tmkEnv->srcpNode->row || tmkEnv->srcpNode->col ||
          tmkEnv->srcpNode->file || tmkEnv->srcpNode->pos) {
            /* check declarations */
            if (tmkEnv->srcpNode->row)
              if (tmkEnv->srcpNode->rowDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->col)
              if (tmkEnv->srcpNode->colDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->file)
              if (tmkEnv->srcpNode->fileDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (tmkEnv->srcpNode->pos)
              if (tmkEnv->srcpNode->posDecl)
                declFound = TRUE;
              else
                declOmitted = TRUE;
            if (declFound && declOmitted)
              /* If there exists declarations all fields must have it */
              tmkLog(tmkSeSt[tmkStkP+1].srcp, 65, sevERR, "srcp");
      } else
            /* Source position must have at least one member */
            tmkLog(tmkSeSt[tmkStkP+1].srcp, 66, sevERR, "");
    }	break;}
    case 36: { /* srcp_header = '%%SRCP'; */

          tmkEnv->srcpNode = (SrcpNodeP) calloc(1,sizeof(SrcpNode));
          tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 39: { /* srcp_decl = 'NAME' identifier ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->srcpNode->name)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else
        tmkEnv->srcpNode->name = tmkSeSt[tmkStkP+2].sval;
    	break;}
    case 40: { /* srcp_decl = 'ROW' identifier optional_decl ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->srcpNode->row)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->row = tmkSeSt[tmkStkP+2].sval;
        tmkEnv->srcpNode->rowDecl = tmkSeSt[tmkStkP+3].sval;
      }
    	break;}
    case 41: { /* srcp_decl = 'COLUMN' identifier optional_decl ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->srcpNode->col)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->col = tmkSeSt[tmkStkP+2].sval;
        tmkEnv->srcpNode->colDecl = tmkSeSt[tmkStkP+3].sval;
      }
    	break;}
    case 42: { /* srcp_decl = 'FILE' identifier optional_decl ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->srcpNode->file)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->file = tmkSeSt[tmkStkP+2].sval;
        tmkEnv->srcpNode->fileDecl = tmkSeSt[tmkStkP+3].sval;
      }
    	break;}
    case 43: { /* srcp_decl = 'POSITION' identifier optional_decl ';'; */

      free(tmkSySt[tmkStkP+1].sval);
      if (tmkEnv->srcpNode->pos)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 61, sevERR, "");
      else {
        tmkEnv->srcpNode->pos = tmkSeSt[tmkStkP+2].sval;
        tmkEnv->srcpNode->posDecl = tmkSeSt[tmkStkP+3].sval;
      }
    	break;}
    case 44: { /* skip_section = SKIPHEADER optional_end; */

      if (tmkEnv->fileType == TMK_FILE)
        tmkLog(tmkSySt[tmkStkP+1].srcp, 51, sevERR, "");
    	break;}
    case 45: { /* identifier = IDENTIFIER; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
        	break;}
    case 46: { /* identifier = 'ATTRIBUTES'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 47: { /* identifier = 'NAME'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 48: { /* identifier = 'CODE'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 49: { /* identifier = 'SRCP'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 50: { /* identifier = 'ROW'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 51: { /* identifier = 'COLUMN'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 52: { /* identifier = 'FILE'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 53: { /* identifier = 'POSITION'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    case 54: { /* identifier = 'NO'; */

      tmkSeSt[tmkStkP+1].sval = tmkSySt[tmkStkP+1].sval;
      tmkSeSt[tmkStkP+1].srcp = tmkSySt[tmkStkP+1].srcp;
    	break;}
    default: break; }
}/*tmkPaSema()*/


==> tmkParse.c <==
/*----------------------------------------------------------------------*\

    tmkParse.c

    ParserMaker generated parser

\*----------------------------------------------------------------------*/

/* %%IMPORT */

#include "tmkScan.h"
#include "tmk.h"
extern tmkContext tmkCext;
/* END %%IMPORT */

#include <strings.h>
#include <memory.h>
#include <setjmp.h>

#include "tmkParse.h"

#define PMTRUE 1
#define PMFALSE 0
typedef unsigned char PmBoolean; /* For logical values */

/* System dependencies */

/* These datatypes should be defined to be unsigned integers of length 1, 2
 * and 4 bytes respectively.
 */
typedef unsigned char UByte1;
typedef unsigned short UByte2;
typedef unsigned int UByte4;

/* Token definition */
#include "tmkCommon.h"

/* %%ATTRIBUTES - The semantic attributes for grammar symbols */
typedef struct tmkGrammar {
    OptNodeP opt;
    TmoNodeP dir;
    TokenAttrListP attr;
    int ival;
    char *sval;
    TmkSrcp srcp;
} tmkGrammar;

/* END %%ATTRIBUTES */

/* Parser constants *\
\* ---------------- */
#define ERROR_ACT 0			/* Action - Error */
#define SHIFT_ACT 1			/* Action - Shift */
#define SHIFTRED_ACT 2		/* Action - Shift_Reduce */
#define REDUCE_ACT 3		/* Action - Reduce */
#define ACCEPT_ACT 4		/* Action - Accept */

#define ERR_SYM 0		/* Error token */
#define ENDMARK 1		/* End of file token code */

/* Recovery method *\
\* --------------- */
#define NONE_REC 0		/* No recovery found */
#define IN_REC 1		/* Insertion of symbol(s) */
#define DEL_REC 2		/* Deletion of symbol(s) */
#define REP_REC 3		/* Replacement of symbol(s) */
#define BAK_REC 4		/* Stack backup */
#define HALT_REC 5		/* System halted */

/* Error class *\
\* ----------- */
#define LEX_ERR 1		/* Non valid scanner symbol found */
#define SYN_ERR 2		/* Normal syntax error */
#define OFLW_ERR 3		/* Parse stack overflow */
#define TAB_ERR 4		/* Parse table error */

/* Error severity *\
\* -------------- */
#define WAR_SEV 1		/* Warnings */
#define ERR_SEV 2		/* Repairable error */
#define FAT_SEV 3		/* Fatal error */
#define SYS_SEV 4		/* System & limit error */

/* Parser constants *\
\* ---------------- */
#define SccMax 22		/* Max scanner code value */
#define TermMin 1		/* Minimum terminal number */
#define Terms 22		/* Number of terminals in grammar */
#define StateMin 1		/* Minimum state number */
#define States 45		/* Number of states */
#define ProdMin 1		/* Minimum production number */
#define Prods 54		/* Number of productions */
#define PmStkMax 32		/* Parse stack size */
#define	PmLaMax 5		/* Look-ahead length */
#define	PmCost 5		/* Shifting cost */

/* Types *\
\* ----- */
typedef unsigned char TermSet[(Terms + TermMin + 7) >> 3]; /* Terminal set */
typedef UByte1 ParseStack[PmStkMax]; /* Parse stack */

/* Terminal table *\
\* -------------- */

typedef struct {
    UByte1 tsym;		/* Normal continuation */
    UByte1 ssym;		/* Separator continuation */
} ContRec;

typedef struct {
    ContRec cont[45];		/* Continuation function */
    TermSet sepa;		/* Separator symbols */
    TermSet fiduc;		/* Fiducial symbols */
    TermSet skip;		/* Symbols to skip */
} RecTab;

typedef struct  {
    UByte2 act[313];		/* Action table */
    UByte1 actCheck[313];	/* Row Displacement Check Vector*/
    UByte2 actRix[45];		/* Action row mapping */
    RecTab recover;		/* Error recovery info */
} TermTab;

static TermTab act = {
{83,267,267,353,274,402,234,153,378,386,394,418,90,83,410,83,83,426,83,362
,114,370,434,218,402,321,329,378,386,394,418,267,267,410,274,274,426,435
,362,434,370,402,435,435,378,386,394,418,322,267,410,83,274,426,346,362
,201,370,267,185,4,274,249,90,83,225,83,83,273,83,434,210,402,146,345,378
,386,394,418,267,267,410,274,274,426,434,362,402,370,330,378,386,394,418
,130,138,410,83,314,426,226,362,338,370,122,73,89,113,0,90,83,0,83,83,434
,83,402,0,137,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386
,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426
,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378
,386,394,418,0,0,410,0,0,426,353,362,402,370,0,378,386,394,418,0,0,410,0
,0,426,434,362,402,370,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370
,0,378,386,394,418,0,0,410,0,0,426,434,362,402,370,0,378,386,394,418,0,0
,410,83,0,426,434,362,402,370,67,378,386,394,418,90,83,410,83,83,426,83
,362,67,370,67,67,83,67,201,297,19,185,0,0,249,0,11,225,90,83,273,83,83
,19,83,19,19,0,19,290,0,186,41,0,49,73,89,113,0,0,0,0,0,0,0,0,0,0,137}
,
{37,19,19,37,19,37,17,17,37,37,37,37,37,37,37,37,37,37,37,37,38,37,38,12
,38,38,38,38,38,38,38,34,25,38,34,25,38,43,38,43,38,43,43,43,43,43,43,43
,26,14,43,21,14,43,35,43,21,43,28,21,1,28,21,21,21,21,21,21,21,21,16,9,16
,41,41,16,16,16,16,11,31,16,11,31,16,18,16,18,16,29,18,18,18,18,39,40,18
,7,23,18,15,18,32,18,44,7,7,7,45,7,7,45,7,7,22,7,22,45,7,22,22,22,22,45
,45,22,45,45,22,24,22,24,22,45,24,24,24,24,45,45,24,45,45,24,27,24,27,24
,45,27,27,27,27,45,45,27,45,45,27,30,27,30,27,45,30,30,30,30,45,45,30,45
,45,30,33,30,33,30,45,33,33,33,33,45,45,33,45,45,33,36,33,36,33,45,36,36
,36,36,45,45,36,45,45,36,8,36,8,36,45,8,8,8,8,45,45,8,45,45,8,10,8,10,8
,45,10,10,10,10,45,45,10,45,45,10,42,10,42,10,45,42,42,42,42,45,45,42,5
,45,42,13,42,13,42,0,13,13,13,13,5,5,13,5,5,13,5,13,0,13,0,0,4,0,20,0,2
,20,45,45,20,45,3,20,4,4,20,4,4,2,4,2,2,45,2,3,45,3,3,45,3,6,6,6,45,45,45
,45,45,45,45,45,45,45,6}
,
{253,60,274,280,270,246,291,97,201,70,216,78,22,246,48,99,67,5,82,0,267
,51,111,97,126,31,47,141,57,88,156,79,101,171,30,53,186,0,19,93,94,72,231
,36,103}
,
{
{{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{9,9}
,{1,1}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{9,9}
,{1,1}
,{20,20}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
,{20,20}
,{1,1}
,{2,2}
,{2,2}
,{2,2}
,{2,2}
,{20,20}
,{2,2}
,{2,2}
}
,
{0,0,0}
,
{0,0,0}
,
{0,0,0}
}
};


/* Non terminal table *\
\* ------------------ */
typedef  struct {
    UByte2 gto[51];		/* Goto table */
    UByte1 gtoRix[45];		/* Goto row mapping */
    UByte1 lhs[54];		/* Left hand side symbols */
    UByte1 rhsz[54];		/* Size of the RHS */
} NonTermTab;

static NonTermTab gto = {
{0,306,161,161,313,81,169,313,58,42,282,57,26,50,17,74,129,34,242,250,145
,98,25,305,106,298,202,194,177,65,337,354,154,178,33,258,170,193,209,217
,233,241,257,265,281,289,97,105,121,162,361}
,
{7,3,18,0,26,21,24,23,3,2,44,33,1,46,2,1,0,1,1,21,24,0,35,1,36,25,1,38,27
,1,40,29,0,42,31,0,2,5,30,0,0,0,47,48,0}
,
{30,39,39,35,35,35,35,38,38,33,33,44,44,42,42,42,42,42,23,23,40,36,34,28
,28,26,26,26,26,43,43,41,37,37,31,29,27,27,24,24,24,24,24,32,25,25,25,25
,25,25,25,25,25,25}
,
{2,0,2,1,1,1,1,0,3,0,1,1,2,2,3,3,3,3,1,3,2,3,1,1,2,3,4,4,3,1,3,2,0,1,3,1
,1,2,3,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1}
};


/* Vocabulary *\
\* ---------- */
typedef struct {
    UByte1 scc;			/* Scanner code value */
    UByte1 iCost;		/* Insertion cost */
    UByte1 dCost;		/* Deletion cost */
    char *name;			/* Name string */
    char *psym;			/* Print name */
} VocTab[22];

static VocTab voc = {{1,255,255,"EndOfText",""}
,{2,1,1,"';'",""}
,{3,1,1,"','",""}
,{4,1,1,"'NO'",""}
,{5,1,1,"'%%'",""}
,{6,1,1,"'ROW'",""}
,{7,1,1,"NUMBER",""}
,{8,1,1,"STRING",""}
,{9,1,1,"'NAME'",""}
,{10,1,1,"'CODE'",""}
,{11,1,1,"'SRCP'",""}
,{12,1,1,"'FILE'",""}
,{13,1,1,"'%%END'",""}
,{14,1,1,"'%%SRCP'",""}
,{15,1,1,"'COLUMN'",""}
,{16,1,1,"'%%TOKEN'",""}
,{17,1,1,"'%%IMPORT'",""}
,{18,1,1,"'POSITION'",""}
,{19,1,1,"SKIPHEADER",""}
,{20,1,1,"IDENTIFIER",""}
,{21,1,1,"'%%OPTIONS'",""}
,{22,1,1,"'ATTRIBUTES'",""}
}
;


/* Variables used in the parsing process *\
\* ------------------------------------- */
short tmkStkP;			/* Stack pointer */
TmkToken tmkSySt[PmStkMax];	/* Symbol stack */
tmkGrammar tmkSeSt[PmStkMax];	/* Semantic stack */
static UByte1 currstat;		/* Current state number */
static UByte1 arg;		/* Argument */
static UByte1 action;		/* Action type */
static PmBoolean endparse;	/* Termination flag */
static ParseStack parsStk;	/* Parse stack */
static UByte1 scIndex[22 + 1]; /* Converts scanner code to internal value */
static TmkToken tokenBuf;	/* Scanner token buffer */
static TmkToken *token = &tokenBuf;	/* Pointer to it for readsymb */


/* Error recovery look-ahead buffer *\
\* -------------------------------- */
static TmkToken la_buff[PmLaMax + 1]; /* Buffer */
static int la_ptr;		/* Current pointer */
static int la_end;		/* Last item */

static jmp_buf pmJmpB;		/* Buffer for long jump */

/* Interface routines *\
\* ------------------ */

extern void tmkRPoi();	/* Error recovery - restart point  */
extern void tmkISym();	/* Error recovery - insert symbol  */
extern void tmkDSym();	/* Error recovery - delete symbol  */
extern void tmkMess();	/* Error recovery - error message  */

/* External functions */
void tmkPaSema();

/*----------------------------------------------------------------------------
 * paAbort - Abort the parsing process
 *----------------------------------------------------------------------------
 */
static void paAbort(token, eClass, severity)
TmkToken *token;		/* IN current token */
short eClass;			/* IN error classification */
short severity;			/* IN error severity code */
{
    tmkMess(token, HALT_REC, eClass, severity);
    longjmp(pmJmpB, PMTRUE);	/* Jump out to top level */
}/*paAbort()*/


/*----------------------------------------------------------------------------
 * SetIns - Add one element to a set
 *----------------------------------------------------------------------------
 */
#define SetIns(set, n) ((set)[(n) >> 3] |= (0x80 >> ((n) & 0x7)))


/*----------------------------------------------------------------------------
 * SetClear - Clear a ParserMaker set
 *----------------------------------------------------------------------------
 */
#define SetClear(set, length) memset((void *)set, 0, ((length) + 7) >> 3)

/*----------------------------------------------------------------------------
 * SetMem - Check member inclusion
 *----------------------------------------------------------------------------
 */
#define SetMem(set, n) ((set)[(n) >> 3] & (0x80 >> ((n) & 0x7)))


/*----------------------------------------------------------------------------
 * paInit - Initialize the parsing process
 *----------------------------------------------------------------------------
 */
static void paInit()
{
    short i;

    la_ptr = 0;
    la_end = 0;
    tmkStkP = 0;
    currstat = 1;
    endparse = PMFALSE;
    parsStk[0] = 1;

    /* Scanner interface */
    for (i = 0; i <= SccMax; i++) scIndex[i] = ERR_SYM;
    for (i = TermMin; i <= Terms; i++) scIndex[voc[i - TermMin].scc] = (UByte1)i;
}/*paInit()*/


/*----------------------------------------------------------------------------
 * pushStat[Tok] - Push the current state on the stack and possibly push current
 *        token on the symbol stack.
 *----------------------------------------------------------------------------
 */
#define MOVETOKEN tmkSySt[tmkStkP] = *token
#define pushStatTok()\
{\
    if (++tmkStkP < PmStkMax) {\
    parsStk[tmkStkP] = currstat;\
    MOVETOKEN;\
    } else {\
    token->code = voc[token->code-TermMin].scc;\
    paAbort(token, OFLW_ERR, SYS_SEV);\
    }\
}

#define pushStat()\
{\
    if (++tmkStkP < PmStkMax) {\
    parsStk[tmkStkP] = currstat;\
    } else {\
    token->code = voc[token->code-TermMin].scc;\
    paAbort(token, OFLW_ERR, SYS_SEV);\
    }\
}



/*----------------------------------------------------------------------------
 * actTbl - Do a look-up in the action table
 *----------------------------------------------------------------------------
 */
#define actTbl(st, sy, action, arg)\
{\
    register int actEnt;\
    register int actSt;\
    register int actSy;\
    actSt = st - StateMin;\
    actSy = sy - TermMin;\
    if (act.actCheck[act.actRix[actSt] + actSy] == actSt)\
    actEnt = act.act[act.actRix[actSt] + actSy];\
    else actEnt = ERROR_ACT;\
    *action = actEnt & 0x7;\
    *arg = actEnt >> 3;\
}/*actTbl()*/


/*----------------------------------------------------------------------------
 * gtoTbl - Do a look-up in the goto table
 *----------------------------------------------------------------------------
 */
#define gtoTbl(st, sy, action, arg)\
{\
    register int gtoEnt;\
    register int gtoSt;\
    register int gtoSy;\
    gtoSt = st - StateMin;\
    gtoSy = sy - Terms - 1;\
    gtoEnt = gto.gto[gto.gtoRix[gtoSt] + gtoSy];\
    *action = gtoEnt & 0x7;\
    *arg = gtoEnt >> 3;\
}/*gtoTbl()*/


/*----------------------------------------------------------------------------
 * E R R O R   R E C O V E R Y
 * ---------------------------
 *
 * The error recovery algorithm tries to modify current configuration in such
 * a way that parsing can be resumed correctly. Current configuration is
 * characterized by:
 *
 * w = x t y, where  x = parsed input
 *           t = current token
 *           y = unprocessed input
 *----------------------------------------------------------------------------
 */

typedef struct {
    TmkToken err_tok;
    TmkToken res_tok;
    short method;
    short eClass;
    short severity;
} ERR_REC;

static ERR_REC errdescr;


/*----------------------------------------------------------------------------
 * ePush - Push a state during error recovery
 *----------------------------------------------------------------------------
 */
static void ePush(state, stack, sp)
UByte1 state;			/* IN state to push */
UByte1 stack[];			/* INOUT parser stack */
short *sp;			/* INOUT current stack pointer */
{
    if (++(*sp) < PmStkMax) stack[*sp] = state;
    else paAbort(&errdescr.err_tok, OFLW_ERR, SYS_SEV);
}/*ePush()*/


/*----------------------------------------------------------------------------
 * legalAct - Check if a symbol is legal to shift in current state
 *----------------------------------------------------------------------------
 */
static PmBoolean legalAct(stack, stack_p, sym)
UByte1 stack[];			/* IN current stack */
short stack_p;			/* IN current stack pointer */
UByte1 sym;			/* IN symbol code */
                /* RET true if "symbol" is read (shifted) */
                /*     in current state */
{
    UByte1 state;		/* Current state */
    UByte1 action;		/* Current parser action */
    UByte1 arg;			/* Current parser argument */

    ParseStack t_stk;		/* Temporary parser stack */
    int i;			/* For loop index */

    /* Copy stack
     */
    for (i = 0; i <= stack_p; i++) t_stk[i] = stack[i];

    state = stack[stack_p];

    for (;;) {
    actTbl(state, sym, &action, &arg);
    switch (action) {

    case ERROR_ACT:
        return(PMFALSE);

    case SHIFT_ACT:
    case SHIFTRED_ACT:
    case ACCEPT_ACT:
        return(PMTRUE);

    case REDUCE_ACT:
        do {
        stack_p = stack_p - gto.rhsz[arg - ProdMin];
        gtoTbl(t_stk[stack_p], gto.lhs[arg - ProdMin], &action, &arg);
        ePush(state, t_stk, &stack_p);
        } while (action != SHIFT_ACT);
        state = arg; t_stk[stack_p] = state;
        break;

    }/*switch*/
    }/*for*/
}/*legalAct()*/


/*----------------------------------------------------------------------------
 * gLegSym - Get legal symbols
 *----------------------------------------------------------------------------
 */
static void gLegSym(stack, stack_p, legals)
ParseStack stack;		/* IN current stack */
short stack_p;			/* IN current stack pointer */
TermSet legals;			/* OUT legal symbols in current state */
{
    short sym;			/* Loop index */

    SetClear(legals, Terms + 1);
    for (sym = 1; sym <= Terms; sym++) {
    if (legalAct(stack, stack_p, sym)) SetIns(legals, sym);
    }/*for*/
}/*gLegSym()*/


/*----------------------------------------------------------------------------
 * backup - Backup the parse stack until current symbol is accepted (shifted)
 *      or the parse stack becomes empty
 *----------------------------------------------------------------------------
 */
static short backup(stack, stack_p, sym)
ParseStack stack;		/* IN current stack */
short stack_p;			/* IN current stack pointer */
UByte1 sym;	/* IN recovery symbol */
                /* RET new stack pointer, 0 if symbol is */
                /*     not accepted */
{
    while ((stack_p > 0) && (!legalAct(stack, stack_p, sym))) stack_p--;
    return(stack_p);
}/*backup()*/


/*----------------------------------------------------------------------------
 * delSym - Delete a symbol in the input stream
 *----------------------------------------------------------------------------
 */
static void delSym(token)
TmkToken *token;			/* INOUT symbol to delete, new symbol */
{
    short  t;

    t = token->code - TermMin;
    token->code = voc[t].scc;
    tmkDSym(token, voc[t].name, voc[t].psym);
{
    if (la_ptr < la_end) {
    la_ptr++;
    *token = la_buff[la_ptr];
    } else {
    do {
        
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else token->code = scIndex[token->code];
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }
    } while (token->code == ERR_SYM);
    }
}
    if (errdescr.method == IN_REC) errdescr.method = REP_REC;
    else if (errdescr.method != REP_REC) errdescr.method = DEL_REC;
}/*delSym()*/


/*----------------------------------------------------------------------------
 * inSym - Insert a symbol in the input stream
 *----------------------------------------------------------------------------
 */
static void inSym(isym, gen_symb)
short isym;			/* IN symbol code to insert */
TmkToken *gen_symb;		/* OUT created symbol */
{
    tmkISym(voc[isym - TermMin].scc, voc[isym - TermMin].name,
       voc[isym - TermMin].psym, gen_symb);
    if (errdescr.method == DEL_REC) errdescr.method = REP_REC;
    else if (errdescr.method != REP_REC) errdescr.method = IN_REC;

    gen_symb->code = isym;
}/*inSym()*/


/*----------------------------------------------------------------------------
 * M U L T I P L E   R E C O V E R Y
 * ---------------------------------
 *
 * The multiple symbols recovery technique is a "true local corrector", i.e.
 * it will always return a legal configuration for any input. Logically the
 * algorithm can be described as follows:
 *
 * 1) Roerich method (Karlsruhe):
 *    a. Find a continuation "u" of "x", such that "xu" is accepted.
 *    b. De composite "ty" into "qsy'", where q is a string.
 *    c. Delete "q".
 *    d. Insert u' (a prefix of u) between "x" and "sy'" giving xu' s y'.
 *
 * 2) Panic mode:
 *    If "q" contains a fiducial symbol "a"  then:
 *    a. Pop stack until "a" is accepted.
 *    b. If not succeeded resume at step 1.
 *----------------------------------------------------------------------------
 */

typedef struct {
    UByte1 r_state;		/* Recovery state */
    PmBoolean r_sepa;		/* Insert separator? */
    UByte1 r_sstat;		/* Where to insert separator */
} REC_POI;


/*----------------------------------------------------------------------------
 * acceptbl - Check whether "symbol" is reachable from current state using
 *        the continuation grammar.
 *----------------------------------------------------------------------------
 */
static void acceptbl(sym, stack, stack_p, token, found, point)
UByte1 sym;			/* IN terminal symbol code */
ParseStack stack;		/* IN parse stack */
short stack_p;			/* IN stack pointer */
TmkToken *token;			/* IN current token */
PmBoolean *found;		/* OUT "symbol" accepted? */
REC_POI *point;			/* OUT recovery point description */
{
    PmBoolean done;		/* Terminator flag */
    UByte1 state;		/* Current state */
    UByte1 action;		/* Parser action */
    UByte1 sep_act;		/* Parser action separator test */
    UByte1 arg;			/* Parser prod/state */
    UByte1 sep_arg;		/* Parser prod/state separator test */
    PmBoolean sepa_acc;		/* Separator is accepted? */
    ParseStack t_stk;		/* Temporary parser stack */
    short i;			/* Copy loop index */

    for (i = 0; i <= stack_p; i++) t_stk[i] = stack[i];

    state = t_stk[stack_p];
    done = PMFALSE;

    while (!done) {
    actTbl(state, sym, &action, &arg);
    if (legalAct(t_stk, stack_p, sym)) {
        /* Symbol is directly accepted */
        done = PMTRUE;
        *found = PMTRUE;
        point->r_state = state;
    } else {
        /* Use the continuation grammar */
        actTbl(state, act.recover.cont[state - StateMin].tsym, &action,
           &arg);
        actTbl(state, act.recover.cont[state - StateMin].ssym, &sep_act,
           &sep_arg);
        if ((action != sep_act) || (arg != sep_arg)) {
        /* A separator is legal. Check if current symbol is accepted
         * behind the separator
         */
            ParseStack stk;	/* Temporary stack */
            short sp;	/* Temporary stack pointer */

        sp = stack_p;
        for (i = 0; i <= stack_p; i++) stk[i] = t_stk[i];
        sepa_acc = PMFALSE;

        while (!sepa_acc) {
          actTbl(stk[sp], act.recover.cont[state - StateMin].ssym,
             &sep_act, &sep_arg);
            switch (sep_act) {

            case ERROR_ACT:
            case ACCEPT_ACT:
            sepa_acc = PMTRUE;
            break;

            case SHIFT_ACT:
            sepa_acc = PMTRUE;
            ePush(sep_arg, stk, &sp);
            break;

            case SHIFTRED_ACT:
            ePush(1, stk, &sp);
            sepa_acc = PMTRUE;
            goto reduce;

            case REDUCE_ACT:
              reduce:
            do {
                sp -= gto.rhsz[sep_arg-ProdMin];
                gtoTbl(stk[sp], gto.lhs[sep_arg-ProdMin], &sep_act,
                   &sep_arg);
                ePush(1, stk, &sp);
            } while (sep_act != SHIFT_ACT);

            stk[sp] = sep_arg;
            break;
            }/*switch*/
        }/*while*/

        if ((sep_act == SHIFT_ACT) || (sep_act == SHIFTRED_ACT)) {
            if (legalAct(stk, sp, sym)) {
            /* Separator is to be inserted */
            point->r_state = stk[sp];
            point->r_sepa = PMTRUE;
            point->r_sstat = state;
            done = PMTRUE;
            *found = PMTRUE;
            }/*if*/
        }/*if*/
        }/*if*/

        if (!*found) {
        switch (action) {

        case ERROR_ACT:
            paAbort(token, TAB_ERR, SYS_SEV);
            break;

        case ACCEPT_ACT:
            done = PMTRUE;
            break;

        case SHIFT_ACT:
            state = arg;
            ePush(state, t_stk, &stack_p);
            break;

        case SHIFTRED_ACT:
            ePush(state, t_stk, &stack_p);
            goto reduce2;

        case REDUCE_ACT:
          reduce2:
            do {
            stack_p -= gto.rhsz[arg-ProdMin];
            gtoTbl(t_stk[stack_p], gto.lhs[arg-ProdMin], &action,
                   &arg);
            ePush(state, t_stk, &stack_p);
            } while (action != SHIFT_ACT);

            state = arg;
            t_stk[stack_p] = state;
            break;

        }/*switch*/
        }/*if*/
    }/*if*/
    }/*while*/
}/*acceptbl()*/


/*----------------------------------------------------------------------------
 * search - Search recovery point
 *----------------------------------------------------------------------------
 */
static void search(stack, stack_p, token, point)
ParseStack stack;		/* IN current stack */
short *stack_p;			/* INOUT current stack pointer */
TmkToken *token;			/* INOUT current symbol */
REC_POI *point;			/* OUT descriptor of where to restart */
                /*     the parser */
{
    UByte1 state;		/* Current state */
    PmBoolean rp_found;		/* Recovery point found? */
    short new_stkp;		/* Temp stack pointer */

    state = stack[*stack_p];
    point->r_state = state;
    point->r_sepa = PMFALSE;
    point->r_sstat = 1;
    rp_found = PMFALSE;

    do {
    if (!SetMem(act.recover.skip, token->code)) {
        acceptbl(token->code, stack, *stack_p, token, &rp_found, point);
    }/*if*/

    if (!rp_found) {
        new_stkp = 0;
        if (SetMem(act.recover.fiduc, token->code)) {
        new_stkp = backup(stack, *stack_p, token->code);
        }/*if*/
        if (new_stkp > 0) {
        rp_found = PMTRUE;
        *stack_p = new_stkp;
        point->r_state = stack[*stack_p];
        errdescr.method = BAK_REC;
        } else
            delSym(token);
    }/*if*/
    } while (!rp_found);
}/*search()*/


/*----------------------------------------------------------------------------
 * reach - Use the continuation functions and insert symbols upto curr token.
 *----------------------------------------------------------------------------
 */
static void reach(stack, stack_p, token, point)
ParseStack stack;		/* INOUT current stack */
short *stack_p;			/* INOUT current stack pointer */
TmkToken *token;			/* INOUT current symbol */
REC_POI *point;			/* IN recovery point descriptor */
{
    UByte1 state;		/* Current state */
    UByte1 cont_sym;		/* Continuation symbol */
    TmkToken gen_symb;		/* Generated symbol */
    UByte1 action;		/* Current parser action */
    UByte1 arg;			/* Current prod/state */
    PmBoolean sepaAccept;	/* Separator accepted yet? */
    PmBoolean useSepa;		/* Use the separator now? */

    state = stack[*stack_p];
    gen_symb = *token;
    useSepa = PMFALSE;
    while (state != point->r_state) {
    if (point->r_sepa)
        if (state == point->r_sstat) {
        /* Separator state reached, remember to use separator */
        cont_sym = act.recover.cont[state-StateMin].ssym;
        useSepa = PMTRUE;
        } else cont_sym = act.recover.cont[state-StateMin].tsym;
    else cont_sym = act.recover.cont[state-StateMin].tsym;
    sepaAccept = PMFALSE;

    do {
      actTbl(state, cont_sym, &action, &arg);
      switch (action) {

      case ERROR_ACT:
        paAbort(token, TAB_ERR, SYS_SEV);
        break;

      case ACCEPT_ACT:
        break;

      case SHIFT_ACT:
        sepaAccept = PMTRUE;
        state = arg;
        inSym(cont_sym, &gen_symb);
        ePush(state, stack, stack_p);
        tmkSySt[*stack_p] = gen_symb;
        break;

      case SHIFTRED_ACT:
        sepaAccept = PMTRUE;
        inSym(cont_sym, &gen_symb);
        ePush(state, stack, stack_p);
        tmkSySt[*stack_p] = gen_symb;
        goto reduce;

      case REDUCE_ACT:
        reduce:
        do {
        *stack_p = *stack_p - gto.rhsz[arg-ProdMin];
        tmkPaSema(arg);
        gtoTbl(stack[*stack_p], gto.lhs[arg-ProdMin], &action, &arg);
        ePush(state, stack, stack_p);
        } while (action != SHIFT_ACT);
        state = arg;
        stack[*stack_p] = state;
      }/*switch*/
    } while (useSepa && !sepaAccept);
    }/*while*/
}/*reach()*/


/*----------------------------------------------------------------------------
 * global - Global error recovery
 *----------------------------------------------------------------------------
 */
static void multiple(err_stk, err_stkp, err_tok, newstat)
ParseStack err_stk;		/* INOUT current parse stack */
short *err_stkp;		/* INOUT current stack pointer */
TmkToken *err_tok;		/* INOUT current token */
UByte1 *newstat;		/* OUT state after recovery */
{
    REC_POI  point;		/* Recovery point descriptor */

    search(err_stk, err_stkp, err_tok, &point);
    reach(err_stk, err_stkp, err_tok, &point);
    *newstat = err_stk[*err_stkp];
}/*multiple()*/


/*----------------------------------------------------------------------------
 * S I N G L E   R E C O V E R Y
 * -----------------------------
 *
 * The single recovery technique tries to REPAIR the error by finding the
 * least cost single symbol correction. One single symbol of:
 * - insertion
 * - deletion
 * - replacement
 * is concidered. The cost of the repair is the sum of the ADAPTION cost and
 * the MODIFICATION cost. The adaption cost indicates how well a correction
 * fits in the context. The modification cost is based on the
 * insertion/deletion cost given in the input. A correction is applied if
 * the cost is below a predefined threshold value.
 *----------------------------------------------------------------------------
 */

#define ShiftCost (PmCost)	/* The cost of shifting one symbol */
#define InfCost (ShiftCost * (PmLaMax)) /* Infinity */
#define Thresh (((PmLaMax) - 3) * ShiftCost) /* Acceptance cost */


/*----------------------------------------------------------------------------
 * readLa - Read tokens to the look-ahead buffer
 *----------------------------------------------------------------------------
 */
static void readLa(curtok)
TmkToken *curtok;			/* IN current token */
{
    int i;
    TmkToken tokbuf;
    TmkToken *token = &tokbuf;

    la_buff[0] = *curtok;
    *token = *curtok;
    for (i = la_ptr + 1; i <= la_end; i++) {
    /* Move old look_ahead to the beginning of the buffer */
    la_buff[i - la_ptr] = la_buff[i];
    }/*for*/
    la_end = la_end - la_ptr;
    la_ptr = -1;

    while ((la_buff[la_end].code != ENDMARK) && (la_end < PmLaMax)) {
    la_end++;
    do {
            
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else {
        token->code = scIndex[token->code];
        }/*if*/
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }/*if*/
    } while (token->code == ERR_SYM);
    la_buff[la_end] = *token;
    }/*while*/
}/*readLa()*/


/*----------------------------------------------------------------------------
 * rdLaSym - Fetches the i:th look-ahead symbol code from the look-ahead set
 *----------------------------------------------------------------------------
 */
static UByte1 rdLaSym(index)
char index;			/* IN i:th look-ahead symbol */
                /* RET token code */
{
    if (index > la_end) return(ENDMARK);
    else return(la_buff[(int)index].code);
}/*rdLaSym()*/


/*----------------------------------------------------------------------------
 * laParse - Continue the parsing process by reading tokens from the
 *       look-ahead set. The parse is terminated when:
 *       - out of read ahead
 *       - a new error is encountered
 *       Note! No semantic actions are carried out
 *----------------------------------------------------------------------------
 */
static void laParse(sym, next_la, stack, stack_p, cost)
UByte1 sym;			/* IN current terminal symbol */
char next_la;			/* IN index to next look-ahead symbol */
ParseStack stack;		/* IN parse stack */
short stack_p;			/* IN current stack pointer */
short *cost;			/* OUT adaption cost */
{
    PmBoolean done ;		/* Terminator flag */
    char sh_cnt;		/* Number of shifted symbols */
    UByte1 state;		/* Current state number */
    UByte1 action;		/* Parser action */
    UByte1 arg;      /* Parser argument */
    short i;			/* Loop index */
    ParseStack t_stk;		/* Temporary stack */

    /* Copy stack
     */
    for (i = 0; i <= stack_p; i++) t_stk[i] = stack[i];

    done = PMFALSE;
    sh_cnt = 0;
    state = t_stk[stack_p];

    while (!done) {
    actTbl(state, sym, &action, &arg);

    switch (action) {

    case ERROR_ACT:
        done = PMTRUE;
        break;

    case SHIFT_ACT:
        state = arg;
        ePush(state, t_stk, &stack_p);
        sh_cnt++;
        if (sh_cnt == PmLaMax) done = PMTRUE;
        else {
        sym = rdLaSym(next_la);
        next_la++;
        }/*if*/
        break;

    case SHIFTRED_ACT:
        ePush(state, t_stk, &stack_p);
        sh_cnt++;
        if (sh_cnt == PmLaMax) done = PMTRUE;
        else {
        sym = rdLaSym(next_la);
        if (next_la < PmLaMax) next_la++;
        }/*if*/
        goto reduce;

    case REDUCE_ACT:
      reduce:
        do {
        stack_p -= gto.rhsz[arg-ProdMin];
        gtoTbl(t_stk[stack_p], gto.lhs[arg-ProdMin], &action, &arg);
        ePush(state, t_stk, &stack_p);
        } while (action != SHIFT_ACT);

        state = arg;
        t_stk[stack_p] = state;
        break;

    case ACCEPT_ACT:
        done = PMTRUE;
        sh_cnt = PmLaMax;
        break;

    }/*switch*/
    }/*while*/

    *cost = InfCost - (sh_cnt*ShiftCost);
}/*laParse()*/


/*----------------------------------------------------------------------------
 * tryIn - Tries to insert a symbol from the legal set in front of current
 *	   token: x t y  => x st y, where s becomes current symbol
 *----------------------------------------------------------------------------
 */
static void tryIn(legals, stack, stack_p, sym, cost, choice)
TermSet legals;			/* IN set of legal symbols */
ParseStack stack;		/* IN current parser stack */
short stack_p;			/* IN current stack pointer */
UByte1 *sym;			/* OUT best insertion symbol */
short *cost;			/* OUT best cost so far */
short *choice;			/* OUT best choice so far */
{
    short i;
    short mod_cost;		/* Modification cost */
    short ad_cost;		/* Adaption cost */
    short tot_cost;		/* Total insertion cost */

    for (i = 1; i <= Terms; i++) {
    /* For all legal symbols
     */
    if (SetMem(legals, i)) {
        mod_cost = voc[i - TermMin].iCost;
        if (mod_cost < *cost) {
        laParse(i, 0, stack, stack_p, &ad_cost);
        tot_cost = ad_cost + mod_cost;
        if (tot_cost < *cost) {
            *cost = tot_cost;
            *choice = IN_REC;
            *sym = (UByte1)i;
        }/*if*/
        }/*if*/
    }/*if*/
    }/*for*/
}/*tryIn()*/


/*----------------------------------------------------------------------------
 * tryRep - Tries to replace currrent symbol with a new terminal:
 *      x t y  => x s y, where s becomes current symbol
 *----------------------------------------------------------------------------
 */
static void tryRep(legals, stack, stack_p, sym, cost, choice)
TermSet legals;			/* IN set of legal symbols */
ParseStack stack;		/* IN current parser stack */
short stack_p;			/* IN current stack pointer */
UByte1 *sym;			/* OUT best replacement symbol */
short *cost;			/* OUT best cost so far */
short *choice;			/* OUT best choice so far */
{
    short i;
    short mod_cost;		/* Modification cost */
    short ad_cost;		/* Adaption cost */
    short tot_cost;		/* Total replacment cost */

    for (i = 1; i <= Terms; i++) {
    /* For all legal symbols
     */
    if (SetMem(legals, i)) {
        mod_cost = (short) (voc[i-TermMin].iCost +
            voc[rdLaSym(0)-TermMin].dCost) / 2 + 1;
        if (mod_cost < *cost) {
        laParse(i, 1, stack, stack_p, &ad_cost);
        tot_cost = ad_cost + mod_cost;
        if (tot_cost < *cost) {
            *cost = tot_cost;
            *choice = REP_REC;
            *sym = (UByte1)i;
        }/*if*/
        }/*if*/
    }/*if*/
    }/*for*/
}/*tryRep()*/


/*----------------------------------------------------------------------------
 * tryDel - Tries to delete current symbol: x t y  => x y
 *----------------------------------------------------------------------------
 */
static void tryDel(stack, stack_p, cost, choice)
ParseStack stack;		/* IN current parser stack */
short stack_p;			/* IN current stack pointer */
short *cost;			/* INOUT best cost so far */
short *choice;			/* INOUT best choice so far */
{
    short mod_cost;		/* Modification cost */
    short ad_cost;          /* Adaption cost */
    short tot_cost;		/* Total deletion cost */

    mod_cost = voc[rdLaSym(0) - TermMin].dCost;
    if (mod_cost < *cost) {
    laParse(rdLaSym(1), 2, stack, stack_p, &ad_cost);
    tot_cost = ad_cost + mod_cost;
    if (tot_cost < *cost) {
        *cost = tot_cost;
        *choice = DEL_REC;
    }/*if*/
    }/*if*/
}/*tryDel()*/


/*----------------------------------------------------------------------------
 * _pmInsert
 *----------------------------------------------------------------------------
 */
static void _pmInsert(sym, token)
UByte1 sym;			/* IN symbol code to insert */
TmkToken *token;			/* OUT constructed token */
{
    inSym(sym, token);
}/*_pmInsert()*/


/*----------------------------------------------------------------------------
 * _pmReplace
 *----------------------------------------------------------------------------
 */
static void _pmReplace(sym, token)
UByte1 sym;			/* IN replacement symbol code */
TmkToken *token;			/* OUT constructed token */
{
    delSym(token);
    inSym(sym, token);
}/*_pmReplace()*/


/*----------------------------------------------------------------------------
 * _pmDelete
 *----------------------------------------------------------------------------
 */

static void _pmDelete(token)
TmkToken *token;			/* OUT new token */
{
{
    if (la_ptr < la_end) {
    la_ptr++;
    *token = la_buff[la_ptr];
    } else {
    do {
        
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else token->code = scIndex[token->code];
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }
    } while (token->code == ERR_SYM);
    }
}
    delSym(token);
}/*_pmDelete()*/


/*----------------------------------------------------------------------------
 * single - Single error recovery
 *----------------------------------------------------------------------------
 */
static void single(leg_sys, err_stk, err_stkp, token, newstat)
TermSet leg_sys;		/* IN legal symbols in current state */
ParseStack err_stk;		/* INOUT current parser stack */
short *err_stkp;		/* INOUT current stack pointer */
TmkToken *token;		/* INOUT current token */
UByte1 *newstat;		/* OUT recovery state */
{
    short choice;		/* Recovery action performed */
    short cost;			/* Best cost so far */
    UByte1 sym;			/* Insert symbol */

    choice = NONE_REC;
    cost = InfCost;
    readLa(token);

    tryIn(leg_sys, err_stk, *err_stkp, &sym, &cost, &choice);
    tryRep(leg_sys, err_stk, *err_stkp, &sym, &cost, &choice);
    tryDel(err_stk, *err_stkp, &cost, &choice);

    if (cost > Thresh) choice = NONE_REC;

    switch (choice) {

    case IN_REC:
    _pmInsert(sym, token);
    break;

    case DEL_REC:
    _pmDelete(token);
    break;

    case REP_REC:
    _pmReplace(sym, token);
    break;

    default:
{
    if (la_ptr < la_end) {
    la_ptr++;
    *token = la_buff[la_ptr];
    } else {
    do {
        
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else token->code = scIndex[token->code];
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }
    } while (token->code == ERR_SYM);
    }
}
    }/*switch*/

    *newstat = err_stk[*err_stkp];
}/*single()*/



/*----------------------------------------------------------------------------
 * recover - From an error
 *----------------------------------------------------------------------------
 */
static void recover(err_stk, err_stkp, err_symb, rec_stat)
ParseStack err_stk;		/* INOUT updated parse stack */
short *err_stkp;		/* INOUT updated stack pointer */
TmkToken *err_symb;		/* INOUT current token */
UByte1 *rec_stat;		/* OUT state after recovery */
{
    TermSet legal_sy;		/* Legal symbols */

    errdescr.err_tok = *err_symb;
    errdescr.err_tok.code = voc[errdescr.err_tok.code - TermMin].scc;
    errdescr.method = NONE_REC;
    errdescr.eClass = SYN_ERR;
    errdescr.severity = ERR_SEV;
    gLegSym(err_stk, *err_stkp, legal_sy);
    single(legal_sy, err_stk, err_stkp, err_symb, rec_stat);
    if (errdescr.method == NONE_REC) {
    multiple(err_stk, err_stkp, err_symb, rec_stat);
    tmkMess(&errdescr.err_tok, errdescr.method, errdescr.eClass,
           errdescr.severity);
    } else {
    tmkMess(&errdescr.err_tok, errdescr.method, SYN_ERR, errdescr.severity);
    }/*if*/
    errdescr.res_tok = *err_symb;
    errdescr.res_tok.code = voc[errdescr.res_tok.code - TermMin].scc;
    tmkRPoi(&errdescr.res_tok);
}/*recover()*/


/*----------------------------------------------------------------------------
 * tmkParse - Parser routine, entry point
 *----------------------------------------------------------------------------
 */
void tmkParse()
{
    paInit();
{
    if (la_ptr < la_end) {
    la_ptr++;
    *token = la_buff[la_ptr];
    } else {
    do {
        
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else token->code = scIndex[token->code];
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }
    } while (token->code == ERR_SYM);
    }
}
    pushStatTok()
    if (setjmp(pmJmpB)) return;

    while (!endparse) {
    actTbl(currstat, token->code, &action, &arg);

    switch (action) {

    case ERROR_ACT:
        recover(parsStk, &tmkStkP, token, &currstat);
        if (tmkStkP == 0) endparse = PMTRUE;
        break;

    case SHIFT_ACT:
        currstat = arg;
        pushStatTok();
{
    if (la_ptr < la_end) {
    la_ptr++;
    *token = la_buff[la_ptr];
    } else {
    do {
        
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else token->code = scIndex[token->code];
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }
    } while (token->code == ERR_SYM);
    }
}
        break;

    case SHIFTRED_ACT:
        pushStatTok();
{
    if (la_ptr < la_end) {
    la_ptr++;
    *token = la_buff[la_ptr];
    } else {
    do {
        
tmkScan(tmkCext, token);

        if (token->code > SccMax || token->code < 0) {
        token->code = ERR_SYM;
        } else token->code = scIndex[token->code];
        if (token->code == ERR_SYM) {
        tmkMess(token, DEL_REC, LEX_ERR, FAT_SEV);
        }
    } while (token->code == ERR_SYM);
    }
}
        goto reduce;

    case REDUCE_ACT:
      reduce:
        do {
        tmkStkP -= gto.rhsz[arg - ProdMin];
        tmkPaSema(arg);
        gtoTbl(parsStk[tmkStkP], gto.lhs[arg - ProdMin], &action, &arg);
        pushStat();
        } while (action != SHIFT_ACT);

        currstat = arg;
        parsStk[tmkStkP] = currstat;
        break;

    case ACCEPT_ACT:
        endparse = PMTRUE;
        break;
    }/*switch*/
    }/*while*/
}/*tmkParse()*/


==> tmkParse.h <==
#ifndef _tmkParse_h_
#define _tmkParse_h_
/*----------------------------------------------------------------------*\

  tmkParse.h

  Parser interface

\*----------------------------------------------------------------------*/


/* Token and Srcp definition */
#include "tmkCommon.h"

/* External functions */
extern void tmkParse(); /* Parser */


#endif
