%%SET tmkTokenName("SmkToken")
%%SET tmkTokenCode("code")
%%SET tmkTokenSrcp("srcp")
%%SET tmkTokenDecl (" int code", " TmkSrcp srcp", " Action action", " Name name", " double fnumber", " int inumber")
%%SET tmkSrcpName("TmkSrcp")
%%SET tmkSrcpRow("line")
%%SET tmkSrcpCol("col")
%%SET tmkSrcpFile("file")
%%BEGIN(tmkImport)

#include "tmkCommon.h"
#include "name.h"
#include "action.h"
%%END(tmkImport)
%%SET tmkForce(0)
%%SET tmkOs("SunOS")
%%SET pmkOs("SunOS")
%%SET currentOs("SunOS")
%%SET tmkTarget("c")
%%SET pmkTarget("c")
%%SET tmkLibrary("%%(TMHOME)/lib/%%(tmkTarget)/")
%%SET pmkLibrary("..")
%%SET tmkPrefix("smk")
%%SET parserPrefix("smk")
%%SET listerPrefix("smk")
%%SET tmkCodeDecl(" int code")
%%SET tmkGrmAttrDecl(" Action action", " AST ast", " Name name", " double fnumber", " int inumber", " TmkSrcp srcp")
%%SET tmkGrmAttrNames("action", "ast", "name", "fnumber", "inumber", "srcp")
%%BEGIN(pmkImport)

#include <stdio.h>
#include "smk_i.h"
#include "smkScan.h"
#include "smkList.h"
#include "ast.h"
#include "definition.h"
#include "name.h"
#include "scanner.h"
#include "token.h"
#include "voc.h"
#include "set.h"
#include "map.h"
#include "pack.h"
#include "action.h"
extern smkContext lexContext;
%%END(pmkImport)
%%PROCESS("%%(tmkLibrary)/Common.imp")
%%SET pmStackMax(32)
%%SET pmLookAheadMax(5)
%%SET pmCost(5)
%%BEGIN(pmIScan)
 smkScan(lexContext, token);
%%END(pmIScan)
%%BEGIN(pmISym)

    /* Make the requested token
     */
    sym->code = code;
    sym->name=nameSearch("<PARSE ERROR>");
    sym->srcp.file=1;
%%END(pmISym)
%%SET pmOptimize(Lr0)
%%SET pmActPack(RDS)
%%SET pmGtoPack(RDS)
%%SET pmRec(Single, Multiple, Panic)
%%SET pmHeader("PMK -- ParserMaker 2.1(16) (1997-07-28 17:37)")
%%SET pmVersion("2.1")
%%SET pmCorrection("16")
%%BEGIN(pmDecl)
extern Scanner grmScanner;		/* Current scanner */
extern TokenType grmTokenType;		/* Current token type */
%%END(pmDecl)
%%SET pmStates(84)
%%SET pmStateTyp(1)
%%SET pmTerms(71)
%%SET pmTermTyp(1)
%%SET pmActTyp(2)
%%SET pmArgTyp(1)
%%SET pmActRDSvectorLen(1552)
%%BEGIN(pmActTab)
{11,529,683,434,683,683,690,698,706,257,161,514,683,683,683,683,683,683
,683,683,683,683,683,683,683,683,683,683,683,683,683,683,683,683,683,683
,683,683,683,683,683,714,273,442,291,683,683,233,547,274,683,683,683,683
,1050,659,4,659,659,683,683,291,585,81,683,770,305,659,818,882,906,930,659
,794,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,1050,802,659
,810,898,1034,409,363,363,81,1010,1018,299,129,345,858,962,866,1026,1050
,651,242,651,651,786,946,363,401,730,986,770,305,651,818,882,906,930,651
,794,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,1050,802,651
,810,898,1034,1042,129,345,738,1010,1018,129,345,233,858,962,866,1026,449
,393,1042,299,778,786,946,289,770,305,986,818,882,906,930,394,794,826,834
,842,850,874,890,914,922,938,954,970,978,994,1002,1050,802,1042,810,898
,1034,1042,355,355,346,1010,1018,138,619,131,858,962,866,1026,483,722,530
,99,209,786,946,355,505,417,986,626,193,522,131,483,483,483,483,131,483
,483,483,483,483,483,483,483,483,483,483,483,483,483,483,538,483,0,483,483
,483,0,483,561,0,483,483,0,483,483,483,483,483,483,499,0,595,0,0,483,483
,0,83,483,483,0,0,83,0,499,499,499,499,602,499,499,499,499,499,499,499,499
,499,499,499,499,499,499,499,0,499,185,499,499,499,0,499,403,403,499,499
,0,499,499,499,499,499,499,131,0,595,0,0,499,499,0,369,499,499,0,0,0,0,818
,882,906,930,602,794,826,834,842,850,874,890,914,922,938,954,970,978,994
,1002,0,802,185,810,898,1034,0,138,403,403,1010,1018,0,131,131,858,962,866
,1026,491,0,595,0,0,786,946,0,369,131,986,0,0,0,0,491,491,491,491,602,491
,491,491,491,491,491,491,491,491,491,491,491,491,491,491,0,491,185,491,491
,491,0,491,0,0,491,491,0,491,491,491,491,491,491,499,0,0,0,0,491,491,0,0
,491,491,0,0,0,0,499,499,499,499,0,499,499,499,499,499,499,499,499,499,499
,499,499,499,499,499,0,499,0,499,499,499,0,499,0,0,499,499,0,499,499,499
,499,499,499,131,0,0,0,0,499,499,0,0,499,499,0,0,0,0,818,882,906,930,0,794
,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,0,802,0,810,898
,1034,0,138,0,0,1010,1018,307,131,131,858,962,866,1026,0,283,0,0,0,786,946
,0,0,131,986,770,305,0,818,882,906,930,283,794,826,834,842,850,874,890,914
,922,938,954,970,978,994,1002,1050,802,0,810,898,1034,0,129,345,0,1010,1018
,0,0,0,858,962,866,1026,0,0,0,307,0,786,946,0,770,305,986,818,882,906,930
,0,794,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,1050,802
,0,810,898,1034,0,0,0,0,1010,1018,0,0,0,858,962,866,1026,0,0,0,0,0,786,946
,0,770,305,986,818,882,906,930,0,794,826,834,842,850,874,890,914,922,938
,954,970,978,994,1002,1050,802,0,810,898,1034,0,0,0,0,1010,1018,0,0,0,858
,962,866,1026,0,0,0,0,0,786,946,0,0,0,986,818,882,906,930,0,794,826,834
,842,850,874,890,914,922,938,954,970,978,994,1002,0,802,0,810,898,1034,0
,0,0,0,1010,1018,0,371,371,858,962,866,1026,0,635,0,329,233,786,946,0,0
,0,986,770,305,371,818,882,906,930,635,794,826,834,842,850,874,890,914,922
,938,954,970,978,994,1002,1050,802,635,810,898,1034,0,0,0,0,1010,1018,0
,0,0,858,962,866,1026,0,0,0,0,0,786,946,0,0,0,986,818,882,906,930,0,794
,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,0,802,0,810,898
,1034,0,0,0,0,1010,1018,0,411,411,858,962,866,1026,0,0,0,0,0,786,946,0,0
,0,986,818,882,906,930,0,794,826,834,842,850,874,890,914,922,938,954,970
,978,994,1002,0,802,0,810,898,0,0,138,0,0,1010,1018,0,0,0,858,962,866,1026
,0,0,0,0,0,786,946,0,0,131,986,818,882,906,930,0,794,826,834,842,850,874
,890,914,922,938,954,970,978,994,1002,0,802,0,810,898,1034,0,0,0,0,1010
,1018,0,0,0,858,962,866,1026,0,0,0,0,0,786,946,0,0,0,986,818,882,906,930
,0,794,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,0,802,0
,810,898,1034,0,0,0,0,1010,1018,0,0,0,858,962,866,1026,0,0,0,0,0,786,946
,0,0,0,986,818,882,906,930,0,794,826,834,842,850,874,890,914,922,938,954
,970,978,994,1002,0,802,0,810,898,0,0,0,0,0,1010,1018,0,0,0,858,962,866
,1026,0,0,0,0,0,786,946,0,0,0,986,818,882,906,930,0,794,826,834,842,850
,874,890,914,922,938,954,970,978,994,1002,0,802,0,810,898,0,0,0,0,0,1010
,1018,0,0,0,858,962,866,1026,0,0,0,0,0,786,946,0,0,0,986,818,882,906,930
,0,794,826,834,842,850,874,890,914,922,938,954,970,978,994,1002,0,802,0
,810,898,0,0,0,0,0,1010,1018,0,0,0,858,962,866,1026,0,0,0,0,0,786,946,0
,0,0,986,818,882,906,930,0,794,826,834,842,850,874,890,914,922,938,954,970
,978,994,1002,0,802,0,810,898,0,1050,138,131,131,1010,1018,131,138,0,858
,962,866,1026,131,131,131,131,0,786,946,131,131,131,986,131,0,0,131,131
,131,27,27,0,131,27,0,0,0,0,0,0,27,27,27,27,0,0,0,27,27,27,0,27,0,0,27,0
,27,138,131,131,0,0,131,0,0,0,0,0,0,0,131,131,131,0,0,0,131,131,131,0,131
,0,0,131,0,131,138,131,131,0,0,131,0,0,0,0,0,0,0,131,131,131,0,0,0,131,131
,131,0,131,0,0,131,0,131,138,131,131,0,0,131,0,0,0,0,0,0,0,131,131,131,0
,0,0,131,131,131,0,131,0,0,131,0,131,138,131,131,0,0,131,0,0,0,0,0,0,0,131
,131,131,0,0,0,131,131,131,0,131,0,0,131,0,131,138,131,131,0,0,131,0,0,0
,0,0,0,0,131,131,131,0,0,0,131,131,131,0,131,0,0,131,0,131,138,131,131,0
,0,131,0,0,0,0,0,0,0,131,131,131,0,0,0,131,131,131,0,131,0,0,131,0,131,138
,131,131,0,0,131,0,0,0,0,0,0,0,131,131,131,0,0,465,131,131,131,0,131,0,0
,131,0,131,138,131,131,0,473,131,0,0,0,0,0,0,0,131,131,131,0,0,0,131,131
,131,338,131,0,0,131,0,131,19,19,0,0,19,331,331,0,0,0,0,673,19,19,19,0,0
,0,19,19,19,0,19,0,331,19,331,19,51,51,0,0,51,0,0,0,0,0,0,0,51,51,51,0,0
,0,51,51,51,643,51,0,233,51,0,51,601,67,0,0,633,0,0,0,0,0,643,0,625,641
,657,0,0,0,617,649,67,0,665,0,0,67,0,609,643}
%%END(pmActTab)
%%SET pmActRDScheckLen(1585)
%%SET pmRDScheckTyp(1)
%%SET pmActRowMapTyp(2)
%%BEGIN(pmRDScheck)
{8,64,30,48,30,30,30,30,30,30,18,18,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,32,32,50,68,30,30,68
,52,67,30,30,30,30,69,29,1,29,29,30,30,68,71,8,30,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,49,52,52
,7,29,29,14,60,60,29,29,29,29,72,39,73,39,39,29,29,52,47,33,29,39,39,39
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,33,14,14,34,39,39,13,13,38,39,39,39,39,54,47,55,14,38,39,39,31,19
,19,39,19,19,19,19,56,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,35,19,19,19,31,11,11,58,19,19,74,66,74,19,19,19,19,15,36,24,6,19,19,19
,11,6,11,19,66,19,21,74,15,15,15,15,74,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,26,15,84,15,15,15,84,15,5,84,15,15,84,15,15,15,15,15,15,16
,84,25,84,84,15,15,84,5,15,15,84,84,5,84,16,16,16,16,25,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,84,16,25,16,16,16,84,16,59,59,16,16,84,16,16
,16,16,16,16,17,84,20,84,84,16,16,84,59,16,16,84,84,84,84,17,17,17,17,20
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,84,17,20,17,17,17,84,17,12
,12,17,17,84,17,17,17,17,17,17,42,84,23,84,84,17,17,84,12,17,17,84,84,84
,84,42,42,42,42,23,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,84,42,23
,42,42,42,84,42,84,84,42,42,84,42,42,42,42,42,42,43,84,84,84,84,42,42,84
,84,42,42,84,84,84,84,43,43,43,43,84,43,43,43,43,43,43,43,43,43,43,43,43
,43,43,43,84,43,84,43,43,43,84,43,84,84,43,43,84,43,43,43,43,43,43,44,84
,84,84,84,43,43,84,84,43,43,84,84,84,84,44,44,44,44,84,44,44,44,44,44,44
,44,44,44,44,44,44,44,44,44,84,44,84,44,44,44,84,44,84,84,44,44,61,44,44
,44,44,44,44,84,65,84,84,84,44,44,84,84,44,44,65,65,84,65,65,65,65,65,65
,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,84,65,65,65,84,61,61,84
,65,65,84,84,84,65,65,65,65,84,84,84,61,84,65,65,84,28,28,65,28,28,28,28
,84,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,84,28,28,28,84,84
,84,84,28,28,84,84,84,28,28,28,28,84,84,84,84,84,28,28,84,40,40,28,40,40
,40,40,84,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,84,40,40,40
,84,84,84,84,40,40,84,84,84,40,40,40,40,84,84,84,84,84,40,40,84,84,84,40
,53,53,53,53,84,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,84,53,84,53
,53,53,84,84,84,84,53,53,84,53,53,53,53,53,53,84,27,84,27,27,53,53,84,84
,84,53,37,37,53,37,37,37,37,27,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,27,37,37,37,84,84,84,84,37,37,84,84,84,37,37,37,37,84,84,84,84
,84,37,37,84,84,84,37,46,46,46,46,84,46,46,46,46,46,46,46,46,46,46,46,46
,46,46,46,84,46,84,46,46,46,84,84,84,84,46,46,84,46,46,46,46,46,46,84,84
,84,84,84,46,46,84,84,84,46,63,63,63,63,84,63,63,63,63,63,63,63,63,63,63
,63,63,63,63,63,84,63,84,63,63,84,84,63,84,84,63,63,84,84,84,63,63,63,63
,84,84,84,84,84,63,63,84,84,63,63,51,51,51,51,84,51,51,51,51,51,51,51,51
,51,51,51,51,51,51,51,84,51,84,51,51,51,84,84,84,84,51,51,84,84,84,51,51
,51,51,84,84,84,84,84,51,51,84,84,84,51,45,45,45,45,84,45,45,45,45,45,45
,45,45,45,45,45,45,45,45,45,84,45,84,45,45,45,84,84,84,84,45,45,84,84,84
,45,45,45,45,84,84,84,84,84,45,45,84,84,84,45,57,57,57,57,84,57,57,57,57
,57,57,57,57,57,57,57,57,57,57,57,84,57,84,57,57,84,84,84,84,84,57,57,84
,84,84,57,57,57,57,84,84,84,84,84,57,57,84,84,84,57,62,62,62,62,84,62,62
,62,62,62,62,62,62,62,62,62,62,62,62,62,84,62,84,62,62,84,84,84,84,84,62
,62,84,84,84,62,62,62,62,84,84,84,84,84,62,62,84,84,84,62,22,22,22,22,84
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,84,22,84,22,22,84,84,84,84
,84,22,22,84,84,84,22,22,22,22,84,84,84,84,84,22,22,84,84,84,22,9,9,9,9
,84,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,84,9,84,9,9,84,70,83,83,83,9,9,83,70,84
,9,9,9,9,83,83,83,83,84,9,9,83,83,83,9,83,84,84,83,70,83,0,0,84,70,0,84
,84,84,84,84,84,0,0,0,0,84,84,84,0,0,0,84,0,84,84,0,84,0,75,75,75,84,84
,75,84,84,84,84,84,84,84,75,75,75,84,84,84,75,75,75,84,75,84,84,75,84,75
,76,76,76,84,84,76,84,84,84,84,84,84,84,76,76,76,84,84,84,76,76,76,84,76
,84,84,76,84,76,77,77,77,84,84,77,84,84,84,84,84,84,84,77,77,77,84,84,84
,77,77,77,84,77,84,84,77,84,77,78,78,78,84,84,78,84,84,84,84,84,84,84,78
,78,78,84,84,84,78,78,78,84,78,84,84,78,84,78,79,79,79,84,84,79,84,84,84
,84,84,84,84,79,79,79,84,84,84,79,79,79,84,79,84,84,79,84,79,80,80,80,84
,84,80,84,84,84,84,84,84,84,80,80,80,84,84,84,80,80,80,84,80,84,84,80,84
,80,81,81,81,84,84,81,84,84,84,84,84,84,84,81,81,81,84,84,10,81,81,81,84
,81,84,84,81,84,81,82,82,82,84,10,82,84,84,84,84,84,84,84,82,82,82,84,84
,84,82,82,82,10,82,84,84,82,84,82,2,2,84,84,2,10,10,84,84,84,84,2,2,2,2
,84,84,84,2,2,2,84,2,84,10,2,10,2,3,3,84,84,3,84,84,84,84,84,84,84,3,3,3
,84,84,84,3,3,3,41,3,84,41,3,84,3,4,4,84,84,4,84,84,84,84,84,41,84,4,4,4
,84,84,84,4,4,4,84,4,84,84,4,84,4,41,84,84,84,84,84,84,84,84,84,84,84,84
,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84}
%%END(pmRDScheck)
%%BEGIN(pmActRowMap)
{1164,56,1424,1452,1480,209,150,34,0,1136,1424,150,313,105,100,210,264,318
,9,156,318,221,1086,372,210,264,243,736,583,53,0,156,31,106,140,152,201
,736,150,106,633,1514,372,426,480,936,786,97,1,30,41,886,47,683,159,121
,173,986,164,259,53,527,1036,836,0,533,202,47,42,19,1142,61,72,107,161,1193
,1222,1251,1280,1309,1338,1367,1396,1136}
%%END(pmActRowMap)
%%BEGIN(pmContTab)
{{44,44}
,{1,1}
,{44,44}
,{44,44}
,{45,45}
,{64,64}
,{64,64}
,{64,64}
,{1,1}
,{60,60}
,{49,49}
,{49,49}
,{49,49}
,{49,49}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{3,3}
,{60,60}
,{3,3}
,{3,3}
,{60,60}
,{3,3}
,{3,3}
,{3,3}
,{3,3}
,{3,3}
,{60,60}
,{3,3}
,{3,3}
,{42,42}
,{11,11}
,{11,11}
,{11,11}
,{42,42}
,{11,11}
,{60,60}
,{15,15}
,{3,3}
,{60,60}
,{3,3}
,{1,1}
,{1,1}
,{1,1}
,{60,60}
,{49,49}
,{65,65}
,{3,3}
,{65,65}
,{3,3}
,{60,60}
,{49,49}
,{49,49}
,{2,2}
,{42,42}
,{3,3}
,{60,60}
,{37,37}
,{49,49}
,{49,49}
,{1,1}
,{60,60}
,{64,64}
,{2,2}
,{3,3}
,{3,3}
,{3,3}
,{3,3}
,{36,36}
,{64,64}
,{2,2}
,{36,36}
,{3,3}
,{45,45}
,{44,44}
,{44,44}
,{44,44}
,{44,44}
,{44,44}
,{44,44}
,{44,44}
,{44,44}
,{44,44}
}
%%END(pmContTab)
%%BEGIN(pmSeparators)
{0,0,0,0,0,0,0,0,0}
%%END(pmSeparators)
%%BEGIN(pmFiducials)
{0,0,0,0,0,0,0,0,0}
%%END(pmFiducials)
%%BEGIN(pmSkips)
{0,0,0,0,0,0,0,0,0}
%%END(pmSkips)
%%SET pmNonTerms(50)
%%SET pmNonTermTyp(1)
%%SET pmGtoTyp(2)
%%SET pmGtoRDSvectorLen(143)
%%BEGIN(pmGtoTab)
{0,0,0,762,762,457,754,754,249,249,97,137,250,746,746,554,554,521,521,90
,321,321,546,425,441,441,666,666,225,553,169,762,762,57,754,754,249,249
,258,266,513,746,746,481,554,537,386,378,321,321,433,546,122,385,666,666
,337,313,762,762,74,754,754,249,249,58,458,762,746,746,754,450,249,497,49
,241,506,746,554,474,17,666,674,426,554,546,506,153,554,466,674,546,481
,385,33,546,226,153,569,577,314,114,234,73,145,577,34,106,353,218,89,450
,65,121,361,105,177,25,610,201,322,489,217,418,458,377,113,41,265,545,281
,297,593,210,146,154,162,170,178,186,194,202,42}
%%END(pmGtoTab)
%%SET pmGtoRowMapTyp(1)
%%BEGIN(pmGtoRowMap)
{79,8,85,88,43,1,64,68,19,87,0,66,80,84,39,0,88,82,3,0,97,2,105,100,2,103
,2,1,55,64,1,123,1,125,1,126,1,29,1,56,28,1,96,98,72,78,38,1,1,1,1,10,1
,9,1,0,1,107,1,75,44,97,4,5,0,1,115,0,0,96,102,0,129,0,126,127,128,129,130
,131,132,133,134,135}
%%END(pmGtoRowMap)
%%SET pmProds(131)
%%SET pmLhsTyp(1)
%%SET pmRhszTyp(1)
%%BEGIN(pmLhs)
{73,81,110,110,93,111,111,103,103,104,104,120,120,107,107,79,79,94,94,94
,94,94,94,94,94,89,90,74,74,72,115,108,108,106,116,116,105,105,95,96,82
,82,82,121,121,121,112,112,109,118,118,119,119,117,117,101,101,99,99,83
,84,88,88,76,76,76,76,87,87,113,113,97,114,91,91,91,86,86,102,102,100,100
,92,92,98,98,98,98,98,98,98,98,80,80,80,80,80,85,85,85,85,85,85,85,85,85
,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,78,77
,75}
%%END(pmLhs)
%%BEGIN(pmRhsz)
{7,0,0,2,2,0,2,0,1,0,1,0,1,1,2,0,1,2,2,2,2,2,2,2,2,2,3,1,2,4,3,1,2,5,0,1
,6,3,1,4,0,1,2,0,2,2,1,2,4,0,2,1,2,3,4,1,2,4,4,0,0,0,2,2,5,5,5,1,1,0,2,5
,1,0,1,2,0,1,1,3,1,3,1,2,1,2,2,2,4,5,5,6,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
%%END(pmRhsz)
%%SET pmSccMax(71)
%%SET pmSccTyp(1)
%%SET pmICostTyp(1)
%%SET pmDCostTyp(1)
%%BEGIN(pmVocTab)
{{1,255,255,"EndOfText",""}
,{2,1,1,"'='",""}
,{3,1,1,"';'",""}
,{4,1,1,"':'",""}
,{5,1,1,"'/'",""}
,{6,1,1,"'!'",""}
,{7,1,1,"'*'",""}
,{8,1,1,"'+'",""}
,{9,1,1,"'?'",""}
,{10,1,1,"'{'",""}
,{11,1,1,"'}'",""}
,{12,1,1,"'-'",""}
,{13,1,1,"'.'",""}
,{14,1,1,"'('",""}
,{15,1,1,"')'",""}
,{16,1,1,"'C'",""}
,{17,1,1,"'K'",""}
,{18,1,1,"'M'",""}
,{19,1,1,"'NO'",""}
,{20,1,1,"'`%`%'",""}
,{21,1,1,"'ADA'",""}
,{22,1,1,"'COL'",""}
,{23,1,1,"'DES'",""}
,{24,1,1,"'DFA'",""}
,{25,1,1,"'ERR'",""}
,{26,1,1,"'GCS'",""}
,{27,1,1,"'LES'",""}
,{28,1,1,"'MAP'",""}
,{29,1,1,"'NFA'",""}
,{30,1,1,"'POS'",""}
,{31,1,1,"'RDS'",""}
,{32,1,1,"'ROW'",""}
,{33,1,1,"'SCR'",""}
,{34,1,1,"'SET'",""}
,{35,1,1,"'TOK'",""}
,{36,1,1,"Class",""}
,{37,1,1,"'AUTO'",""}
,{38,1,1,"'`%`%DO'",""}
,{39,1,1,"'BYTE'",""}
,{40,1,1,"'LIST'",""}
,{41,1,1,"String",""}
,{42,1,1,"Number",""}
,{43,1,1,"'`%`%END'",""}
,{44,1,1,"'`%`%SET'",""}
,{45,1,1,"'`%`%MAP'",""}
,{46,1,1,"'TOKEN'",""}
,{47,1,1,"'TRACE'",""}
,{48,1,1,"'`%`%CODE'",""}
,{49,1,1,"'`%`%RULE'",""}
,{50,1,1,"'`%`%SKIP'",""}
,{51,1,1,"'ESCAPE'",""}
,{52,1,1,"'ROWCOL'",""}
,{53,1,1,"'EXCLUDE'",""}
,{54,1,1,"'VERBOSE'",""}
,{55,1,1,"SKIPHEADER",""}
,{56,1,1,"'`%`%EXPORT'",""}
,{57,1,1,"'`%`%READER'",""}
,{58,1,1,"'`%`%ACTION'",""}
,{59,1,1,"'_UNKNOWN'",""}
,{60,1,1,"Identifier",""}
,{61,1,1,"'POSITION'",""}
,{62,1,1,"'`%`%CONTEXT'",""}
,{63,1,1,"'`%`%PREHOOK'",""}
,{64,1,1,"'`%`%SCANNER'",""}
,{65,1,1,"'SCREENING'",""}
,{66,1,1,"'`%`%POSTHOOK'",""}
,{67,1,1,"'_ENDOFTEXT'",""}
,{68,1,1,"'`%`%SCREENING'",""}
,{69,1,1,"'`%`%DEFINITION'",""}
,{70,1,1,"'`%`%VOCABULARY'",""}
,{71,1,1,"'`%`%DECLARATION'",""}
}
%%END(pmVocTab)
%%SET pmSem(On)
%%BEGIN(pmSemantics)
    switch (rule) {
          case 2: { /* __genSym#0 =; */
{
  vocRead(optVocabulary);
}	break;}
    case 27: { /* <map section> = '`%`%MAP' <maps> <end opt>; */
{
  mapUsed=1;
}	break;}
    case 30: { /* <map> = <class> '=' <class> ';'; */
{
  mapPut(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].name);
}	break;}
    case 34: { /* <definition rule> = <identifier> '=' <selection rule opt> <action opt> ';'; */
{
  register Definition definition;

  definition=definitionGet(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name);
  if(definition==NULL) definition=definitionPut(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name);
  if(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].ast)
    if(definition->ast)
      smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,233,sevERR,"");
    else 
      definition->ast=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].ast;
  if(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].action)
    if(definition->action) 
      smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,246,sevERR,"");
    else
      definition->action=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].action;
}	break;}
    case 36: { /* <selection rule opt> = <selection rule>; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast;
}	break;}
    case 35: { /* <selection rule opt> =; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=NULL;
}	break;}
    case 37: { /* <scanner section> = '`%`%SCANNER' <scanner name> <auto opt> <vocabulary section opt> <screening section opt> <token sections>; */
{
  if(grmScanner) {
    vocCheck(grmScanner);
    tokenCheck(grmScanner);
  }
}	break;}
    case 38: { /* <scanner section> = <scanner copy> <screening section opt> <token sections>; */
{
  if(grmScanner) {
    vocCheck(grmScanner);
    tokenCheck(grmScanner);
  }
}	break;}
    case 39: { /* <scanner name> = <identifier>; */
{
  grmScanner=scannerPut(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name);
}	break;}
    case 40: { /* <scanner copy> = '`%`%SCANNER' <scanner name> ':' <identifier>; */
{
  register Scanner scanner;

  if(grmScanner) {
    scanner=scannerGet(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].name);
    if(scanner) {
      vocCopyAll(grmScanner,scanner->voc);
      tokenCopyAll(grmScanner,scanner->token);
      grmScanner->vocLock=1;
    }
    else
      smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].srcp,234,sevERR,"");
  }
}	break;}
    case 42: { /* <auto opt> = 'AUTO'; */
{
  if(grmScanner) grmScanner->vocAuto=1;
}	break;}
    case 43: { /* <auto opt> = 'NO' 'AUTO'; */
{
  if(grmScanner) grmScanner->vocAuto=0;
}	break;}
    case 41: { /* <auto opt> =; */
{
  if(grmScanner) grmScanner->vocAuto=1;
}	break;}
    case 46: { /* <vocabulary section opt> = '`%`%VOCABULARY' <token definitions>; */
{
  if(grmScanner) grmScanner->vocLock=1;
}	break;}
    case 45: { /* <vocabulary section opt> = '`%`%VOCABULARY' <identifier>; */
{
  register Scanner scanner;

  if(grmScanner) {
    scanner=scannerGet(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].name);
    if(scanner) {
      vocCopyAll(grmScanner,scanner->voc);
      grmScanner->vocLock=1;
    }
    else
      smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].srcp,234,sevERR,"");
  }
}	break;}
    case 49: { /* <token definition> = <token name> '=' <number> ';'; */
{
  if(grmScanner) {
    vocPut(grmScanner, &%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name, &%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].inumber);
  }
}	break;}
    case 55: { /* <screening definition> = <token name> 'NO' 'SCREENING' ';'; */
{
  register Voc voc;

  voc=vocGet(grmScanner,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name);
  if(voc)
    voc->screening=0;
  else if((voc=vocPut(grmScanner, &%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name, NULL, -1))==NULL)
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,213,sevERR,"");
  else
    voc->screening=0;
}	break;}
    case 54: { /* <screening definition> = <token name> 'SCREENING' ';'; */
{
  register Voc voc;

  voc=vocGet(grmScanner,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name);
  if(voc)
    voc->screening=optScreen>0 ? 1 : 0;
  else if((voc=vocPut(grmScanner, &%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name, NULL, -1))==NULL)
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,213,sevERR,"");
  else
    voc->screening=optScreen>0 ? 1 : 0;
}	break;}
    case 60: { /* __genSym#1 =; */
 grmTokenType=tokenRULE; 	break;}
    case 61: { /* __genSym#2 =; */
 grmTokenType=tokenSKIP; 	break;}
    case 65: { /* <token> = <token name> '=' <lookahead rule> <action opt2> ';'; */
{
  if(grmScanner) {
    register Token token;
  
    if(token=tokenPut(grmScanner,grmTokenType,&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name)) {
      token->a.ast=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].ast;
      token->action=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].action;
      token->sequence=astToName(token->a.ast);
    }
  }
}	break;}
    case 66: { /* <token> = <token name> '=' '_ENDOFTEXT' <action opt2> ';'; */
{
  if(grmScanner) {
    register Token token;
  
    if(token=tokenPut(grmScanner,grmTokenType,&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name)) {
      token->type|=tokenEOT;
      token->a.ast=NULL;
      token->action=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].action;
    }
  }
}	break;}
    case 67: { /* <token> = <token name> '=' '_UNKNOWN' <action opt2> ';'; */
{
  if(grmScanner) {
    register Token token;

    if(token=tokenPut(grmScanner,grmTokenType,&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name)) {
      token->type|=tokenUNKNOWN;
      token->a.ast=NULL;
      token->action=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].action;
    }
  }
}	break;}
    case 64: { /* <token> = <token name> ';'; */
{
  if(tokenRemove(grmScanner,grmTokenType,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name)<0)
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,211,sevERR,"");
}	break;}
    case 72: { /* <screen token> = <screen token name> '=' <identifier> <action opt> ';'; */
{
  if(grmScanner) {
    register Token token;
    register Voc voc;

    if(voc=vocGet(grmScanner,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].name)) {
      if(token=tokenPut(grmScanner,tokenSCREEN,&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name)) {
	token->a.screen=voc;
	token->action=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].action;
      }
    }
    else
      smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].srcp,236,sevERR,"");
  }
}	break;}
    case 75: { /* <action opt2> = '`%`%'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].action=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].action;
}	break;}
    case 76: { /* <action opt2> = '`%`%DO' <identifier>; */
{
  register Definition definition;
  
  definition=definitionGet(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].name);
  if(definition==NULL || definition->action==NULL)
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].srcp,245,sevERR,"");
  else
    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].action=definition->action;
}	break;}
    case 74: { /* <action opt2> =; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].action=NULL;
}	break;}
    case 78: { /* <action opt> = '`%`%'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].action=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].action;
}	break;}
    case 77: { /* <action opt> =; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].action=NULL;
}	break;}
    case 80: { /* <lookahead rule> = <selection rule> '/' <selection rule>; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astLookahead(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].ast);
}	break;}
    case 82: { /* <selection rule> = <selection rule> '!' <concat rule>; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astSelect(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].ast);
}	break;}
    case 84: { /* <concat rule> = <concat rule> <closure rule>; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astConcat(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast, %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].ast);
}	break;}
    case 86: { /* <closure rule> = <operand> '*'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,0,-1);
}	break;}
    case 87: { /* <closure rule> = <operand> '+'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,1,-1);
}	break;}
    case 88: { /* <closure rule> = <operand> '?'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,0,1);
}	break;}
    case 89: { /* <closure rule> = <operand> '{' <number> '}'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].inumber,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].inumber);
}	break;}
    case 90: { /* <closure rule> = <operand> '{' '-' <number> '}'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,0,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+4].inumber);
}	break;}
    case 91: { /* <closure rule> = <operand> '{' <number> '-' '}'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].inumber,-1);
}	break;}
    case 92: { /* <closure rule> = <operand> '{' <number> '-' <number> '}'; */
{
  if(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].inumber>%%(parserPrefix)SeSt[%%(parserPrefix)StkP+5].inumber)
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+5].srcp,237,sevERR,"");
  else
    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astClosure(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+3].inumber,%%(parserPrefix)SeSt[%%(parserPrefix)StkP+5].inumber);
}	break;}
    case 93: { /* <operand> = <identifier>; */
{
  register Definition definition;
  
  definition=definitionGet(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name);
  if(definition==NULL || definition->ast==NULL)
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,239,sevERR,"");
  else
    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=definition->ast;
}	break;}
    case 94: { /* <operand> = <string>; */
{
  register AST ast;

  if(ast=astString(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name))
    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=ast;
  else
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,220,sevERR,"");
}	break;}
    case 95: { /* <operand> = <class>; */
{
  register AST ast;

  if(ast=astClass(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name))
    %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=ast;
  else
    smkLog(&%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp,238,sevERR,"");
}	break;}
    case 96: { /* <operand> = '.'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=astCut();
}	break;}
    case 97: { /* <operand> = '(' <selection rule> ')'; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].ast=%%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].ast;
}	break;}
    case 98: { /* <identifier> = Identifier; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 99: { /* <identifier> = 'ADA'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 100: { /* <identifier> = 'AUTO'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 101: { /* <identifier> = 'BYTE'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 102: { /* <identifier> = 'C'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 103: { /* <identifier> = 'COL'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 104: { /* <identifier> = 'DES'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 105: { /* <identifier> = 'DFA'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 106: { /* <identifier> = 'ERR'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 107: { /* <identifier> = 'ESCAPE'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 108: { /* <identifier> = 'EXCLUDE'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 109: { /* <identifier> = 'GCS'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 110: { /* <identifier> = 'K'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 111: { /* <identifier> = 'LES'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 112: { /* <identifier> = 'LIST'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 113: { /* <identifier> = 'M'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 114: { /* <identifier> = 'MAP'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 115: { /* <identifier> = 'NFA'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 116: { /* <identifier> = 'NO'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 117: { /* <identifier> = 'POS'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 118: { /* <identifier> = 'POSITION'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 119: { /* <identifier> = 'RDS'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 120: { /* <identifier> = 'ROWCOL'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 121: { /* <identifier> = 'ROW'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 122: { /* <identifier> = 'SCR'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 123: { /* <identifier> = 'SCREENING'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 124: { /* <identifier> = 'SET'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 125: { /* <identifier> = 'TOK'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 126: { /* <identifier> = 'TOKEN'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 127: { /* <identifier> = 'TRACE'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 128: { /* <identifier> = 'VERBOSE'; */
{ %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name; }	break;}
    case 129: { /* <string> = String; */
{ 
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; 
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name;
}	break;}
    case 130: { /* <number> = Number; */
{ 
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp; 
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].inumber=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].inumber; 
}	break;}
    case 131: { /* <class> = Class; */
{
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].srcp;
  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].name=%%(parserPrefix)SySt[%%(parserPrefix)StkP+1].name;
}	break;}
%%END(pmSemantics)
%%SET vocFileName ("smk.voc")
%%BEGIN (pmVoc)
   0    0 Unknown                  main
   1    1 EndOfText                main
   2    2 '='                      main
   3    3 ';'                      main
   4    4 ':'                      main
   5    5 '/'                      main
   6    6 '!'                      main
   7    7 '*'                      main
   8    8 '+'                      main
   9    9 '?'                      main
  10   10 '{'                      main
  11   11 '}'                      main
  12   12 '-'                      main
  13   13 '.'                      main
  14   14 '('                      main
  15   15 ')'                      main
  16   16 'C'                      main
  17   17 'K'                      main
  18   18 'M'                      main
  19   19 'NO'                     main
  20   20 '`%`%'                     main
  21   21 'ADA'                    main
  22   22 'COL'                    main
  23   23 'DES'                    main
  24   24 'DFA'                    main
  25   25 'ERR'                    main
  26   26 'GCS'                    main
  27   27 'LES'                    main
  28   28 'MAP'                    main
  29   29 'NFA'                    main
  30   30 'POS'                    main
  31   31 'RDS'                    main
  32   32 'ROW'                    main
  33   33 'SCR'                    main
  34   34 'SET'                    main
  35   35 'TOK'                    main
  36   36 Class                    main
  37   37 'AUTO'                   main
  38   38 '`%`%DO'                   main
  39   39 'BYTE'                   main
  40   40 'LIST'                   main
  41   41 String                   main
  42   42 Number                   main
  43   43 '`%`%END'                  main
  44   44 '`%`%SET'                  main
  45   45 '`%`%MAP'                  main
  46   46 'TOKEN'                  main
  47   47 'TRACE'                  main
  48   48 '`%`%CODE'                 main
  49   49 '`%`%RULE'                 main
  50   50 '`%`%SKIP'                 main
  51   51 'ESCAPE'                 main
  52   52 'ROWCOL'                 main
  53   53 'EXCLUDE'                main
  54   54 'VERBOSE'                main
  55   55 SKIPHEADER               main
  56   56 '`%`%EXPORT'               main
  57   57 '`%`%READER'               main
  58   58 '`%`%ACTION'               main
  59   59 '_UNKNOWN'               main
  60   60 Identifier               main
  61   61 'POSITION'               main
  62   62 '`%`%CONTEXT'              main
  63   63 '`%`%PREHOOK'              main
  64   64 '`%`%SCANNER'              main
  65   65 'SCREENING'              main
  66   66 '`%`%POSTHOOK'             main
  67   67 '_ENDOFTEXT'             main
  68   68 '`%`%SCREENING'            main
  69   69 '`%`%DEFINITION'           main
  70   70 '`%`%VOCABULARY'           main
  71   71 '`%`%DECLARATION'          main
%%END (pmVoc)
%%PROCESS("%%(pmkLibrary)/Parse.imp")
%%PROCESS("%%(pmkLibrary)/Err.imp")
