%%SET tmkTokenName("LmkToken")
%%SET tmkTokenCode("code")
%%SET tmkTokenSrcp("srcp")
%%SET tmkTokenDecl (" int code", " TmkSrcp srcp", " char *sval", " int ival", " long fpos", " long length")
%%SET tmkSrcpName("TmkSrcp")
%%SET tmkSrcpRow("line")
%%SET tmkSrcpCol("col")
%%SET tmkSrcpFile("file")
%%BEGIN(tmkImport)

#include "tmkCommon.h"
%%END(tmkImport)
%%SET tmkForce(0)
%%SET tmkOs("SunOS")
%%SET pmkOs("SunOS")
%%SET currentOs("SunOS")
%%SET tmkTarget("c")
%%SET pmkTarget("c")
%%SET tmkLibrary("%%(TMHOME)/lib/%%(tmkTarget)/")
%%SET pmkLibrary("..")
%%SET tmkPrefix("lmk")
%%SET parserPrefix("lmk")
%%SET listerPrefix("lmk")
%%SET tmkCodeDecl(" int code")
%%SET tmkGrmAttrNames("srcp", "mline", "ival", "sval")
%%BEGIN(pmkImport)

#include "lmk_i.h"
#include "lmkScan.h"
#include "tmkCommon.h"
extern lmkContext lmkCtxt;
%%END(pmkImport)
%%PROCESS("%%(tmkLibrary)/Common.imp")
%%SET pmStackMax(32)
%%SET pmLookAheadMax(5)
%%SET pmCost(5)
%%BEGIN(pmIScan)
 lmkScan(lmkCtxt, token);
%%END(pmIScan)
%%SET pmOptimize(Lr0)
%%SET pmActPack(RDS)
%%SET pmGtoPack(RDS)
%%SET pmRec(Single, Multiple, Panic)
%%SET pmHeader("PMK -- ParserMaker 2.1(16) (1997-07-28 17:37)")
%%SET pmVersion("2.1")
%%SET pmCorrection("16")
%%BEGIN(pmDecl)

#include "lmk_i.h"
#include "lmkCommon.h"
#include "lmkList.h"

static int messCnt = 0;

static MessSectNodeP newMessSect(msNode)
  MessSectNodeP msNode;
{
  MessSectNodeP p,q;

  for (p = messSectRoot; p; q=p, p=p->next)
    if (strcmp(p->name, msNode->name) == 0)
      return NULL;
  if (messSectRoot)
    q->next = msNode;
  else
    messSectRoot = msNode;
  return msNode;
}

%%END(pmDecl)
%%SET pmStates(9)
%%SET pmStateTyp(1)
%%SET pmTerms(8)
%%SET pmTermTyp(1)
%%SET pmActTyp(1)
%%SET pmArgTyp(1)
%%SET pmActRDSvectorLen(26)
%%BEGIN(pmActTab)
{75,4,75,65,75,75,99,75,57,90,106,99,99,99,66,11,106,99,19,99,33,0,73,19
,0,19}
%%END(pmActTab)
%%SET pmActRDScheckLen(26)
%%SET pmRDScheckTyp(1)
%%SET pmActRowMapTyp(1)
%%BEGIN(pmRDScheck)
{4,1,4,6,4,4,5,4,5,7,5,5,3,5,8,2,3,3,0,3,2,9,2,0,9,0}
%%END(pmRDScheck)
%%BEGIN(pmActRowMap)
{18,1,15,12,0,6,0,8,8}
%%END(pmActRowMap)
%%BEGIN(pmContTab)
{{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{1,1}
,{4,4}
,{2,2}
,{7,7}
}
%%END(pmContTab)
%%BEGIN(pmSeparators)
{0}
%%END(pmSeparators)
%%BEGIN(pmFiducials)
{0}
%%END(pmFiducials)
%%BEGIN(pmSkips)
{0}
%%END(pmSkips)
%%SET pmNonTerms(9)
%%SET pmNonTermTyp(1)
%%SET pmGtoTyp(1)
%%SET pmGtoRDSvectorLen(10)
%%BEGIN(pmGtoTab)
{17,34,58,82,26,49,25,41,42,50}
%%END(pmGtoTab)
%%SET pmGtoRowMapTyp(1)
%%BEGIN(pmGtoRowMap)
{0,2,0,7,0,0,0,0,0}
%%END(pmGtoRowMap)
%%SET pmProds(13)
%%SET pmLhsTyp(1)
%%SET pmRhszTyp(1)
%%BEGIN(pmLhs)
{9,15,15,13,13,10,17,16,14,14,12,11,11}
%%END(pmLhs)
%%BEGIN(pmRhsz)
{1,0,2,1,1,2,3,2,0,2,3,0,1}
%%END(pmRhsz)
%%SET pmSccMax(8)
%%SET pmSccTyp(1)
%%SET pmICostTyp(1)
%%SET pmDCostTyp(1)
%%BEGIN(pmVocTab)
{{1,255,255,"EndOfText",""}
,{2,1,1,"';'",""}
,{3,1,1,"NUMBER",""}
,{4,1,1,"STRING",""}
,{5,1,1,"'`%`%END'",""}
,{6,1,1,"SKIPHEADER",""}
,{7,1,1,"IDENTIFIER",""}
,{8,1,1,"'`%`%MESSAGES'",""}
}
%%END(pmVocTab)
%%SET pmSem(On)
%%BEGIN(pmSemantics)
    switch (rule) {
          case 7: { /* messages_section = messages_header message_lines optional_end; */
{
          MessSectNodeP p = (MessSectNodeP) malloc(sizeof(MessSectNode));
          p->name = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval;
	  p->messCnt = messCnt;
          p->messages = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].mline;
          p->next = NULL;
          if (!newMessSect(p))
	    lmkLog(%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp, 200, sevERR, p->name);
        }	break;}
    case 8: { /* messages_header = '`%`%MESSAGES' IDENTIFIER; */
{
	  messCnt = 0;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].sval = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].sval;
	  %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].srcp = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].srcp;
	}	break;}
    case 9: { /* message_lines =; */
{
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline = NULL;
        }	break;}
    case 10: { /* message_lines = message_lines message_line; */
{
          MessNodeP p;

          if (%%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline == NULL)
            %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].mline;
          else {
            for (p = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline; p->next; p = p->next);
            p->next = %%(parserPrefix)SeSt[%%(parserPrefix)StkP+2].mline;
            %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline= %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline;
          }
	  messCnt++;
        }	break;}
    case 11: { /* message_line = NUMBER STRING ';'; */
{
          MessNodeP p = (MessNodeP) malloc(sizeof(MessNode));
          p->number = %%(parserPrefix)SySt[%%(parserPrefix)StkP+1].ival;
          p->text = %%(parserPrefix)SySt[%%(parserPrefix)StkP+2].sval;
          p->next = NULL;
          %%(parserPrefix)SeSt[%%(parserPrefix)StkP+1].mline = p;
        }	break;}
%%END(pmSemantics)
%%SET vocFileName ("lmk.voc")
%%BEGIN (pmVoc)
   0    0 Unknown          main
   1    1 EndOfText        main
   2    2 ';'              main
   3    3 NUMBER           main
   4    4 STRING           main
   5    5 '`%`%END'          main
   6    6 SKIPHEADER       main
   7    7 IDENTIFIER       main
   8    8 '`%`%MESSAGES'     main
%%END (pmVoc)
%%PROCESS("%%(pmkLibrary)/Parse.imp")
%%PROCESS("%%(pmkLibrary)/Err.imp")
